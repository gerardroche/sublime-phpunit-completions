{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    // source.php meta.class.php meta.block.php meta.function.php meta.block.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.function.arguments
    //     meta.use
    //     string
    //     support.class
    //     variable.other

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.use - string - support.class - variable.other, source.php meta.class.php meta.block.php meta.function.php meta.block.php - comment - constant.other.class - entity - meta.catch - meta.function.arguments - meta.use - string - support.class - variable.other",
    "completions": [
        {"trigger":"any","contents":"\\$this->any();"},
        {"trigger":"anything","contents":"\\$this->anything();"},
        {"trigger":"arrayHasKey","contents":"\\$this->arrayHasKey(${1:key});"},
        {"trigger":"assertArrayHasKey","contents":"\\$this->assertArrayHasKey(${1:key}, ${2:array});"},
        {"trigger":"assertArrayNotHasKey","contents":"\\$this->assertArrayNotHasKey(${1:key}, ${2:array});"},
        {"trigger":"assertArraySubset","contents":"\\$this->assertArraySubset(${1:subset}, ${2:array});"},
        {"trigger":"assertAttributeContains","contents":"\\$this->assertAttributeContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeContainsOnly","contents":"\\$this->assertAttributeContainsOnly(${1:type}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeCount","contents":"\\$this->assertAttributeCount(${1:expectedCount}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeEmpty","contents":"\\$this->assertAttributeEmpty(${1:haystackAttributeName}, ${2:haystackClassOrObject});"},
        {"trigger":"assertAttributeEquals","contents":"\\$this->assertAttributeEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeGreaterThan","contents":"\\$this->assertAttributeGreaterThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeGreaterThanOrEqual","contents":"\\$this->assertAttributeGreaterThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeInstanceOf","contents":"\\$this->assertAttributeInstanceOf(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeInternalType","contents":"\\$this->assertAttributeInternalType(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeLessThan","contents":"\\$this->assertAttributeLessThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeLessThanOrEqual","contents":"\\$this->assertAttributeLessThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeNotContains","contents":"\\$this->assertAttributeNotContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotContainsOnly","contents":"\\$this->assertAttributeNotContainsOnly(${1:type}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotCount","contents":"\\$this->assertAttributeNotCount(${1:expectedCount}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotEmpty","contents":"\\$this->assertAttributeNotEmpty(${1:haystackAttributeName}, ${2:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotEquals","contents":"\\$this->assertAttributeNotEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeNotInstanceOf","contents":"\\$this->assertAttributeNotInstanceOf(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeNotInternalType","contents":"\\$this->assertAttributeNotInternalType(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeNotSame","contents":"\\$this->assertAttributeNotSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeSame","contents":"\\$this->assertAttributeSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertClassHasAttribute","contents":"\\$this->assertClassHasAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassHasStaticAttribute","contents":"\\$this->assertClassHasStaticAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassNotHasAttribute","contents":"\\$this->assertClassNotHasAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassNotHasStaticAttribute","contents":"\\$this->assertClassNotHasStaticAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertContains","contents":"\\$this->assertContains(${1:needle}, ${2:haystack});"},
        {"trigger":"assertContainsOnly","contents":"\\$this->assertContainsOnly(${1:type}, ${2:haystack});"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"\\$this->assertContainsOnlyInstancesOf(${1:classname}, ${2:haystack});"},
        {"trigger":"assertCount","contents":"\\$this->assertCount(${1:expectedCount}, ${2:haystack});"},
        {"trigger":"assertDataSetsEqual","contents":"\\$this->assertDataSetsEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertEmpty","contents":"\\$this->assertEmpty(${1:actual});"},
        {"trigger":"assertEquals","contents":"\\$this->assertEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertEqualXMLStructure","contents":"\\$this->assertEqualXMLStructure(${1:expectedElement}, ${2:actualElement});"},
        {"trigger":"assertFalse","contents":"\\$this->assertFalse(${1:condition});"},
        {"trigger":"assertFileEquals","contents":"\\$this->assertFileEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertFileExists","contents":"\\$this->assertFileExists(${1:filename});"},
        {"trigger":"assertFileNotEquals","contents":"\\$this->assertFileNotEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertFileNotExists","contents":"\\$this->assertFileNotExists(${1:filename});"},
        {"trigger":"assertFinite","contents":"\\$this->assertFinite(${1:actual});"},
        {"trigger":"assertGreaterThan","contents":"\\$this->assertGreaterThan(${1:expected}, ${2:actual});"},
        {"trigger":"assertGreaterThanOrEqual","contents":"\\$this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertInfinite","contents":"\\$this->assertInfinite(${1:actual});"},
        {"trigger":"assertInstanceOf","contents":"\\$this->assertInstanceOf(${1:expected}, ${2:actual});"},
        {"trigger":"assertInternalType","contents":"\\$this->assertInternalType(${1:expected}, ${2:actual});"},
        {"trigger":"assertJson","contents":"\\$this->assertJson(${1:actualJson});"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"\\$this->assertJsonFileEqualsJsonFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"\\$this->assertJsonFileNotEqualsJsonFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"\\$this->assertJsonStringEqualsJsonFile(${1:expectedFile}, ${2:actualJson});"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"\\$this->assertJsonStringEqualsJsonString(${1:expectedJson}, ${2:actualJson});"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"\\$this->assertJsonStringNotEqualsJsonFile(${1:expectedFile}, ${2:actualJson});"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"\\$this->assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});"},
        {"trigger":"assertLessThan","contents":"\\$this->assertLessThan(${1:expected}, ${2:actual});"},
        {"trigger":"assertLessThanOrEqual","contents":"\\$this->assertLessThanOrEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertNan","contents":"\\$this->assertNan(${1:actual});"},
        {"trigger":"assertNotContains","contents":"\\$this->assertNotContains(${1:needle}, ${2:haystack});"},
        {"trigger":"assertNotContainsOnly","contents":"\\$this->assertNotContainsOnly(${1:type}, ${2:haystack});"},
        {"trigger":"assertNotCount","contents":"\\$this->assertNotCount(${1:expectedCount}, ${2:haystack});"},
        {"trigger":"assertNotEmpty","contents":"\\$this->assertNotEmpty(${1:actual});"},
        {"trigger":"assertNotEquals","contents":"\\$this->assertNotEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotFalse","contents":"\\$this->assertNotFalse(${1:condition});"},
        {"trigger":"assertNotInstanceOf","contents":"\\$this->assertNotInstanceOf(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotInternalType","contents":"\\$this->assertNotInternalType(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotNull","contents":"\\$this->assertNotNull(${1:actual});"},
        {"trigger":"assertNotRegExp","contents":"\\$this->assertNotRegExp(${1:pattern}, ${2:string});"},
        {"trigger":"assertNotSame","contents":"\\$this->assertNotSame(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotSameSize","contents":"\\$this->assertNotSameSize(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotTrue","contents":"\\$this->assertNotTrue(${1:condition});"},
        {"trigger":"assertNull","contents":"\\$this->assertNull(${1:actual});"},
        {"trigger":"assertObjectHasAttribute","contents":"\\$this->assertObjectHasAttribute(${1:attributeName}, ${2:object});"},
        {"trigger":"assertObjectNotHasAttribute","contents":"\\$this->assertObjectNotHasAttribute(${1:attributeName}, ${2:object});"},
        {"trigger":"assertRegExp","contents":"\\$this->assertRegExp(${1:pattern}, ${2:string});"},
        {"trigger":"assertSame","contents":"\\$this->assertSame(${1:expected}, ${2:actual});"},
        {"trigger":"assertSameSize","contents":"\\$this->assertSameSize(${1:expected}, ${2:actual});"},
        {"trigger":"assertStringEndsNotWith","contents":"\\$this->assertStringEndsNotWith(${1:suffix}, ${2:string});"},
        {"trigger":"assertStringEndsWith","contents":"\\$this->assertStringEndsWith(${1:suffix}, ${2:string});"},
        {"trigger":"assertStringEqualsFile","contents":"\\$this->assertStringEqualsFile(${1:expectedFile}, ${2:actualString});"},
        {"trigger":"assertStringMatchesFormat","contents":"\\$this->assertStringMatchesFormat(${1:format}, ${2:string});"},
        {"trigger":"assertStringMatchesFormatFile","contents":"\\$this->assertStringMatchesFormatFile(${1:formatFile}, ${2:string});"},
        {"trigger":"assertStringNotEqualsFile","contents":"\\$this->assertStringNotEqualsFile(${1:expectedFile}, ${2:actualString});"},
        {"trigger":"assertStringNotMatchesFormat","contents":"\\$this->assertStringNotMatchesFormat(${1:format}, ${2:string});"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"\\$this->assertStringNotMatchesFormatFile(${1:formatFile}, ${2:string});"},
        {"trigger":"assertStringStartsNotWith","contents":"\\$this->assertStringStartsNotWith(${1:prefix}, ${2:string});"},
        {"trigger":"assertStringStartsWith","contents":"\\$this->assertStringStartsWith(${1:prefix}, ${2:string});"},
        {"trigger":"assertTableContains","contents":"\\$this->assertTableContains(${1:(array) expectedRow}, ${2:table});"},
        {"trigger":"assertTableRowCount","contents":"\\$this->assertTableRowCount(${1:tableName}, ${2:expected});"},
        {"trigger":"assertTablesEqual","contents":"\\$this->assertTablesEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertThat","contents":"\\$this->assertThat(${1:value}, ${2:constraint});"},
        {"trigger":"assertTrue","contents":"\\$this->assertTrue(${1:condition});"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"\\$this->assertXmlFileEqualsXmlFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"\\$this->assertXmlFileNotEqualsXmlFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"\\$this->assertXmlStringEqualsXmlFile(${1:expectedFile}, ${2:actualXml});"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"\\$this->assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"\\$this->assertXmlStringNotEqualsXmlFile(${1:expectedFile}, ${2:actualXml});"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"\\$this->assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});"},
        {"trigger":"at","contents":"\\$this->at(${1:index});"},
        {"trigger":"atLeast","contents":"\\$this->atLeast(${1:requiredInvocations});"},
        {"trigger":"atLeastOnce","contents":"\\$this->atLeastOnce();"},
        {"trigger":"atMost","contents":"\\$this->atMost(${1:allowedInvocations});"},
        {"trigger":"attribute","contents":"\\$this->attribute(${1:constraint}, ${2:attributeName});"},
        {"trigger":"attributeEqualTo","contents":"\\$this->attributeEqualTo(${1:attributeName}, ${2:value});"},
        {"trigger":"callback","contents":"\\$this->callback(${1:callback});"},
        {"trigger":"classHasAttribute","contents":"\\$this->classHasAttribute(${1:attributeName});"},
        {"trigger":"classHasStaticAttribute","contents":"\\$this->classHasStaticAttribute(${1:attributeName});"},
        {"trigger":"closeConnection","contents":"\\$this->closeConnection(${1:connection});"},
        {"trigger":"contains","contents":"\\$this->contains(${1:value});"},
        {"trigger":"containsOnly","contents":"\\$this->containsOnly(${1:type});"},
        {"trigger":"containsOnlyInstancesOf","contents":"\\$this->containsOnlyInstancesOf(${1:classname});"},
        {"trigger":"countOf","contents":"\\$this->countOf(${1:count});"},
        {"trigger":"createArrayDataSet","contents":"\\$this->createArrayDataSet(${1:(array) data});"},
        {"trigger":"createDefaultDBConnection","contents":"\\$this->createDefaultDBConnection(${1:connection});"},
        {"trigger":"createFlatXMLDataSet","contents":"\\$this->createFlatXMLDataSet(${1:xmlFile});"},
        {"trigger":"createMySQLXMLDataSet","contents":"\\$this->createMySQLXMLDataSet(${1:xmlFile});"},
        {"trigger":"createXMLDataSet","contents":"\\$this->createXMLDataSet(${1:xmlFile});"},
        {"trigger":"equalTo","contents":"\\$this->equalTo(${1:value});"},
        {"trigger":"exactly","contents":"\\$this->exactly(${1:count});"},
        {"trigger":"expectException","contents":"\\$this->expectException(${1:exception});"},
        {"trigger":"expectExceptionCode","contents":"\\$this->expectExceptionCode(${1:code});"},
        {"trigger":"expectExceptionMessage","contents":"\\$this->expectExceptionMessage(${1:message});"},
        {"trigger":"expectExceptionMessageRegExp","contents":"\\$this->expectExceptionMessageRegExp(${1:messageRegExp});"},
        {"trigger":"expectOutputRegex","contents":"\\$this->expectOutputRegex(${1:expectedRegex});"},
        {"trigger":"expectOutputString","contents":"\\$this->expectOutputString(${1:expectedString});"},
        {"trigger":"fail","contents":"\\$this->fail($1);"},
        {"trigger":"fileExists","contents":"\\$this->fileExists();"},
        {"trigger":"getConnection","contents":"\\$this->getConnection();"},
        {"trigger":"getDatabaseTester","contents":"\\$this->getDatabaseTester();"},
        {"trigger":"getDataSet","contents":"\\$this->getDataSet();"},
        {"trigger":"getExpectedException","contents":"\\$this->getExpectedException();"},
        {"trigger":"getMock","contents":"\\$this->getMock(${1:originalClassName});"},
        {"trigger":"getMockBuilder","contents":"\\$this->getMockBuilder(${1:className});"},
        {"trigger":"getMockClass","contents":"\\$this->getMockClass(${1:originalClassName});"},
        {"trigger":"getMockForAbstractClass","contents":"\\$this->getMockForAbstractClass(${1:originalClassName});"},
        {"trigger":"getMockForTrait","contents":"\\$this->getMockForTrait(${1:traitName});"},
        {"trigger":"getMockFromWsdl","contents":"\\$this->getMockFromWsdl(${1:wsdlFile});"},
        {"trigger":"getMockObjectGenerator","contents":"\\$this->getMockObjectGenerator();"},
        {"trigger":"getMockWithoutInvokingTheOriginalConstructor","contents":"\\$this->getMockWithoutInvokingTheOriginalConstructor(${1:originalClassName});"},
        {"trigger":"getObjectAttribute","contents":"\\$this->getObjectAttribute(${1:object}, ${2:attributeName});"},
        {"trigger":"getOperations","contents":"\\$this->getOperations();"},
        {"trigger":"getSetUpOperation","contents":"\\$this->getSetUpOperation();"},
        {"trigger":"getStaticAttribute","contents":"\\$this->getStaticAttribute(${1:className}, ${2:attributeName});"},
        {"trigger":"getTearDownOperation","contents":"\\$this->getTearDownOperation();"},
        {"trigger":"greaterThan","contents":"\\$this->greaterThan(${1:value});"},
        {"trigger":"greaterThanOrEqual","contents":"\\$this->greaterThanOrEqual(${1:value});"},
        {"trigger":"identicalTo","contents":"\\$this->identicalTo(${1:value});"},
        {"trigger":"isEmpty","contents":"\\$this->isEmpty();"},
        {"trigger":"isFalse","contents":"\\$this->isFalse();"},
        {"trigger":"isFinite","contents":"\\$this->isFinite();"},
        {"trigger":"isInfinite","contents":"\\$this->isInfinite();"},
        {"trigger":"isInIsolation","contents":"\\$this->isInIsolation();"},
        {"trigger":"isInstanceOf","contents":"\\$this->isInstanceOf(${1:className});"},
        {"trigger":"isJson","contents":"\\$this->isJson();"},
        {"trigger":"isLarge","contents":"\\$this->isLarge();"},
        {"trigger":"isMedium","contents":"\\$this->isMedium();"},
        {"trigger":"isNan","contents":"\\$this->isNan();"},
        {"trigger":"isNull","contents":"\\$this->isNull();"},
        {"trigger":"isSmall","contents":"\\$this->isSmall();"},
        {"trigger":"isTrue","contents":"\\$this->isTrue();"},
        {"trigger":"isType","contents":"\\$this->isType(${1:type});"},
        {"trigger":"lessThan","contents":"\\$this->lessThan(${1:value});"},
        {"trigger":"lessThanOrEqual","contents":"\\$this->lessThanOrEqual(${1:value});"},
        {"trigger":"logicalAnd","contents":"\\$this->logicalAnd();"},
        {"trigger":"logicalNot","contents":"\\$this->logicalNot(${1:constraint});"},
        {"trigger":"logicalOr","contents":"\\$this->logicalOr();"},
        {"trigger":"logicalXor","contents":"\\$this->logicalXor();"},
        {"trigger":"markTestIncomplete","contents":"\\$this->markTestIncomplete($1);"},
        {"trigger":"markTestSkipped","contents":"\\$this->markTestSkipped($1);"},
        {"trigger":"matches","contents":"\\$this->matches(${1:string});"},
        {"trigger":"matchesRegularExpression","contents":"\\$this->matchesRegularExpression(${1:pattern});"},
        {"trigger":"never","contents":"\\$this->never();"},
        {"trigger":"newDatabaseTester","contents":"\\$this->newDatabaseTester();"},
        {"trigger":"objectHasAttribute","contents":"\\$this->objectHasAttribute(${1:attributeName});"},
        {"trigger":"once","contents":"\\$this->once();"},
        {"trigger":"onConsecutiveCalls","contents":"\\$this->onConsecutiveCalls();"},
        {"trigger":"readAttribute","contents":"\\$this->readAttribute(${1:classOrObject}, ${2:attributeName});"},
        {"trigger":"returnArgument","contents":"\\$this->returnArgument(${1:argumentIndex});"},
        {"trigger":"returnCallback","contents":"\\$this->returnCallback(${1:callback});"},
        {"trigger":"returnSelf","contents":"\\$this->returnSelf();"},
        {"trigger":"returnValue","contents":"\\$this->returnValue(${1:value});"},
        {"trigger":"returnValueMap","contents":"\\$this->returnValueMap(${1:(array) valueMap});"},
        {"trigger":"setExpectedException","contents":"\\$this->setExpectedException(${1:exception});"},
        {"trigger":"setExpectedExceptionFromAnnotation","contents":"\\$this->setExpectedExceptionFromAnnotation();"},
        {"trigger":"setExpectedExceptionRegExp","contents":"\\$this->setExpectedExceptionRegExp(${1:exception});"},
        {"trigger":"setOutputCallback","contents":"\\$this->setOutputCallback(${1:callback});"},
        {"trigger":"setUseErrorHandler","contents":"\\$this->setUseErrorHandler(${1:useErrorHandler});"},
        {"trigger":"setUseErrorHandlerFromAnnotation","contents":"\\$this->setUseErrorHandlerFromAnnotation();"},
        {"trigger":"stringContains","contents":"\\$this->stringContains(${1:string});"},
        {"trigger":"stringEndsWith","contents":"\\$this->stringEndsWith(${1:suffix});"},
        {"trigger":"stringStartsWith","contents":"\\$this->stringStartsWith(${1:prefix});"},
        {"trigger":"throwException","contents":"\\$this->throwException(${1:exception});"}
    ]
}
