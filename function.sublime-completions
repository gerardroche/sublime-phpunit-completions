{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type
    // source.php meta.class.php meta.block.php meta.function.php meta.block.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type, source.php meta.class.php meta.block.php meta.function.php meta.block.php - comment - constant.other.class - entity - meta.catch - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type",
    "completions": [
        {"trigger":"any","contents":"\\$this->any();","kind":"function","annotation":"any(): PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount","details":"any(): PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount"},
        {"trigger":"anything","contents":"\\$this->anything();","kind":"function","annotation":"anything(): PHPUnit\\Framework\\Constraint\\IsAnything","details":"anything(): PHPUnit\\Framework\\Constraint\\IsAnything"},
        {"trigger":"arrayHasKey","contents":"\\$this->arrayHasKey(${1:key});","kind":"function","annotation":"arrayHasKey($key): PHPUnit\\Framework\\Constraint\\ArrayHasKey","details":"arrayHasKey($key): PHPUnit\\Framework\\Constraint\\ArrayHasKey"},
        {"trigger":"assertArrayHasKey","contents":"\\$this->assertArrayHasKey(${1:key}, ${2:array});","kind":"function","annotation":"assertArrayHasKey($key, $array): void","details":"assertArrayHasKey($key, $array): void"},
        {"trigger":"assertArrayNotHasKey","contents":"\\$this->assertArrayNotHasKey(${1:key}, ${2:array});","kind":"function","annotation":"assertArrayNotHasKey($key, $array): void","details":"assertArrayNotHasKey($key, $array): void"},
        {"trigger":"assertClassHasAttribute","contents":"\\$this->assertClassHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"assertClassHasAttribute(string $attributeName, string $className): void","details":"assertClassHasAttribute(string $attributeName, string $className): void"},
        {"trigger":"assertClassHasStaticAttribute","contents":"\\$this->assertClassHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"assertClassHasStaticAttribute(string $attributeName, string $className): void","details":"assertClassHasStaticAttribute(string $attributeName, string $className): void"},
        {"trigger":"assertClassNotHasAttribute","contents":"\\$this->assertClassNotHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"assertClassNotHasAttribute(string $attributeName, string $className): void","details":"assertClassNotHasAttribute(string $attributeName, string $className): void"},
        {"trigger":"assertClassNotHasStaticAttribute","contents":"\\$this->assertClassNotHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"assertClassNotHasStaticAttribute(string $attributeName, string $className): void","details":"assertClassNotHasStaticAttribute(string $attributeName, string $className): void"},
        {"trigger":"assertContains","contents":"\\$this->assertContains(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"assertContains($needle, iterable $haystack): void","details":"assertContains($needle, iterable $haystack): void"},
        {"trigger":"assertContainsEquals","contents":"\\$this->assertContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"assertContainsEquals($needle, iterable $haystack): void","details":"assertContainsEquals($needle, iterable $haystack): void"},
        {"trigger":"assertContainsOnly","contents":"\\$this->assertContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":"function","annotation":"assertContainsOnly(string $type, iterable $haystack): void","details":"assertContainsOnly(string $type, iterable $haystack): void"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"\\$this->assertContainsOnlyInstancesOf(${1:string:className}, ${2:iterable:haystack});","kind":"function","annotation":"assertContainsOnlyInstancesOf(string $className, iterable $haystack): void","details":"assertContainsOnlyInstancesOf(string $className, iterable $haystack): void"},
        {"trigger":"assertCount","contents":"\\$this->assertCount(${1:int:expectedCount}, ${2:haystack});","kind":"function","annotation":"assertCount(int $expectedCount, $haystack): void","details":"assertCount(int $expectedCount, $haystack): void"},
        {"trigger":"assertDirectoryDoesNotExist","contents":"\\$this->assertDirectoryDoesNotExist(${1:string:directory});","kind":"function","annotation":"assertDirectoryDoesNotExist(string $directory): void","details":"assertDirectoryDoesNotExist(string $directory): void"},
        {"trigger":"assertDirectoryExists","contents":"\\$this->assertDirectoryExists(${1:string:directory});","kind":"function","annotation":"assertDirectoryExists(string $directory): void","details":"assertDirectoryExists(string $directory): void"},
        {"trigger":"assertDirectoryIsNotReadable","contents":"\\$this->assertDirectoryIsNotReadable(${1:string:directory});","kind":"function","annotation":"assertDirectoryIsNotReadable(string $directory): void","details":"assertDirectoryIsNotReadable(string $directory): void"},
        {"trigger":"assertDirectoryIsNotWritable","contents":"\\$this->assertDirectoryIsNotWritable(${1:string:directory});","kind":"function","annotation":"assertDirectoryIsNotWritable(string $directory): void","details":"assertDirectoryIsNotWritable(string $directory): void"},
        {"trigger":"assertDirectoryIsReadable","contents":"\\$this->assertDirectoryIsReadable(${1:string:directory});","kind":"function","annotation":"assertDirectoryIsReadable(string $directory): void","details":"assertDirectoryIsReadable(string $directory): void"},
        {"trigger":"assertDirectoryIsWritable","contents":"\\$this->assertDirectoryIsWritable(${1:string:directory});","kind":"function","annotation":"assertDirectoryIsWritable(string $directory): void","details":"assertDirectoryIsWritable(string $directory): void"},
        {"trigger":"assertDirectoryNotExists","contents":"\\$this->assertDirectoryNotExists(${1:string:directory});","kind":"function","annotation":"assertDirectoryNotExists(string $directory): void","details":"assertDirectoryNotExists(string $directory): void"},
        {"trigger":"assertDirectoryNotIsReadable","contents":"\\$this->assertDirectoryNotIsReadable(${1:string:directory});","kind":"function","annotation":"assertDirectoryNotIsReadable(string $directory): void","details":"assertDirectoryNotIsReadable(string $directory): void"},
        {"trigger":"assertDirectoryNotIsWritable","contents":"\\$this->assertDirectoryNotIsWritable(${1:string:directory});","kind":"function","annotation":"assertDirectoryNotIsWritable(string $directory): void","details":"assertDirectoryNotIsWritable(string $directory): void"},
        {"trigger":"assertDoesNotMatchRegularExpression","contents":"\\$this->assertDoesNotMatchRegularExpression(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"assertDoesNotMatchRegularExpression(string $pattern, string $string): void","details":"assertDoesNotMatchRegularExpression(string $pattern, string $string): void"},
        {"trigger":"assertEmpty","contents":"\\$this->assertEmpty(${1:actual});","kind":"function","annotation":"assertEmpty($actual): void","details":"assertEmpty($actual): void"},
        {"trigger":"assertEqualXMLStructure","contents":"\\$this->assertEqualXMLStructure(${1:DOMElement:expectedElement}, ${2:DOMElement:actualElement});","kind":"function","annotation":"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement): void","details":"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement): void"},
        {"trigger":"assertEquals","contents":"\\$this->assertEquals(${1:expected}, ${2:actual});","kind":"function","annotation":"assertEquals($expected, $actual): void","details":"assertEquals($expected, $actual): void"},
        {"trigger":"assertEqualsCanonicalizing","contents":"\\$this->assertEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":"function","annotation":"assertEqualsCanonicalizing($expected, $actual): void","details":"assertEqualsCanonicalizing($expected, $actual): void"},
        {"trigger":"assertEqualsIgnoringCase","contents":"\\$this->assertEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":"function","annotation":"assertEqualsIgnoringCase($expected, $actual): void","details":"assertEqualsIgnoringCase($expected, $actual): void"},
        {"trigger":"assertEqualsWithDelta","contents":"\\$this->assertEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":"function","annotation":"assertEqualsWithDelta($expected, $actual, float $delta): void","details":"assertEqualsWithDelta($expected, $actual, float $delta): void"},
        {"trigger":"assertFalse","contents":"\\$this->assertFalse(${1:condition});","kind":"function","annotation":"assertFalse($condition): void","details":"assertFalse($condition): void"},
        {"trigger":"assertFileDoesNotExist","contents":"\\$this->assertFileDoesNotExist(${1:string:filename});","kind":"function","annotation":"assertFileDoesNotExist(string $filename): void","details":"assertFileDoesNotExist(string $filename): void"},
        {"trigger":"assertFileEquals","contents":"\\$this->assertFileEquals(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"assertFileEquals(string $expected, string $actual): void","details":"assertFileEquals(string $expected, string $actual): void"},
        {"trigger":"assertFileEqualsCanonicalizing","contents":"\\$this->assertFileEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"assertFileEqualsCanonicalizing(string $expected, string $actual): void","details":"assertFileEqualsCanonicalizing(string $expected, string $actual): void"},
        {"trigger":"assertFileEqualsIgnoringCase","contents":"\\$this->assertFileEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"assertFileEqualsIgnoringCase(string $expected, string $actual): void","details":"assertFileEqualsIgnoringCase(string $expected, string $actual): void"},
        {"trigger":"assertFileExists","contents":"\\$this->assertFileExists(${1:string:filename});","kind":"function","annotation":"assertFileExists(string $filename): void","details":"assertFileExists(string $filename): void"},
        {"trigger":"assertFileIsNotReadable","contents":"\\$this->assertFileIsNotReadable(${1:string:file});","kind":"function","annotation":"assertFileIsNotReadable(string $file): void","details":"assertFileIsNotReadable(string $file): void"},
        {"trigger":"assertFileIsNotWritable","contents":"\\$this->assertFileIsNotWritable(${1:string:file});","kind":"function","annotation":"assertFileIsNotWritable(string $file): void","details":"assertFileIsNotWritable(string $file): void"},
        {"trigger":"assertFileIsReadable","contents":"\\$this->assertFileIsReadable(${1:string:file});","kind":"function","annotation":"assertFileIsReadable(string $file): void","details":"assertFileIsReadable(string $file): void"},
        {"trigger":"assertFileIsWritable","contents":"\\$this->assertFileIsWritable(${1:string:file});","kind":"function","annotation":"assertFileIsWritable(string $file): void","details":"assertFileIsWritable(string $file): void"},
        {"trigger":"assertFileNotEquals","contents":"\\$this->assertFileNotEquals(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"assertFileNotEquals(string $expected, string $actual): void","details":"assertFileNotEquals(string $expected, string $actual): void"},
        {"trigger":"assertFileNotEqualsCanonicalizing","contents":"\\$this->assertFileNotEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"assertFileNotEqualsCanonicalizing(string $expected, string $actual): void","details":"assertFileNotEqualsCanonicalizing(string $expected, string $actual): void"},
        {"trigger":"assertFileNotEqualsIgnoringCase","contents":"\\$this->assertFileNotEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"assertFileNotEqualsIgnoringCase(string $expected, string $actual): void","details":"assertFileNotEqualsIgnoringCase(string $expected, string $actual): void"},
        {"trigger":"assertFileNotExists","contents":"\\$this->assertFileNotExists(${1:string:filename});","kind":"function","annotation":"assertFileNotExists(string $filename): void","details":"assertFileNotExists(string $filename): void"},
        {"trigger":"assertFileNotIsReadable","contents":"\\$this->assertFileNotIsReadable(${1:string:file});","kind":"function","annotation":"assertFileNotIsReadable(string $file): void","details":"assertFileNotIsReadable(string $file): void"},
        {"trigger":"assertFileNotIsWritable","contents":"\\$this->assertFileNotIsWritable(${1:string:file});","kind":"function","annotation":"assertFileNotIsWritable(string $file): void","details":"assertFileNotIsWritable(string $file): void"},
        {"trigger":"assertFinite","contents":"\\$this->assertFinite(${1:actual});","kind":"function","annotation":"assertFinite($actual): void","details":"assertFinite($actual): void"},
        {"trigger":"assertGreaterThan","contents":"\\$this->assertGreaterThan(${1:expected}, ${2:actual});","kind":"function","annotation":"assertGreaterThan($expected, $actual): void","details":"assertGreaterThan($expected, $actual): void"},
        {"trigger":"assertGreaterThanOrEqual","contents":"\\$this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});","kind":"function","annotation":"assertGreaterThanOrEqual($expected, $actual): void","details":"assertGreaterThanOrEqual($expected, $actual): void"},
        {"trigger":"assertInfinite","contents":"\\$this->assertInfinite(${1:actual});","kind":"function","annotation":"assertInfinite($actual): void","details":"assertInfinite($actual): void"},
        {"trigger":"assertInstanceOf","contents":"\\$this->assertInstanceOf(${1:string:expected}, ${2:actual});","kind":"function","annotation":"assertInstanceOf(string $expected, $actual): void","details":"assertInstanceOf(string $expected, $actual): void"},
        {"trigger":"assertIsArray","contents":"\\$this->assertIsArray(${1:actual});","kind":"function","annotation":"assertIsArray($actual): void","details":"assertIsArray($actual): void"},
        {"trigger":"assertIsBool","contents":"\\$this->assertIsBool(${1:actual});","kind":"function","annotation":"assertIsBool($actual): void","details":"assertIsBool($actual): void"},
        {"trigger":"assertIsCallable","contents":"\\$this->assertIsCallable(${1:actual});","kind":"function","annotation":"assertIsCallable($actual): void","details":"assertIsCallable($actual): void"},
        {"trigger":"assertIsClosedResource","contents":"\\$this->assertIsClosedResource(${1:actual});","kind":"function","annotation":"assertIsClosedResource($actual): void","details":"assertIsClosedResource($actual): void"},
        {"trigger":"assertIsFloat","contents":"\\$this->assertIsFloat(${1:actual});","kind":"function","annotation":"assertIsFloat($actual): void","details":"assertIsFloat($actual): void"},
        {"trigger":"assertIsInt","contents":"\\$this->assertIsInt(${1:actual});","kind":"function","annotation":"assertIsInt($actual): void","details":"assertIsInt($actual): void"},
        {"trigger":"assertIsIterable","contents":"\\$this->assertIsIterable(${1:actual});","kind":"function","annotation":"assertIsIterable($actual): void","details":"assertIsIterable($actual): void"},
        {"trigger":"assertIsNotArray","contents":"\\$this->assertIsNotArray(${1:actual});","kind":"function","annotation":"assertIsNotArray($actual): void","details":"assertIsNotArray($actual): void"},
        {"trigger":"assertIsNotBool","contents":"\\$this->assertIsNotBool(${1:actual});","kind":"function","annotation":"assertIsNotBool($actual): void","details":"assertIsNotBool($actual): void"},
        {"trigger":"assertIsNotCallable","contents":"\\$this->assertIsNotCallable(${1:actual});","kind":"function","annotation":"assertIsNotCallable($actual): void","details":"assertIsNotCallable($actual): void"},
        {"trigger":"assertIsNotClosedResource","contents":"\\$this->assertIsNotClosedResource(${1:actual});","kind":"function","annotation":"assertIsNotClosedResource($actual): void","details":"assertIsNotClosedResource($actual): void"},
        {"trigger":"assertIsNotFloat","contents":"\\$this->assertIsNotFloat(${1:actual});","kind":"function","annotation":"assertIsNotFloat($actual): void","details":"assertIsNotFloat($actual): void"},
        {"trigger":"assertIsNotInt","contents":"\\$this->assertIsNotInt(${1:actual});","kind":"function","annotation":"assertIsNotInt($actual): void","details":"assertIsNotInt($actual): void"},
        {"trigger":"assertIsNotIterable","contents":"\\$this->assertIsNotIterable(${1:actual});","kind":"function","annotation":"assertIsNotIterable($actual): void","details":"assertIsNotIterable($actual): void"},
        {"trigger":"assertIsNotNumeric","contents":"\\$this->assertIsNotNumeric(${1:actual});","kind":"function","annotation":"assertIsNotNumeric($actual): void","details":"assertIsNotNumeric($actual): void"},
        {"trigger":"assertIsNotObject","contents":"\\$this->assertIsNotObject(${1:actual});","kind":"function","annotation":"assertIsNotObject($actual): void","details":"assertIsNotObject($actual): void"},
        {"trigger":"assertIsNotReadable","contents":"\\$this->assertIsNotReadable(${1:string:filename});","kind":"function","annotation":"assertIsNotReadable(string $filename): void","details":"assertIsNotReadable(string $filename): void"},
        {"trigger":"assertIsNotResource","contents":"\\$this->assertIsNotResource(${1:actual});","kind":"function","annotation":"assertIsNotResource($actual): void","details":"assertIsNotResource($actual): void"},
        {"trigger":"assertIsNotScalar","contents":"\\$this->assertIsNotScalar(${1:actual});","kind":"function","annotation":"assertIsNotScalar($actual): void","details":"assertIsNotScalar($actual): void"},
        {"trigger":"assertIsNotString","contents":"\\$this->assertIsNotString(${1:actual});","kind":"function","annotation":"assertIsNotString($actual): void","details":"assertIsNotString($actual): void"},
        {"trigger":"assertIsNotWritable","contents":"\\$this->assertIsNotWritable(${1:string:filename});","kind":"function","annotation":"assertIsNotWritable(string $filename): void","details":"assertIsNotWritable(string $filename): void"},
        {"trigger":"assertIsNumeric","contents":"\\$this->assertIsNumeric(${1:actual});","kind":"function","annotation":"assertIsNumeric($actual): void","details":"assertIsNumeric($actual): void"},
        {"trigger":"assertIsObject","contents":"\\$this->assertIsObject(${1:actual});","kind":"function","annotation":"assertIsObject($actual): void","details":"assertIsObject($actual): void"},
        {"trigger":"assertIsReadable","contents":"\\$this->assertIsReadable(${1:string:filename});","kind":"function","annotation":"assertIsReadable(string $filename): void","details":"assertIsReadable(string $filename): void"},
        {"trigger":"assertIsResource","contents":"\\$this->assertIsResource(${1:actual});","kind":"function","annotation":"assertIsResource($actual): void","details":"assertIsResource($actual): void"},
        {"trigger":"assertIsScalar","contents":"\\$this->assertIsScalar(${1:actual});","kind":"function","annotation":"assertIsScalar($actual): void","details":"assertIsScalar($actual): void"},
        {"trigger":"assertIsString","contents":"\\$this->assertIsString(${1:actual});","kind":"function","annotation":"assertIsString($actual): void","details":"assertIsString($actual): void"},
        {"trigger":"assertIsWritable","contents":"\\$this->assertIsWritable(${1:string:filename});","kind":"function","annotation":"assertIsWritable(string $filename): void","details":"assertIsWritable(string $filename): void"},
        {"trigger":"assertJson","contents":"\\$this->assertJson(${1:string:actualJson});","kind":"function","annotation":"assertJson(string $actualJson): void","details":"assertJson(string $actualJson): void"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"\\$this->assertJsonFileEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile): void","details":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"\\$this->assertJsonFileNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile): void","details":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"\\$this->assertJsonStringEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":"function","annotation":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson): void","details":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson): void"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"\\$this->assertJsonStringEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});","kind":"function","annotation":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson): void","details":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson): void"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"\\$this->assertJsonStringNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":"function","annotation":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson): void","details":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson): void"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"\\$this->assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});","kind":"function","annotation":"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson): void","details":"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson): void"},
        {"trigger":"assertLessThan","contents":"\\$this->assertLessThan(${1:expected}, ${2:actual});","kind":"function","annotation":"assertLessThan($expected, $actual): void","details":"assertLessThan($expected, $actual): void"},
        {"trigger":"assertLessThanOrEqual","contents":"\\$this->assertLessThanOrEqual(${1:expected}, ${2:actual});","kind":"function","annotation":"assertLessThanOrEqual($expected, $actual): void","details":"assertLessThanOrEqual($expected, $actual): void"},
        {"trigger":"assertMatchesRegularExpression","contents":"\\$this->assertMatchesRegularExpression(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"assertMatchesRegularExpression(string $pattern, string $string): void","details":"assertMatchesRegularExpression(string $pattern, string $string): void"},
        {"trigger":"assertNan","contents":"\\$this->assertNan(${1:actual});","kind":"function","annotation":"assertNan($actual): void","details":"assertNan($actual): void"},
        {"trigger":"assertNotContains","contents":"\\$this->assertNotContains(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"assertNotContains($needle, iterable $haystack): void","details":"assertNotContains($needle, iterable $haystack): void"},
        {"trigger":"assertNotContainsEquals","contents":"\\$this->assertNotContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"assertNotContainsEquals($needle, iterable $haystack): void","details":"assertNotContainsEquals($needle, iterable $haystack): void"},
        {"trigger":"assertNotContainsOnly","contents":"\\$this->assertNotContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":"function","annotation":"assertNotContainsOnly(string $type, iterable $haystack): void","details":"assertNotContainsOnly(string $type, iterable $haystack): void"},
        {"trigger":"assertNotCount","contents":"\\$this->assertNotCount(${1:int:expectedCount}, ${2:haystack});","kind":"function","annotation":"assertNotCount(int $expectedCount, $haystack): void","details":"assertNotCount(int $expectedCount, $haystack): void"},
        {"trigger":"assertNotEmpty","contents":"\\$this->assertNotEmpty(${1:actual});","kind":"function","annotation":"assertNotEmpty($actual): void","details":"assertNotEmpty($actual): void"},
        {"trigger":"assertNotEquals","contents":"\\$this->assertNotEquals(${1:expected}, ${2:actual});","kind":"function","annotation":"assertNotEquals($expected, $actual): void","details":"assertNotEquals($expected, $actual): void"},
        {"trigger":"assertNotEqualsCanonicalizing","contents":"\\$this->assertNotEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":"function","annotation":"assertNotEqualsCanonicalizing($expected, $actual): void","details":"assertNotEqualsCanonicalizing($expected, $actual): void"},
        {"trigger":"assertNotEqualsIgnoringCase","contents":"\\$this->assertNotEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":"function","annotation":"assertNotEqualsIgnoringCase($expected, $actual): void","details":"assertNotEqualsIgnoringCase($expected, $actual): void"},
        {"trigger":"assertNotEqualsWithDelta","contents":"\\$this->assertNotEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":"function","annotation":"assertNotEqualsWithDelta($expected, $actual, float $delta): void","details":"assertNotEqualsWithDelta($expected, $actual, float $delta): void"},
        {"trigger":"assertNotFalse","contents":"\\$this->assertNotFalse(${1:condition});","kind":"function","annotation":"assertNotFalse($condition): void","details":"assertNotFalse($condition): void"},
        {"trigger":"assertNotInstanceOf","contents":"\\$this->assertNotInstanceOf(${1:string:expected}, ${2:actual});","kind":"function","annotation":"assertNotInstanceOf(string $expected, $actual): void","details":"assertNotInstanceOf(string $expected, $actual): void"},
        {"trigger":"assertNotIsReadable","contents":"\\$this->assertNotIsReadable(${1:string:filename});","kind":"function","annotation":"assertNotIsReadable(string $filename): void","details":"assertNotIsReadable(string $filename): void"},
        {"trigger":"assertNotIsWritable","contents":"\\$this->assertNotIsWritable(${1:string:filename});","kind":"function","annotation":"assertNotIsWritable(string $filename): void","details":"assertNotIsWritable(string $filename): void"},
        {"trigger":"assertNotNull","contents":"\\$this->assertNotNull(${1:actual});","kind":"function","annotation":"assertNotNull($actual): void","details":"assertNotNull($actual): void"},
        {"trigger":"assertNotRegExp","contents":"\\$this->assertNotRegExp(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"assertNotRegExp(string $pattern, string $string): void","details":"assertNotRegExp(string $pattern, string $string): void"},
        {"trigger":"assertNotSame","contents":"\\$this->assertNotSame(${1:expected}, ${2:actual});","kind":"function","annotation":"assertNotSame($expected, $actual): void","details":"assertNotSame($expected, $actual): void"},
        {"trigger":"assertNotSameSize","contents":"\\$this->assertNotSameSize(${1:expected}, ${2:actual});","kind":"function","annotation":"assertNotSameSize($expected, $actual): void","details":"assertNotSameSize($expected, $actual): void"},
        {"trigger":"assertNotTrue","contents":"\\$this->assertNotTrue(${1:condition});","kind":"function","annotation":"assertNotTrue($condition): void","details":"assertNotTrue($condition): void"},
        {"trigger":"assertNull","contents":"\\$this->assertNull(${1:actual});","kind":"function","annotation":"assertNull($actual): void","details":"assertNull($actual): void"},
        {"trigger":"assertObjectEquals","contents":"\\$this->assertObjectEquals(${1:object:expected}, ${2:object:actual});","kind":"function","annotation":"assertObjectEquals(object $expected, object $actual): void","details":"assertObjectEquals(object $expected, object $actual): void"},
        {"trigger":"assertObjectHasAttribute","contents":"\\$this->assertObjectHasAttribute(${1:string:attributeName}, ${2:object});","kind":"function","annotation":"assertObjectHasAttribute(string $attributeName, $object): void","details":"assertObjectHasAttribute(string $attributeName, $object): void"},
        {"trigger":"assertObjectNotHasAttribute","contents":"\\$this->assertObjectNotHasAttribute(${1:string:attributeName}, ${2:object});","kind":"function","annotation":"assertObjectNotHasAttribute(string $attributeName, $object): void","details":"assertObjectNotHasAttribute(string $attributeName, $object): void"},
        {"trigger":"assertRegExp","contents":"\\$this->assertRegExp(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"assertRegExp(string $pattern, string $string): void","details":"assertRegExp(string $pattern, string $string): void"},
        {"trigger":"assertSame","contents":"\\$this->assertSame(${1:expected}, ${2:actual});","kind":"function","annotation":"assertSame($expected, $actual): void","details":"assertSame($expected, $actual): void"},
        {"trigger":"assertSameSize","contents":"\\$this->assertSameSize(${1:expected}, ${2:actual});","kind":"function","annotation":"assertSameSize($expected, $actual): void","details":"assertSameSize($expected, $actual): void"},
        {"trigger":"assertStringContainsString","contents":"\\$this->assertStringContainsString(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"assertStringContainsString(string $needle, string $haystack): void","details":"assertStringContainsString(string $needle, string $haystack): void"},
        {"trigger":"assertStringContainsStringIgnoringCase","contents":"\\$this->assertStringContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"assertStringContainsStringIgnoringCase(string $needle, string $haystack): void","details":"assertStringContainsStringIgnoringCase(string $needle, string $haystack): void"},
        {"trigger":"assertStringEndsNotWith","contents":"\\$this->assertStringEndsNotWith(${1:string:suffix}, ${2:string:string});","kind":"function","annotation":"assertStringEndsNotWith(string $suffix, string $string): void","details":"assertStringEndsNotWith(string $suffix, string $string): void"},
        {"trigger":"assertStringEndsWith","contents":"\\$this->assertStringEndsWith(${1:string:suffix}, ${2:string:string});","kind":"function","annotation":"assertStringEndsWith(string $suffix, string $string): void","details":"assertStringEndsWith(string $suffix, string $string): void"},
        {"trigger":"assertStringEqualsFile","contents":"\\$this->assertStringEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"assertStringEqualsFile(string $expectedFile, string $actualString): void","details":"assertStringEqualsFile(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringEqualsFileCanonicalizing","contents":"\\$this->assertStringEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString): void","details":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringEqualsFileIgnoringCase","contents":"\\$this->assertStringEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString): void","details":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringMatchesFormat","contents":"\\$this->assertStringMatchesFormat(${1:string:format}, ${2:string:string});","kind":"function","annotation":"assertStringMatchesFormat(string $format, string $string): void","details":"assertStringMatchesFormat(string $format, string $string): void"},
        {"trigger":"assertStringMatchesFormatFile","contents":"\\$this->assertStringMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":"function","annotation":"assertStringMatchesFormatFile(string $formatFile, string $string): void","details":"assertStringMatchesFormatFile(string $formatFile, string $string): void"},
        {"trigger":"assertStringNotContainsString","contents":"\\$this->assertStringNotContainsString(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"assertStringNotContainsString(string $needle, string $haystack): void","details":"assertStringNotContainsString(string $needle, string $haystack): void"},
        {"trigger":"assertStringNotContainsStringIgnoringCase","contents":"\\$this->assertStringNotContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack): void","details":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack): void"},
        {"trigger":"assertStringNotEqualsFile","contents":"\\$this->assertStringNotEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"assertStringNotEqualsFile(string $expectedFile, string $actualString): void","details":"assertStringNotEqualsFile(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringNotEqualsFileCanonicalizing","contents":"\\$this->assertStringNotEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString): void","details":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringNotEqualsFileIgnoringCase","contents":"\\$this->assertStringNotEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString): void","details":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringNotMatchesFormat","contents":"\\$this->assertStringNotMatchesFormat(${1:string:format}, ${2:string:string});","kind":"function","annotation":"assertStringNotMatchesFormat(string $format, string $string): void","details":"assertStringNotMatchesFormat(string $format, string $string): void"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"\\$this->assertStringNotMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":"function","annotation":"assertStringNotMatchesFormatFile(string $formatFile, string $string): void","details":"assertStringNotMatchesFormatFile(string $formatFile, string $string): void"},
        {"trigger":"assertStringStartsNotWith","contents":"\\$this->assertStringStartsNotWith(${1:prefix}, ${2:string});","kind":"function","annotation":"assertStringStartsNotWith($prefix, $string): void","details":"assertStringStartsNotWith($prefix, $string): void"},
        {"trigger":"assertStringStartsWith","contents":"\\$this->assertStringStartsWith(${1:string:prefix}, ${2:string:string});","kind":"function","annotation":"assertStringStartsWith(string $prefix, string $string): void","details":"assertStringStartsWith(string $prefix, string $string): void"},
        {"trigger":"assertThat","contents":"\\$this->assertThat(${1:value}, ${2:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":"function","annotation":"assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint): void","details":"assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint): void"},
        {"trigger":"assertTrue","contents":"\\$this->assertTrue(${1:condition});","kind":"function","annotation":"assertTrue($condition): void","details":"assertTrue($condition): void"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"\\$this->assertXmlFileEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile): void","details":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"\\$this->assertXmlFileNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile): void","details":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"\\$this->assertXmlStringEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":"function","annotation":"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml): void","details":"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml): void"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"\\$this->assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":"function","annotation":"assertXmlStringEqualsXmlString($expectedXml, $actualXml): void","details":"assertXmlStringEqualsXmlString($expectedXml, $actualXml): void"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"\\$this->assertXmlStringNotEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":"function","annotation":"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml): void","details":"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml): void"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"\\$this->assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":"function","annotation":"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml): void","details":"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml): void"},
        {"trigger":"at","contents":"\\$this->at(${1:int:index});","kind":"function","annotation":"at(int $index): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex","details":"at(int $index): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex"},
        {"trigger":"atLeast","contents":"\\$this->atLeast(${1:int:requiredInvocations});","kind":"function","annotation":"atLeast(int $requiredInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount","details":"atLeast(int $requiredInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount"},
        {"trigger":"atLeastOnce","contents":"\\$this->atLeastOnce();","kind":"function","annotation":"atLeastOnce(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce","details":"atLeastOnce(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce"},
        {"trigger":"atMost","contents":"\\$this->atMost(${1:int:allowedInvocations});","kind":"function","annotation":"atMost(int $allowedInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount","details":"atMost(int $allowedInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount"},
        {"trigger":"callback","contents":"\\$this->callback(${1:callable:callback});","kind":"function","annotation":"callback(callable $callback): PHPUnit\\Framework\\Constraint\\Callback","details":"callback(callable $callback): PHPUnit\\Framework\\Constraint\\Callback"},
        {"trigger":"classHasAttribute","contents":"\\$this->classHasAttribute(${1:string:attributeName});","kind":"function","annotation":"classHasAttribute(string $attributeName): PHPUnit\\Framework\\Constraint\\ClassHasAttribute","details":"classHasAttribute(string $attributeName): PHPUnit\\Framework\\Constraint\\ClassHasAttribute"},
        {"trigger":"classHasStaticAttribute","contents":"\\$this->classHasStaticAttribute(${1:string:attributeName});","kind":"function","annotation":"classHasStaticAttribute(string $attributeName): PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute","details":"classHasStaticAttribute(string $attributeName): PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute"},
        {"trigger":"containsEqual","contents":"\\$this->containsEqual(${1:value});","kind":"function","annotation":"containsEqual($value): PHPUnit\\Framework\\Constraint\\TraversableContainsEqual","details":"containsEqual($value): PHPUnit\\Framework\\Constraint\\TraversableContainsEqual"},
        {"trigger":"containsIdentical","contents":"\\$this->containsIdentical(${1:value});","kind":"function","annotation":"containsIdentical($value): PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical","details":"containsIdentical($value): PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical"},
        {"trigger":"containsOnly","contents":"\\$this->containsOnly(${1:string:type});","kind":"function","annotation":"containsOnly(string $type): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnly(string $type): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"containsOnlyInstancesOf","contents":"\\$this->containsOnlyInstancesOf(${1:string:className});","kind":"function","annotation":"containsOnlyInstancesOf(string $className): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnlyInstancesOf(string $className): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"countOf","contents":"\\$this->countOf(${1:int:count});","kind":"function","annotation":"countOf(int $count): PHPUnit\\Framework\\Constraint\\Count","details":"countOf(int $count): PHPUnit\\Framework\\Constraint\\Count"},
        {"trigger":"createConfiguredMock","contents":"\\$this->createConfiguredMock(${1:string:originalClassName}, ${2:array:configuration});","kind":"function","annotation":"createConfiguredMock(string $originalClassName, array $configuration): PHPUnit\\Framework\\MockObject\\MockObject","details":"createConfiguredMock(string $originalClassName, array $configuration): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createMock","contents":"\\$this->createMock(${1:string:originalClassName});","kind":"function","annotation":"createMock(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject","details":"createMock(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createPartialMock","contents":"\\$this->createPartialMock(${1:string:originalClassName}, ${2:array:methods});","kind":"function","annotation":"createPartialMock(string $originalClassName, array $methods): PHPUnit\\Framework\\MockObject\\MockObject","details":"createPartialMock(string $originalClassName, array $methods): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createStub","contents":"\\$this->createStub(${1:string:originalClassName});","kind":"function","annotation":"createStub(string $originalClassName): PHPUnit\\Framework\\MockObject\\Stub","details":"createStub(string $originalClassName): PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createTestProxy","contents":"\\$this->createTestProxy(${1:string:originalClassName});","kind":"function","annotation":"createTestProxy(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject","details":"createTestProxy(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"directoryExists","contents":"\\$this->directoryExists();","kind":"function","annotation":"directoryExists(): PHPUnit\\Framework\\Constraint\\DirectoryExists","details":"directoryExists(): PHPUnit\\Framework\\Constraint\\DirectoryExists"},
        {"trigger":"equalTo","contents":"\\$this->equalTo(${1:value});","kind":"function","annotation":"equalTo($value): PHPUnit\\Framework\\Constraint\\IsEqual","details":"equalTo($value): PHPUnit\\Framework\\Constraint\\IsEqual"},
        {"trigger":"equalToCanonicalizing","contents":"\\$this->equalToCanonicalizing(${1:value});","kind":"function","annotation":"equalToCanonicalizing($value): PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing","details":"equalToCanonicalizing($value): PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing"},
        {"trigger":"equalToIgnoringCase","contents":"\\$this->equalToIgnoringCase(${1:value});","kind":"function","annotation":"equalToIgnoringCase($value): PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase","details":"equalToIgnoringCase($value): PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase"},
        {"trigger":"equalToWithDelta","contents":"\\$this->equalToWithDelta(${1:value}, ${2:float:delta});","kind":"function","annotation":"equalToWithDelta($value, float $delta): PHPUnit\\Framework\\Constraint\\IsEqualWithDelta","details":"equalToWithDelta($value, float $delta): PHPUnit\\Framework\\Constraint\\IsEqualWithDelta"},
        {"trigger":"exactly","contents":"\\$this->exactly(${1:int:count});","kind":"function","annotation":"exactly(int $count): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"exactly(int $count): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"expectDeprecation","contents":"\\$this->expectDeprecation();","kind":"function","annotation":"expectDeprecation(): void","details":"expectDeprecation(): void"},
        {"trigger":"expectDeprecationMessage","contents":"\\$this->expectDeprecationMessage(${1:string:message});","kind":"function","annotation":"expectDeprecationMessage(string $message): void","details":"expectDeprecationMessage(string $message): void"},
        {"trigger":"expectDeprecationMessageMatches","contents":"\\$this->expectDeprecationMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"expectDeprecationMessageMatches(string $regularExpression): void","details":"expectDeprecationMessageMatches(string $regularExpression): void"},
        {"trigger":"expectError","contents":"\\$this->expectError();","kind":"function","annotation":"expectError(): void","details":"expectError(): void"},
        {"trigger":"expectErrorMessage","contents":"\\$this->expectErrorMessage(${1:string:message});","kind":"function","annotation":"expectErrorMessage(string $message): void","details":"expectErrorMessage(string $message): void"},
        {"trigger":"expectErrorMessageMatches","contents":"\\$this->expectErrorMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"expectErrorMessageMatches(string $regularExpression): void","details":"expectErrorMessageMatches(string $regularExpression): void"},
        {"trigger":"expectException","contents":"\\$this->expectException(${1:string:exception});","kind":"function","annotation":"expectException(string $exception): void","details":"expectException(string $exception): void"},
        {"trigger":"expectExceptionCode","contents":"\\$this->expectExceptionCode(${1:code});","kind":"function","annotation":"expectExceptionCode($code): void","details":"expectExceptionCode($code): void"},
        {"trigger":"expectExceptionMessage","contents":"\\$this->expectExceptionMessage(${1:string:message});","kind":"function","annotation":"expectExceptionMessage(string $message): void","details":"expectExceptionMessage(string $message): void"},
        {"trigger":"expectExceptionMessageMatches","contents":"\\$this->expectExceptionMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"expectExceptionMessageMatches(string $regularExpression): void","details":"expectExceptionMessageMatches(string $regularExpression): void"},
        {"trigger":"expectExceptionObject","contents":"\\$this->expectExceptionObject(${1:Exception:exception});","kind":"function","annotation":"expectExceptionObject(Exception $exception): void","details":"expectExceptionObject(Exception $exception): void"},
        {"trigger":"expectNotToPerformAssertions","contents":"\\$this->expectNotToPerformAssertions();","kind":"function","annotation":"expectNotToPerformAssertions(): void","details":"expectNotToPerformAssertions(): void"},
        {"trigger":"expectNotice","contents":"\\$this->expectNotice();","kind":"function","annotation":"expectNotice(): void","details":"expectNotice(): void"},
        {"trigger":"expectNoticeMessage","contents":"\\$this->expectNoticeMessage(${1:string:message});","kind":"function","annotation":"expectNoticeMessage(string $message): void","details":"expectNoticeMessage(string $message): void"},
        {"trigger":"expectNoticeMessageMatches","contents":"\\$this->expectNoticeMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"expectNoticeMessageMatches(string $regularExpression): void","details":"expectNoticeMessageMatches(string $regularExpression): void"},
        {"trigger":"expectOutputRegex","contents":"\\$this->expectOutputRegex(${1:string:expectedRegex});","kind":"function","annotation":"expectOutputRegex(string $expectedRegex): void","details":"expectOutputRegex(string $expectedRegex): void"},
        {"trigger":"expectOutputString","contents":"\\$this->expectOutputString(${1:string:expectedString});","kind":"function","annotation":"expectOutputString(string $expectedString): void","details":"expectOutputString(string $expectedString): void"},
        {"trigger":"expectWarning","contents":"\\$this->expectWarning();","kind":"function","annotation":"expectWarning(): void","details":"expectWarning(): void"},
        {"trigger":"expectWarningMessage","contents":"\\$this->expectWarningMessage(${1:string:message});","kind":"function","annotation":"expectWarningMessage(string $message): void","details":"expectWarningMessage(string $message): void"},
        {"trigger":"expectWarningMessageMatches","contents":"\\$this->expectWarningMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"expectWarningMessageMatches(string $regularExpression): void","details":"expectWarningMessageMatches(string $regularExpression): void"},
        {"trigger":"fail","contents":"\\$this->fail($1);","kind":"function","annotation":"fail($1): void","details":"fail($1): void"},
        {"trigger":"fileExists","contents":"\\$this->fileExists();","kind":"function","annotation":"fileExists(): PHPUnit\\Framework\\Constraint\\FileExists","details":"fileExists(): PHPUnit\\Framework\\Constraint\\FileExists"},
        {"trigger":"getExpectedException","contents":"\\$this->getExpectedException();","kind":"function","annotation":"getExpectedException(): ?string","details":"getExpectedException(): ?string"},
        {"trigger":"getExpectedExceptionCode","contents":"\\$this->getExpectedExceptionCode();","kind":"function","annotation":"getExpectedExceptionCode()","details":"getExpectedExceptionCode()"},
        {"trigger":"getExpectedExceptionMessage","contents":"\\$this->getExpectedExceptionMessage();","kind":"function","annotation":"getExpectedExceptionMessage(): ?string","details":"getExpectedExceptionMessage(): ?string"},
        {"trigger":"getExpectedExceptionMessageRegExp","contents":"\\$this->getExpectedExceptionMessageRegExp();","kind":"function","annotation":"getExpectedExceptionMessageRegExp(): ?string","details":"getExpectedExceptionMessageRegExp(): ?string"},
        {"trigger":"getMockBuilder","contents":"\\$this->getMockBuilder(${1:string:className});","kind":"function","annotation":"getMockBuilder(string $className): PHPUnit\\Framework\\MockObject\\MockBuilder","details":"getMockBuilder(string $className): PHPUnit\\Framework\\MockObject\\MockBuilder"},
        {"trigger":"getMockClass","contents":"\\$this->getMockClass(${1:string:originalClassName});","kind":"function","annotation":"getMockClass(string $originalClassName): string","details":"getMockClass(string $originalClassName): string"},
        {"trigger":"getMockForAbstractClass","contents":"\\$this->getMockForAbstractClass(${1:string:originalClassName});","kind":"function","annotation":"getMockForAbstractClass(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForAbstractClass(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockForTrait","contents":"\\$this->getMockForTrait(${1:string:traitName});","kind":"function","annotation":"getMockForTrait(string $traitName): PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForTrait(string $traitName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockFromWsdl","contents":"\\$this->getMockFromWsdl(${1:string:wsdlFile});","kind":"function","annotation":"getMockFromWsdl(string $wsdlFile): PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockFromWsdl(string $wsdlFile): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"greaterThan","contents":"\\$this->greaterThan(${1:value});","kind":"function","annotation":"greaterThan($value): PHPUnit\\Framework\\Constraint\\GreaterThan","details":"greaterThan($value): PHPUnit\\Framework\\Constraint\\GreaterThan"},
        {"trigger":"greaterThanOrEqual","contents":"\\$this->greaterThanOrEqual(${1:value});","kind":"function","annotation":"greaterThanOrEqual($value): PHPUnit\\Framework\\Constraint\\LogicalOr","details":"greaterThanOrEqual($value): PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"identicalTo","contents":"\\$this->identicalTo(${1:value});","kind":"function","annotation":"identicalTo($value): PHPUnit\\Framework\\Constraint\\IsIdentical","details":"identicalTo($value): PHPUnit\\Framework\\Constraint\\IsIdentical"},
        {"trigger":"isEmpty","contents":"\\$this->isEmpty();","kind":"function","annotation":"isEmpty(): PHPUnit\\Framework\\Constraint\\IsEmpty","details":"isEmpty(): PHPUnit\\Framework\\Constraint\\IsEmpty"},
        {"trigger":"isFalse","contents":"\\$this->isFalse();","kind":"function","annotation":"isFalse(): PHPUnit\\Framework\\Constraint\\IsFalse","details":"isFalse(): PHPUnit\\Framework\\Constraint\\IsFalse"},
        {"trigger":"isFinite","contents":"\\$this->isFinite();","kind":"function","annotation":"isFinite(): PHPUnit\\Framework\\Constraint\\IsFinite","details":"isFinite(): PHPUnit\\Framework\\Constraint\\IsFinite"},
        {"trigger":"isInIsolation","contents":"\\$this->isInIsolation();","kind":"function","annotation":"isInIsolation(): bool","details":"isInIsolation(): bool"},
        {"trigger":"isInfinite","contents":"\\$this->isInfinite();","kind":"function","annotation":"isInfinite(): PHPUnit\\Framework\\Constraint\\IsInfinite","details":"isInfinite(): PHPUnit\\Framework\\Constraint\\IsInfinite"},
        {"trigger":"isInstanceOf","contents":"\\$this->isInstanceOf(${1:string:className});","kind":"function","annotation":"isInstanceOf(string $className): PHPUnit\\Framework\\Constraint\\IsInstanceOf","details":"isInstanceOf(string $className): PHPUnit\\Framework\\Constraint\\IsInstanceOf"},
        {"trigger":"isJson","contents":"\\$this->isJson();","kind":"function","annotation":"isJson(): PHPUnit\\Framework\\Constraint\\IsJson","details":"isJson(): PHPUnit\\Framework\\Constraint\\IsJson"},
        {"trigger":"isLarge","contents":"\\$this->isLarge();","kind":"function","annotation":"isLarge(): bool","details":"isLarge(): bool"},
        {"trigger":"isMedium","contents":"\\$this->isMedium();","kind":"function","annotation":"isMedium(): bool","details":"isMedium(): bool"},
        {"trigger":"isNan","contents":"\\$this->isNan();","kind":"function","annotation":"isNan(): PHPUnit\\Framework\\Constraint\\IsNan","details":"isNan(): PHPUnit\\Framework\\Constraint\\IsNan"},
        {"trigger":"isNull","contents":"\\$this->isNull();","kind":"function","annotation":"isNull(): PHPUnit\\Framework\\Constraint\\IsNull","details":"isNull(): PHPUnit\\Framework\\Constraint\\IsNull"},
        {"trigger":"isReadable","contents":"\\$this->isReadable();","kind":"function","annotation":"isReadable(): PHPUnit\\Framework\\Constraint\\IsReadable","details":"isReadable(): PHPUnit\\Framework\\Constraint\\IsReadable"},
        {"trigger":"isSmall","contents":"\\$this->isSmall();","kind":"function","annotation":"isSmall(): bool","details":"isSmall(): bool"},
        {"trigger":"isTrue","contents":"\\$this->isTrue();","kind":"function","annotation":"isTrue(): PHPUnit\\Framework\\Constraint\\IsTrue","details":"isTrue(): PHPUnit\\Framework\\Constraint\\IsTrue"},
        {"trigger":"isType","contents":"\\$this->isType(${1:string:type});","kind":"function","annotation":"isType(string $type): PHPUnit\\Framework\\Constraint\\IsType","details":"isType(string $type): PHPUnit\\Framework\\Constraint\\IsType"},
        {"trigger":"isWritable","contents":"\\$this->isWritable();","kind":"function","annotation":"isWritable(): PHPUnit\\Framework\\Constraint\\IsWritable","details":"isWritable(): PHPUnit\\Framework\\Constraint\\IsWritable"},
        {"trigger":"lessThan","contents":"\\$this->lessThan(${1:value});","kind":"function","annotation":"lessThan($value): PHPUnit\\Framework\\Constraint\\LessThan","details":"lessThan($value): PHPUnit\\Framework\\Constraint\\LessThan"},
        {"trigger":"lessThanOrEqual","contents":"\\$this->lessThanOrEqual(${1:value});","kind":"function","annotation":"lessThanOrEqual($value): PHPUnit\\Framework\\Constraint\\LogicalOr","details":"lessThanOrEqual($value): PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalAnd","contents":"\\$this->logicalAnd();","kind":"function","annotation":"logicalAnd(): PHPUnit\\Framework\\Constraint\\LogicalAnd","details":"logicalAnd(): PHPUnit\\Framework\\Constraint\\LogicalAnd"},
        {"trigger":"logicalNot","contents":"\\$this->logicalNot(${1:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":"function","annotation":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint): PHPUnit\\Framework\\Constraint\\LogicalNot","details":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint): PHPUnit\\Framework\\Constraint\\LogicalNot"},
        {"trigger":"logicalOr","contents":"\\$this->logicalOr();","kind":"function","annotation":"logicalOr(): PHPUnit\\Framework\\Constraint\\LogicalOr","details":"logicalOr(): PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalXor","contents":"\\$this->logicalXor();","kind":"function","annotation":"logicalXor(): PHPUnit\\Framework\\Constraint\\LogicalXor","details":"logicalXor(): PHPUnit\\Framework\\Constraint\\LogicalXor"},
        {"trigger":"markAsRisky","contents":"\\$this->markAsRisky();","kind":"function","annotation":"markAsRisky(): void","details":"markAsRisky(): void"},
        {"trigger":"markTestIncomplete","contents":"\\$this->markTestIncomplete($1);","kind":"function","annotation":"markTestIncomplete($1): void","details":"markTestIncomplete($1): void"},
        {"trigger":"markTestSkipped","contents":"\\$this->markTestSkipped($1);","kind":"function","annotation":"markTestSkipped($1): void","details":"markTestSkipped($1): void"},
        {"trigger":"matches","contents":"\\$this->matches(${1:string:string});","kind":"function","annotation":"matches(string $string): PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription","details":"matches(string $string): PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription"},
        {"trigger":"matchesRegularExpression","contents":"\\$this->matchesRegularExpression(${1:string:pattern});","kind":"function","annotation":"matchesRegularExpression(string $pattern): PHPUnit\\Framework\\Constraint\\RegularExpression","details":"matchesRegularExpression(string $pattern): PHPUnit\\Framework\\Constraint\\RegularExpression"},
        {"trigger":"never","contents":"\\$this->never();","kind":"function","annotation":"never(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"never(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"objectHasAttribute","contents":"\\$this->objectHasAttribute(${1:attributeName});","kind":"function","annotation":"objectHasAttribute($attributeName): PHPUnit\\Framework\\Constraint\\ObjectHasAttribute","details":"objectHasAttribute($attributeName): PHPUnit\\Framework\\Constraint\\ObjectHasAttribute"},
        {"trigger":"onConsecutiveCalls","contents":"\\$this->onConsecutiveCalls($1);","kind":"function","annotation":"onConsecutiveCalls($1): PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls","details":"onConsecutiveCalls($1): PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls"},
        {"trigger":"once","contents":"\\$this->once();","kind":"function","annotation":"once(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"once(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"recordDoubledType","contents":"\\$this->recordDoubledType(${1:string:originalClassName});","kind":"function","annotation":"recordDoubledType(string $originalClassName): void","details":"recordDoubledType(string $originalClassName): void"},
        {"trigger":"returnArgument","contents":"\\$this->returnArgument(${1:int:argumentIndex});","kind":"function","annotation":"returnArgument(int $argumentIndex): PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument","details":"returnArgument(int $argumentIndex): PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument"},
        {"trigger":"returnCallback","contents":"\\$this->returnCallback(${1:callback});","kind":"function","annotation":"returnCallback($callback): PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback","details":"returnCallback($callback): PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback"},
        {"trigger":"returnSelf","contents":"\\$this->returnSelf();","kind":"function","annotation":"returnSelf(): PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf","details":"returnSelf(): PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf"},
        {"trigger":"returnValue","contents":"\\$this->returnValue(${1:value});","kind":"function","annotation":"returnValue($value): PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub","details":"returnValue($value): PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub"},
        {"trigger":"returnValueMap","contents":"\\$this->returnValueMap(${1:array:valueMap});","kind":"function","annotation":"returnValueMap(array $valueMap): PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap","details":"returnValueMap(array $valueMap): PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap"},
        {"trigger":"setOutputCallback","contents":"\\$this->setOutputCallback(${1:callable:callback});","kind":"function","annotation":"setOutputCallback(callable $callback): void","details":"setOutputCallback(callable $callback): void"},
        {"trigger":"stringContains","contents":"\\$this->stringContains(${1:string:string});","kind":"function","annotation":"stringContains(string $string): PHPUnit\\Framework\\Constraint\\StringContains","details":"stringContains(string $string): PHPUnit\\Framework\\Constraint\\StringContains"},
        {"trigger":"stringEndsWith","contents":"\\$this->stringEndsWith(${1:string:suffix});","kind":"function","annotation":"stringEndsWith(string $suffix): PHPUnit\\Framework\\Constraint\\StringEndsWith","details":"stringEndsWith(string $suffix): PHPUnit\\Framework\\Constraint\\StringEndsWith"},
        {"trigger":"stringStartsWith","contents":"\\$this->stringStartsWith(${1:prefix});","kind":"function","annotation":"stringStartsWith($prefix): PHPUnit\\Framework\\Constraint\\StringStartsWith","details":"stringStartsWith($prefix): PHPUnit\\Framework\\Constraint\\StringStartsWith"},
        {"trigger":"throwException","contents":"\\$this->throwException(${1:Throwable:exception});","kind":"function","annotation":"throwException(Throwable $exception): PHPUnit\\Framework\\MockObject\\Stub\\Exception","details":"throwException(Throwable $exception): PHPUnit\\Framework\\MockObject\\Stub\\Exception"}
    ]
}
