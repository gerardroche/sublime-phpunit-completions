{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type
    // source.php meta.class.php meta.block.php meta.function.php meta.block.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type, source.php meta.class.php meta.block.php meta.function.php meta.block.php - comment - constant.other.class - entity - meta.catch - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type",
    "completions": [
        {"trigger":"any","contents":"\\$this->any();: PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount","kind":"function","annotation":"any();: PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount","details":"any();: PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount"},
        {"trigger":"anything","contents":"\\$this->anything();: PHPUnit\\Framework\\Constraint\\IsAnything","kind":"function","annotation":"anything();: PHPUnit\\Framework\\Constraint\\IsAnything","details":"anything();: PHPUnit\\Framework\\Constraint\\IsAnything"},
        {"trigger":"arrayHasKey","contents":"\\$this->arrayHasKey($key);: PHPUnit\\Framework\\Constraint\\ArrayHasKey","kind":"function","annotation":"arrayHasKey($key);: PHPUnit\\Framework\\Constraint\\ArrayHasKey","details":"arrayHasKey($key);: PHPUnit\\Framework\\Constraint\\ArrayHasKey"},
        {"trigger":"assertArrayHasKey","contents":"\\$this->assertArrayHasKey($key, $array);: void","kind":"function","annotation":"assertArrayHasKey($key, $array);: void","details":"assertArrayHasKey($key, $array);: void"},
        {"trigger":"assertArrayNotHasKey","contents":"\\$this->assertArrayNotHasKey($key, $array);: void","kind":"function","annotation":"assertArrayNotHasKey($key, $array);: void","details":"assertArrayNotHasKey($key, $array);: void"},
        {"trigger":"assertClassHasAttribute","contents":"\\$this->assertClassHasAttribute(string $attributeName, string $className);: void","kind":"function","annotation":"assertClassHasAttribute(string $attributeName, string $className);: void","details":"assertClassHasAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertClassHasStaticAttribute","contents":"\\$this->assertClassHasStaticAttribute(string $attributeName, string $className);: void","kind":"function","annotation":"assertClassHasStaticAttribute(string $attributeName, string $className);: void","details":"assertClassHasStaticAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertClassNotHasAttribute","contents":"\\$this->assertClassNotHasAttribute(string $attributeName, string $className);: void","kind":"function","annotation":"assertClassNotHasAttribute(string $attributeName, string $className);: void","details":"assertClassNotHasAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertClassNotHasStaticAttribute","contents":"\\$this->assertClassNotHasStaticAttribute(string $attributeName, string $className);: void","kind":"function","annotation":"assertClassNotHasStaticAttribute(string $attributeName, string $className);: void","details":"assertClassNotHasStaticAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertContains","contents":"\\$this->assertContains($needle, iterable $haystack);: void","kind":"function","annotation":"assertContains($needle, iterable $haystack);: void","details":"assertContains($needle, iterable $haystack);: void"},
        {"trigger":"assertContainsEquals","contents":"\\$this->assertContainsEquals($needle, iterable $haystack);: void","kind":"function","annotation":"assertContainsEquals($needle, iterable $haystack);: void","details":"assertContainsEquals($needle, iterable $haystack);: void"},
        {"trigger":"assertContainsOnly","contents":"\\$this->assertContainsOnly(string $type, iterable $haystack);: void","kind":"function","annotation":"assertContainsOnly(string $type, iterable $haystack);: void","details":"assertContainsOnly(string $type, iterable $haystack);: void"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"\\$this->assertContainsOnlyInstancesOf(string $className, iterable $haystack);: void","kind":"function","annotation":"assertContainsOnlyInstancesOf(string $className, iterable $haystack);: void","details":"assertContainsOnlyInstancesOf(string $className, iterable $haystack);: void"},
        {"trigger":"assertCount","contents":"\\$this->assertCount(int $expectedCount, $haystack);: void","kind":"function","annotation":"assertCount(int $expectedCount, $haystack);: void","details":"assertCount(int $expectedCount, $haystack);: void"},
        {"trigger":"assertDirectoryDoesNotExist","contents":"\\$this->assertDirectoryDoesNotExist(string $directory);: void","kind":"function","annotation":"assertDirectoryDoesNotExist(string $directory);: void","details":"assertDirectoryDoesNotExist(string $directory);: void"},
        {"trigger":"assertDirectoryExists","contents":"\\$this->assertDirectoryExists(string $directory);: void","kind":"function","annotation":"assertDirectoryExists(string $directory);: void","details":"assertDirectoryExists(string $directory);: void"},
        {"trigger":"assertDirectoryIsNotReadable","contents":"\\$this->assertDirectoryIsNotReadable(string $directory);: void","kind":"function","annotation":"assertDirectoryIsNotReadable(string $directory);: void","details":"assertDirectoryIsNotReadable(string $directory);: void"},
        {"trigger":"assertDirectoryIsNotWritable","contents":"\\$this->assertDirectoryIsNotWritable(string $directory);: void","kind":"function","annotation":"assertDirectoryIsNotWritable(string $directory);: void","details":"assertDirectoryIsNotWritable(string $directory);: void"},
        {"trigger":"assertDirectoryIsReadable","contents":"\\$this->assertDirectoryIsReadable(string $directory);: void","kind":"function","annotation":"assertDirectoryIsReadable(string $directory);: void","details":"assertDirectoryIsReadable(string $directory);: void"},
        {"trigger":"assertDirectoryIsWritable","contents":"\\$this->assertDirectoryIsWritable(string $directory);: void","kind":"function","annotation":"assertDirectoryIsWritable(string $directory);: void","details":"assertDirectoryIsWritable(string $directory);: void"},
        {"trigger":"assertDirectoryNotExists","contents":"\\$this->assertDirectoryNotExists(string $directory);: void","kind":"function","annotation":"assertDirectoryNotExists(string $directory);: void","details":"assertDirectoryNotExists(string $directory);: void"},
        {"trigger":"assertDirectoryNotIsReadable","contents":"\\$this->assertDirectoryNotIsReadable(string $directory);: void","kind":"function","annotation":"assertDirectoryNotIsReadable(string $directory);: void","details":"assertDirectoryNotIsReadable(string $directory);: void"},
        {"trigger":"assertDirectoryNotIsWritable","contents":"\\$this->assertDirectoryNotIsWritable(string $directory);: void","kind":"function","annotation":"assertDirectoryNotIsWritable(string $directory);: void","details":"assertDirectoryNotIsWritable(string $directory);: void"},
        {"trigger":"assertDoesNotMatchRegularExpression","contents":"\\$this->assertDoesNotMatchRegularExpression(string $pattern, string $string);: void","kind":"function","annotation":"assertDoesNotMatchRegularExpression(string $pattern, string $string);: void","details":"assertDoesNotMatchRegularExpression(string $pattern, string $string);: void"},
        {"trigger":"assertEmpty","contents":"\\$this->assertEmpty($actual);: void","kind":"function","annotation":"assertEmpty($actual);: void","details":"assertEmpty($actual);: void"},
        {"trigger":"assertEqualXMLStructure","contents":"\\$this->assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement);: void","kind":"function","annotation":"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement);: void","details":"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement);: void"},
        {"trigger":"assertEquals","contents":"\\$this->assertEquals($expected, $actual);: void","kind":"function","annotation":"assertEquals($expected, $actual);: void","details":"assertEquals($expected, $actual);: void"},
        {"trigger":"assertEqualsCanonicalizing","contents":"\\$this->assertEqualsCanonicalizing($expected, $actual);: void","kind":"function","annotation":"assertEqualsCanonicalizing($expected, $actual);: void","details":"assertEqualsCanonicalizing($expected, $actual);: void"},
        {"trigger":"assertEqualsIgnoringCase","contents":"\\$this->assertEqualsIgnoringCase($expected, $actual);: void","kind":"function","annotation":"assertEqualsIgnoringCase($expected, $actual);: void","details":"assertEqualsIgnoringCase($expected, $actual);: void"},
        {"trigger":"assertEqualsWithDelta","contents":"\\$this->assertEqualsWithDelta($expected, $actual, float $delta);: void","kind":"function","annotation":"assertEqualsWithDelta($expected, $actual, float $delta);: void","details":"assertEqualsWithDelta($expected, $actual, float $delta);: void"},
        {"trigger":"assertFalse","contents":"\\$this->assertFalse($condition);: void","kind":"function","annotation":"assertFalse($condition);: void","details":"assertFalse($condition);: void"},
        {"trigger":"assertFileDoesNotExist","contents":"\\$this->assertFileDoesNotExist(string $filename);: void","kind":"function","annotation":"assertFileDoesNotExist(string $filename);: void","details":"assertFileDoesNotExist(string $filename);: void"},
        {"trigger":"assertFileEquals","contents":"\\$this->assertFileEquals(string $expected, string $actual);: void","kind":"function","annotation":"assertFileEquals(string $expected, string $actual);: void","details":"assertFileEquals(string $expected, string $actual);: void"},
        {"trigger":"assertFileEqualsCanonicalizing","contents":"\\$this->assertFileEqualsCanonicalizing(string $expected, string $actual);: void","kind":"function","annotation":"assertFileEqualsCanonicalizing(string $expected, string $actual);: void","details":"assertFileEqualsCanonicalizing(string $expected, string $actual);: void"},
        {"trigger":"assertFileEqualsIgnoringCase","contents":"\\$this->assertFileEqualsIgnoringCase(string $expected, string $actual);: void","kind":"function","annotation":"assertFileEqualsIgnoringCase(string $expected, string $actual);: void","details":"assertFileEqualsIgnoringCase(string $expected, string $actual);: void"},
        {"trigger":"assertFileExists","contents":"\\$this->assertFileExists(string $filename);: void","kind":"function","annotation":"assertFileExists(string $filename);: void","details":"assertFileExists(string $filename);: void"},
        {"trigger":"assertFileIsNotReadable","contents":"\\$this->assertFileIsNotReadable(string $file);: void","kind":"function","annotation":"assertFileIsNotReadable(string $file);: void","details":"assertFileIsNotReadable(string $file);: void"},
        {"trigger":"assertFileIsNotWritable","contents":"\\$this->assertFileIsNotWritable(string $file);: void","kind":"function","annotation":"assertFileIsNotWritable(string $file);: void","details":"assertFileIsNotWritable(string $file);: void"},
        {"trigger":"assertFileIsReadable","contents":"\\$this->assertFileIsReadable(string $file);: void","kind":"function","annotation":"assertFileIsReadable(string $file);: void","details":"assertFileIsReadable(string $file);: void"},
        {"trigger":"assertFileIsWritable","contents":"\\$this->assertFileIsWritable(string $file);: void","kind":"function","annotation":"assertFileIsWritable(string $file);: void","details":"assertFileIsWritable(string $file);: void"},
        {"trigger":"assertFileNotEquals","contents":"\\$this->assertFileNotEquals(string $expected, string $actual);: void","kind":"function","annotation":"assertFileNotEquals(string $expected, string $actual);: void","details":"assertFileNotEquals(string $expected, string $actual);: void"},
        {"trigger":"assertFileNotEqualsCanonicalizing","contents":"\\$this->assertFileNotEqualsCanonicalizing(string $expected, string $actual);: void","kind":"function","annotation":"assertFileNotEqualsCanonicalizing(string $expected, string $actual);: void","details":"assertFileNotEqualsCanonicalizing(string $expected, string $actual);: void"},
        {"trigger":"assertFileNotEqualsIgnoringCase","contents":"\\$this->assertFileNotEqualsIgnoringCase(string $expected, string $actual);: void","kind":"function","annotation":"assertFileNotEqualsIgnoringCase(string $expected, string $actual);: void","details":"assertFileNotEqualsIgnoringCase(string $expected, string $actual);: void"},
        {"trigger":"assertFileNotExists","contents":"\\$this->assertFileNotExists(string $filename);: void","kind":"function","annotation":"assertFileNotExists(string $filename);: void","details":"assertFileNotExists(string $filename);: void"},
        {"trigger":"assertFileNotIsReadable","contents":"\\$this->assertFileNotIsReadable(string $file);: void","kind":"function","annotation":"assertFileNotIsReadable(string $file);: void","details":"assertFileNotIsReadable(string $file);: void"},
        {"trigger":"assertFileNotIsWritable","contents":"\\$this->assertFileNotIsWritable(string $file);: void","kind":"function","annotation":"assertFileNotIsWritable(string $file);: void","details":"assertFileNotIsWritable(string $file);: void"},
        {"trigger":"assertFinite","contents":"\\$this->assertFinite($actual);: void","kind":"function","annotation":"assertFinite($actual);: void","details":"assertFinite($actual);: void"},
        {"trigger":"assertGreaterThan","contents":"\\$this->assertGreaterThan($expected, $actual);: void","kind":"function","annotation":"assertGreaterThan($expected, $actual);: void","details":"assertGreaterThan($expected, $actual);: void"},
        {"trigger":"assertGreaterThanOrEqual","contents":"\\$this->assertGreaterThanOrEqual($expected, $actual);: void","kind":"function","annotation":"assertGreaterThanOrEqual($expected, $actual);: void","details":"assertGreaterThanOrEqual($expected, $actual);: void"},
        {"trigger":"assertInfinite","contents":"\\$this->assertInfinite($actual);: void","kind":"function","annotation":"assertInfinite($actual);: void","details":"assertInfinite($actual);: void"},
        {"trigger":"assertInstanceOf","contents":"\\$this->assertInstanceOf(string $expected, $actual);: void","kind":"function","annotation":"assertInstanceOf(string $expected, $actual);: void","details":"assertInstanceOf(string $expected, $actual);: void"},
        {"trigger":"assertIsArray","contents":"\\$this->assertIsArray($actual);: void","kind":"function","annotation":"assertIsArray($actual);: void","details":"assertIsArray($actual);: void"},
        {"trigger":"assertIsBool","contents":"\\$this->assertIsBool($actual);: void","kind":"function","annotation":"assertIsBool($actual);: void","details":"assertIsBool($actual);: void"},
        {"trigger":"assertIsCallable","contents":"\\$this->assertIsCallable($actual);: void","kind":"function","annotation":"assertIsCallable($actual);: void","details":"assertIsCallable($actual);: void"},
        {"trigger":"assertIsClosedResource","contents":"\\$this->assertIsClosedResource($actual);: void","kind":"function","annotation":"assertIsClosedResource($actual);: void","details":"assertIsClosedResource($actual);: void"},
        {"trigger":"assertIsFloat","contents":"\\$this->assertIsFloat($actual);: void","kind":"function","annotation":"assertIsFloat($actual);: void","details":"assertIsFloat($actual);: void"},
        {"trigger":"assertIsInt","contents":"\\$this->assertIsInt($actual);: void","kind":"function","annotation":"assertIsInt($actual);: void","details":"assertIsInt($actual);: void"},
        {"trigger":"assertIsIterable","contents":"\\$this->assertIsIterable($actual);: void","kind":"function","annotation":"assertIsIterable($actual);: void","details":"assertIsIterable($actual);: void"},
        {"trigger":"assertIsNotArray","contents":"\\$this->assertIsNotArray($actual);: void","kind":"function","annotation":"assertIsNotArray($actual);: void","details":"assertIsNotArray($actual);: void"},
        {"trigger":"assertIsNotBool","contents":"\\$this->assertIsNotBool($actual);: void","kind":"function","annotation":"assertIsNotBool($actual);: void","details":"assertIsNotBool($actual);: void"},
        {"trigger":"assertIsNotCallable","contents":"\\$this->assertIsNotCallable($actual);: void","kind":"function","annotation":"assertIsNotCallable($actual);: void","details":"assertIsNotCallable($actual);: void"},
        {"trigger":"assertIsNotClosedResource","contents":"\\$this->assertIsNotClosedResource($actual);: void","kind":"function","annotation":"assertIsNotClosedResource($actual);: void","details":"assertIsNotClosedResource($actual);: void"},
        {"trigger":"assertIsNotFloat","contents":"\\$this->assertIsNotFloat($actual);: void","kind":"function","annotation":"assertIsNotFloat($actual);: void","details":"assertIsNotFloat($actual);: void"},
        {"trigger":"assertIsNotInt","contents":"\\$this->assertIsNotInt($actual);: void","kind":"function","annotation":"assertIsNotInt($actual);: void","details":"assertIsNotInt($actual);: void"},
        {"trigger":"assertIsNotIterable","contents":"\\$this->assertIsNotIterable($actual);: void","kind":"function","annotation":"assertIsNotIterable($actual);: void","details":"assertIsNotIterable($actual);: void"},
        {"trigger":"assertIsNotNumeric","contents":"\\$this->assertIsNotNumeric($actual);: void","kind":"function","annotation":"assertIsNotNumeric($actual);: void","details":"assertIsNotNumeric($actual);: void"},
        {"trigger":"assertIsNotObject","contents":"\\$this->assertIsNotObject($actual);: void","kind":"function","annotation":"assertIsNotObject($actual);: void","details":"assertIsNotObject($actual);: void"},
        {"trigger":"assertIsNotReadable","contents":"\\$this->assertIsNotReadable(string $filename);: void","kind":"function","annotation":"assertIsNotReadable(string $filename);: void","details":"assertIsNotReadable(string $filename);: void"},
        {"trigger":"assertIsNotResource","contents":"\\$this->assertIsNotResource($actual);: void","kind":"function","annotation":"assertIsNotResource($actual);: void","details":"assertIsNotResource($actual);: void"},
        {"trigger":"assertIsNotScalar","contents":"\\$this->assertIsNotScalar($actual);: void","kind":"function","annotation":"assertIsNotScalar($actual);: void","details":"assertIsNotScalar($actual);: void"},
        {"trigger":"assertIsNotString","contents":"\\$this->assertIsNotString($actual);: void","kind":"function","annotation":"assertIsNotString($actual);: void","details":"assertIsNotString($actual);: void"},
        {"trigger":"assertIsNotWritable","contents":"\\$this->assertIsNotWritable(string $filename);: void","kind":"function","annotation":"assertIsNotWritable(string $filename);: void","details":"assertIsNotWritable(string $filename);: void"},
        {"trigger":"assertIsNumeric","contents":"\\$this->assertIsNumeric($actual);: void","kind":"function","annotation":"assertIsNumeric($actual);: void","details":"assertIsNumeric($actual);: void"},
        {"trigger":"assertIsObject","contents":"\\$this->assertIsObject($actual);: void","kind":"function","annotation":"assertIsObject($actual);: void","details":"assertIsObject($actual);: void"},
        {"trigger":"assertIsReadable","contents":"\\$this->assertIsReadable(string $filename);: void","kind":"function","annotation":"assertIsReadable(string $filename);: void","details":"assertIsReadable(string $filename);: void"},
        {"trigger":"assertIsResource","contents":"\\$this->assertIsResource($actual);: void","kind":"function","annotation":"assertIsResource($actual);: void","details":"assertIsResource($actual);: void"},
        {"trigger":"assertIsScalar","contents":"\\$this->assertIsScalar($actual);: void","kind":"function","annotation":"assertIsScalar($actual);: void","details":"assertIsScalar($actual);: void"},
        {"trigger":"assertIsString","contents":"\\$this->assertIsString($actual);: void","kind":"function","annotation":"assertIsString($actual);: void","details":"assertIsString($actual);: void"},
        {"trigger":"assertIsWritable","contents":"\\$this->assertIsWritable(string $filename);: void","kind":"function","annotation":"assertIsWritable(string $filename);: void","details":"assertIsWritable(string $filename);: void"},
        {"trigger":"assertJson","contents":"\\$this->assertJson(string $actualJson);: void","kind":"function","annotation":"assertJson(string $actualJson);: void","details":"assertJson(string $actualJson);: void"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"\\$this->assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile);: void","kind":"function","annotation":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile);: void","details":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"\\$this->assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile);: void","kind":"function","annotation":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile);: void","details":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"\\$this->assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson);: void","kind":"function","annotation":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson);: void","details":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson);: void"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"\\$this->assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson);: void","kind":"function","annotation":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson);: void","details":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson);: void"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"\\$this->assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson);: void","kind":"function","annotation":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson);: void","details":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson);: void"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"\\$this->assertJsonStringNotEqualsJsonString($expectedJson, $actualJson);: void","kind":"function","annotation":"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson);: void","details":"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson);: void"},
        {"trigger":"assertLessThan","contents":"\\$this->assertLessThan($expected, $actual);: void","kind":"function","annotation":"assertLessThan($expected, $actual);: void","details":"assertLessThan($expected, $actual);: void"},
        {"trigger":"assertLessThanOrEqual","contents":"\\$this->assertLessThanOrEqual($expected, $actual);: void","kind":"function","annotation":"assertLessThanOrEqual($expected, $actual);: void","details":"assertLessThanOrEqual($expected, $actual);: void"},
        {"trigger":"assertMatchesRegularExpression","contents":"\\$this->assertMatchesRegularExpression(string $pattern, string $string);: void","kind":"function","annotation":"assertMatchesRegularExpression(string $pattern, string $string);: void","details":"assertMatchesRegularExpression(string $pattern, string $string);: void"},
        {"trigger":"assertNan","contents":"\\$this->assertNan($actual);: void","kind":"function","annotation":"assertNan($actual);: void","details":"assertNan($actual);: void"},
        {"trigger":"assertNotContains","contents":"\\$this->assertNotContains($needle, iterable $haystack);: void","kind":"function","annotation":"assertNotContains($needle, iterable $haystack);: void","details":"assertNotContains($needle, iterable $haystack);: void"},
        {"trigger":"assertNotContainsEquals","contents":"\\$this->assertNotContainsEquals($needle, iterable $haystack);: void","kind":"function","annotation":"assertNotContainsEquals($needle, iterable $haystack);: void","details":"assertNotContainsEquals($needle, iterable $haystack);: void"},
        {"trigger":"assertNotContainsOnly","contents":"\\$this->assertNotContainsOnly(string $type, iterable $haystack);: void","kind":"function","annotation":"assertNotContainsOnly(string $type, iterable $haystack);: void","details":"assertNotContainsOnly(string $type, iterable $haystack);: void"},
        {"trigger":"assertNotCount","contents":"\\$this->assertNotCount(int $expectedCount, $haystack);: void","kind":"function","annotation":"assertNotCount(int $expectedCount, $haystack);: void","details":"assertNotCount(int $expectedCount, $haystack);: void"},
        {"trigger":"assertNotEmpty","contents":"\\$this->assertNotEmpty($actual);: void","kind":"function","annotation":"assertNotEmpty($actual);: void","details":"assertNotEmpty($actual);: void"},
        {"trigger":"assertNotEquals","contents":"\\$this->assertNotEquals($expected, $actual);: void","kind":"function","annotation":"assertNotEquals($expected, $actual);: void","details":"assertNotEquals($expected, $actual);: void"},
        {"trigger":"assertNotEqualsCanonicalizing","contents":"\\$this->assertNotEqualsCanonicalizing($expected, $actual);: void","kind":"function","annotation":"assertNotEqualsCanonicalizing($expected, $actual);: void","details":"assertNotEqualsCanonicalizing($expected, $actual);: void"},
        {"trigger":"assertNotEqualsIgnoringCase","contents":"\\$this->assertNotEqualsIgnoringCase($expected, $actual);: void","kind":"function","annotation":"assertNotEqualsIgnoringCase($expected, $actual);: void","details":"assertNotEqualsIgnoringCase($expected, $actual);: void"},
        {"trigger":"assertNotEqualsWithDelta","contents":"\\$this->assertNotEqualsWithDelta($expected, $actual, float $delta);: void","kind":"function","annotation":"assertNotEqualsWithDelta($expected, $actual, float $delta);: void","details":"assertNotEqualsWithDelta($expected, $actual, float $delta);: void"},
        {"trigger":"assertNotFalse","contents":"\\$this->assertNotFalse($condition);: void","kind":"function","annotation":"assertNotFalse($condition);: void","details":"assertNotFalse($condition);: void"},
        {"trigger":"assertNotInstanceOf","contents":"\\$this->assertNotInstanceOf(string $expected, $actual);: void","kind":"function","annotation":"assertNotInstanceOf(string $expected, $actual);: void","details":"assertNotInstanceOf(string $expected, $actual);: void"},
        {"trigger":"assertNotIsReadable","contents":"\\$this->assertNotIsReadable(string $filename);: void","kind":"function","annotation":"assertNotIsReadable(string $filename);: void","details":"assertNotIsReadable(string $filename);: void"},
        {"trigger":"assertNotIsWritable","contents":"\\$this->assertNotIsWritable(string $filename);: void","kind":"function","annotation":"assertNotIsWritable(string $filename);: void","details":"assertNotIsWritable(string $filename);: void"},
        {"trigger":"assertNotNull","contents":"\\$this->assertNotNull($actual);: void","kind":"function","annotation":"assertNotNull($actual);: void","details":"assertNotNull($actual);: void"},
        {"trigger":"assertNotRegExp","contents":"\\$this->assertNotRegExp(string $pattern, string $string);: void","kind":"function","annotation":"assertNotRegExp(string $pattern, string $string);: void","details":"assertNotRegExp(string $pattern, string $string);: void"},
        {"trigger":"assertNotSame","contents":"\\$this->assertNotSame($expected, $actual);: void","kind":"function","annotation":"assertNotSame($expected, $actual);: void","details":"assertNotSame($expected, $actual);: void"},
        {"trigger":"assertNotSameSize","contents":"\\$this->assertNotSameSize($expected, $actual);: void","kind":"function","annotation":"assertNotSameSize($expected, $actual);: void","details":"assertNotSameSize($expected, $actual);: void"},
        {"trigger":"assertNotTrue","contents":"\\$this->assertNotTrue($condition);: void","kind":"function","annotation":"assertNotTrue($condition);: void","details":"assertNotTrue($condition);: void"},
        {"trigger":"assertNull","contents":"\\$this->assertNull($actual);: void","kind":"function","annotation":"assertNull($actual);: void","details":"assertNull($actual);: void"},
        {"trigger":"assertObjectEquals","contents":"\\$this->assertObjectEquals(object $expected, object $actual);: void","kind":"function","annotation":"assertObjectEquals(object $expected, object $actual);: void","details":"assertObjectEquals(object $expected, object $actual);: void"},
        {"trigger":"assertObjectHasAttribute","contents":"\\$this->assertObjectHasAttribute(string $attributeName, $object);: void","kind":"function","annotation":"assertObjectHasAttribute(string $attributeName, $object);: void","details":"assertObjectHasAttribute(string $attributeName, $object);: void"},
        {"trigger":"assertObjectNotHasAttribute","contents":"\\$this->assertObjectNotHasAttribute(string $attributeName, $object);: void","kind":"function","annotation":"assertObjectNotHasAttribute(string $attributeName, $object);: void","details":"assertObjectNotHasAttribute(string $attributeName, $object);: void"},
        {"trigger":"assertRegExp","contents":"\\$this->assertRegExp(string $pattern, string $string);: void","kind":"function","annotation":"assertRegExp(string $pattern, string $string);: void","details":"assertRegExp(string $pattern, string $string);: void"},
        {"trigger":"assertSame","contents":"\\$this->assertSame($expected, $actual);: void","kind":"function","annotation":"assertSame($expected, $actual);: void","details":"assertSame($expected, $actual);: void"},
        {"trigger":"assertSameSize","contents":"\\$this->assertSameSize($expected, $actual);: void","kind":"function","annotation":"assertSameSize($expected, $actual);: void","details":"assertSameSize($expected, $actual);: void"},
        {"trigger":"assertStringContainsString","contents":"\\$this->assertStringContainsString(string $needle, string $haystack);: void","kind":"function","annotation":"assertStringContainsString(string $needle, string $haystack);: void","details":"assertStringContainsString(string $needle, string $haystack);: void"},
        {"trigger":"assertStringContainsStringIgnoringCase","contents":"\\$this->assertStringContainsStringIgnoringCase(string $needle, string $haystack);: void","kind":"function","annotation":"assertStringContainsStringIgnoringCase(string $needle, string $haystack);: void","details":"assertStringContainsStringIgnoringCase(string $needle, string $haystack);: void"},
        {"trigger":"assertStringEndsNotWith","contents":"\\$this->assertStringEndsNotWith(string $suffix, string $string);: void","kind":"function","annotation":"assertStringEndsNotWith(string $suffix, string $string);: void","details":"assertStringEndsNotWith(string $suffix, string $string);: void"},
        {"trigger":"assertStringEndsWith","contents":"\\$this->assertStringEndsWith(string $suffix, string $string);: void","kind":"function","annotation":"assertStringEndsWith(string $suffix, string $string);: void","details":"assertStringEndsWith(string $suffix, string $string);: void"},
        {"trigger":"assertStringEqualsFile","contents":"\\$this->assertStringEqualsFile(string $expectedFile, string $actualString);: void","kind":"function","annotation":"assertStringEqualsFile(string $expectedFile, string $actualString);: void","details":"assertStringEqualsFile(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringEqualsFileCanonicalizing","contents":"\\$this->assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void","kind":"function","annotation":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void","details":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringEqualsFileIgnoringCase","contents":"\\$this->assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void","kind":"function","annotation":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void","details":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringMatchesFormat","contents":"\\$this->assertStringMatchesFormat(string $format, string $string);: void","kind":"function","annotation":"assertStringMatchesFormat(string $format, string $string);: void","details":"assertStringMatchesFormat(string $format, string $string);: void"},
        {"trigger":"assertStringMatchesFormatFile","contents":"\\$this->assertStringMatchesFormatFile(string $formatFile, string $string);: void","kind":"function","annotation":"assertStringMatchesFormatFile(string $formatFile, string $string);: void","details":"assertStringMatchesFormatFile(string $formatFile, string $string);: void"},
        {"trigger":"assertStringNotContainsString","contents":"\\$this->assertStringNotContainsString(string $needle, string $haystack);: void","kind":"function","annotation":"assertStringNotContainsString(string $needle, string $haystack);: void","details":"assertStringNotContainsString(string $needle, string $haystack);: void"},
        {"trigger":"assertStringNotContainsStringIgnoringCase","contents":"\\$this->assertStringNotContainsStringIgnoringCase(string $needle, string $haystack);: void","kind":"function","annotation":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack);: void","details":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack);: void"},
        {"trigger":"assertStringNotEqualsFile","contents":"\\$this->assertStringNotEqualsFile(string $expectedFile, string $actualString);: void","kind":"function","annotation":"assertStringNotEqualsFile(string $expectedFile, string $actualString);: void","details":"assertStringNotEqualsFile(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringNotEqualsFileCanonicalizing","contents":"\\$this->assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void","kind":"function","annotation":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void","details":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringNotEqualsFileIgnoringCase","contents":"\\$this->assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void","kind":"function","annotation":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void","details":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringNotMatchesFormat","contents":"\\$this->assertStringNotMatchesFormat(string $format, string $string);: void","kind":"function","annotation":"assertStringNotMatchesFormat(string $format, string $string);: void","details":"assertStringNotMatchesFormat(string $format, string $string);: void"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"\\$this->assertStringNotMatchesFormatFile(string $formatFile, string $string);: void","kind":"function","annotation":"assertStringNotMatchesFormatFile(string $formatFile, string $string);: void","details":"assertStringNotMatchesFormatFile(string $formatFile, string $string);: void"},
        {"trigger":"assertStringStartsNotWith","contents":"\\$this->assertStringStartsNotWith($prefix, $string);: void","kind":"function","annotation":"assertStringStartsNotWith($prefix, $string);: void","details":"assertStringStartsNotWith($prefix, $string);: void"},
        {"trigger":"assertStringStartsWith","contents":"\\$this->assertStringStartsWith(string $prefix, string $string);: void","kind":"function","annotation":"assertStringStartsWith(string $prefix, string $string);: void","details":"assertStringStartsWith(string $prefix, string $string);: void"},
        {"trigger":"assertThat","contents":"\\$this->assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint);: void","kind":"function","annotation":"assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint);: void","details":"assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint);: void"},
        {"trigger":"assertTrue","contents":"\\$this->assertTrue($condition);: void","kind":"function","annotation":"assertTrue($condition);: void","details":"assertTrue($condition);: void"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"\\$this->assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile);: void","kind":"function","annotation":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile);: void","details":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"\\$this->assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile);: void","kind":"function","annotation":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile);: void","details":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"\\$this->assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml);: void","kind":"function","annotation":"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml);: void","details":"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml);: void"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"\\$this->assertXmlStringEqualsXmlString($expectedXml, $actualXml);: void","kind":"function","annotation":"assertXmlStringEqualsXmlString($expectedXml, $actualXml);: void","details":"assertXmlStringEqualsXmlString($expectedXml, $actualXml);: void"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"\\$this->assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml);: void","kind":"function","annotation":"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml);: void","details":"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml);: void"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"\\$this->assertXmlStringNotEqualsXmlString($expectedXml, $actualXml);: void","kind":"function","annotation":"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml);: void","details":"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml);: void"},
        {"trigger":"at","contents":"\\$this->at(int $index);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex","kind":"function","annotation":"at(int $index);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex","details":"at(int $index);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex"},
        {"trigger":"atLeast","contents":"\\$this->atLeast(int $requiredInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount","kind":"function","annotation":"atLeast(int $requiredInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount","details":"atLeast(int $requiredInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount"},
        {"trigger":"atLeastOnce","contents":"\\$this->atLeastOnce();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce","kind":"function","annotation":"atLeastOnce();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce","details":"atLeastOnce();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce"},
        {"trigger":"atMost","contents":"\\$this->atMost(int $allowedInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount","kind":"function","annotation":"atMost(int $allowedInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount","details":"atMost(int $allowedInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount"},
        {"trigger":"callback","contents":"\\$this->callback(callable $callback);: PHPUnit\\Framework\\Constraint\\Callback","kind":"function","annotation":"callback(callable $callback);: PHPUnit\\Framework\\Constraint\\Callback","details":"callback(callable $callback);: PHPUnit\\Framework\\Constraint\\Callback"},
        {"trigger":"classHasAttribute","contents":"\\$this->classHasAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasAttribute","kind":"function","annotation":"classHasAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasAttribute","details":"classHasAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasAttribute"},
        {"trigger":"classHasStaticAttribute","contents":"\\$this->classHasStaticAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute","kind":"function","annotation":"classHasStaticAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute","details":"classHasStaticAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute"},
        {"trigger":"containsEqual","contents":"\\$this->containsEqual($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsEqual","kind":"function","annotation":"containsEqual($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsEqual","details":"containsEqual($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsEqual"},
        {"trigger":"containsIdentical","contents":"\\$this->containsIdentical($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical","kind":"function","annotation":"containsIdentical($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical","details":"containsIdentical($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical"},
        {"trigger":"containsOnly","contents":"\\$this->containsOnly(string $type);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","kind":"function","annotation":"containsOnly(string $type);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnly(string $type);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"containsOnlyInstancesOf","contents":"\\$this->containsOnlyInstancesOf(string $className);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","kind":"function","annotation":"containsOnlyInstancesOf(string $className);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnlyInstancesOf(string $className);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"countOf","contents":"\\$this->countOf(int $count);: PHPUnit\\Framework\\Constraint\\Count","kind":"function","annotation":"countOf(int $count);: PHPUnit\\Framework\\Constraint\\Count","details":"countOf(int $count);: PHPUnit\\Framework\\Constraint\\Count"},
        {"trigger":"createConfiguredMock","contents":"\\$this->createConfiguredMock(string $originalClassName, array $configuration);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"createConfiguredMock(string $originalClassName, array $configuration);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createConfiguredMock(string $originalClassName, array $configuration);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createMock","contents":"\\$this->createMock(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"createMock(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createMock(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createPartialMock","contents":"\\$this->createPartialMock(string $originalClassName, array $methods);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"createPartialMock(string $originalClassName, array $methods);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createPartialMock(string $originalClassName, array $methods);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createStub","contents":"\\$this->createStub(string $originalClassName);: PHPUnit\\Framework\\MockObject\\Stub","kind":"function","annotation":"createStub(string $originalClassName);: PHPUnit\\Framework\\MockObject\\Stub","details":"createStub(string $originalClassName);: PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createTestProxy","contents":"\\$this->createTestProxy(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"createTestProxy(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createTestProxy(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"directoryExists","contents":"\\$this->directoryExists();: PHPUnit\\Framework\\Constraint\\DirectoryExists","kind":"function","annotation":"directoryExists();: PHPUnit\\Framework\\Constraint\\DirectoryExists","details":"directoryExists();: PHPUnit\\Framework\\Constraint\\DirectoryExists"},
        {"trigger":"equalTo","contents":"\\$this->equalTo($value);: PHPUnit\\Framework\\Constraint\\IsEqual","kind":"function","annotation":"equalTo($value);: PHPUnit\\Framework\\Constraint\\IsEqual","details":"equalTo($value);: PHPUnit\\Framework\\Constraint\\IsEqual"},
        {"trigger":"equalToCanonicalizing","contents":"\\$this->equalToCanonicalizing($value);: PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing","kind":"function","annotation":"equalToCanonicalizing($value);: PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing","details":"equalToCanonicalizing($value);: PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing"},
        {"trigger":"equalToIgnoringCase","contents":"\\$this->equalToIgnoringCase($value);: PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase","kind":"function","annotation":"equalToIgnoringCase($value);: PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase","details":"equalToIgnoringCase($value);: PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase"},
        {"trigger":"equalToWithDelta","contents":"\\$this->equalToWithDelta($value, float $delta);: PHPUnit\\Framework\\Constraint\\IsEqualWithDelta","kind":"function","annotation":"equalToWithDelta($value, float $delta);: PHPUnit\\Framework\\Constraint\\IsEqualWithDelta","details":"equalToWithDelta($value, float $delta);: PHPUnit\\Framework\\Constraint\\IsEqualWithDelta"},
        {"trigger":"exactly","contents":"\\$this->exactly(int $count);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","kind":"function","annotation":"exactly(int $count);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"exactly(int $count);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"expectDeprecation","contents":"\\$this->expectDeprecation();: void","kind":"function","annotation":"expectDeprecation();: void","details":"expectDeprecation();: void"},
        {"trigger":"expectDeprecationMessage","contents":"\\$this->expectDeprecationMessage(string $message);: void","kind":"function","annotation":"expectDeprecationMessage(string $message);: void","details":"expectDeprecationMessage(string $message);: void"},
        {"trigger":"expectDeprecationMessageMatches","contents":"\\$this->expectDeprecationMessageMatches(string $regularExpression);: void","kind":"function","annotation":"expectDeprecationMessageMatches(string $regularExpression);: void","details":"expectDeprecationMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectError","contents":"\\$this->expectError();: void","kind":"function","annotation":"expectError();: void","details":"expectError();: void"},
        {"trigger":"expectErrorMessage","contents":"\\$this->expectErrorMessage(string $message);: void","kind":"function","annotation":"expectErrorMessage(string $message);: void","details":"expectErrorMessage(string $message);: void"},
        {"trigger":"expectErrorMessageMatches","contents":"\\$this->expectErrorMessageMatches(string $regularExpression);: void","kind":"function","annotation":"expectErrorMessageMatches(string $regularExpression);: void","details":"expectErrorMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectException","contents":"\\$this->expectException(string $exception);: void","kind":"function","annotation":"expectException(string $exception);: void","details":"expectException(string $exception);: void"},
        {"trigger":"expectExceptionCode","contents":"\\$this->expectExceptionCode($code);: void","kind":"function","annotation":"expectExceptionCode($code);: void","details":"expectExceptionCode($code);: void"},
        {"trigger":"expectExceptionMessage","contents":"\\$this->expectExceptionMessage(string $message);: void","kind":"function","annotation":"expectExceptionMessage(string $message);: void","details":"expectExceptionMessage(string $message);: void"},
        {"trigger":"expectExceptionMessageMatches","contents":"\\$this->expectExceptionMessageMatches(string $regularExpression);: void","kind":"function","annotation":"expectExceptionMessageMatches(string $regularExpression);: void","details":"expectExceptionMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectExceptionObject","contents":"\\$this->expectExceptionObject(Exception $exception);: void","kind":"function","annotation":"expectExceptionObject(Exception $exception);: void","details":"expectExceptionObject(Exception $exception);: void"},
        {"trigger":"expectNotToPerformAssertions","contents":"\\$this->expectNotToPerformAssertions();: void","kind":"function","annotation":"expectNotToPerformAssertions();: void","details":"expectNotToPerformAssertions();: void"},
        {"trigger":"expectNotice","contents":"\\$this->expectNotice();: void","kind":"function","annotation":"expectNotice();: void","details":"expectNotice();: void"},
        {"trigger":"expectNoticeMessage","contents":"\\$this->expectNoticeMessage(string $message);: void","kind":"function","annotation":"expectNoticeMessage(string $message);: void","details":"expectNoticeMessage(string $message);: void"},
        {"trigger":"expectNoticeMessageMatches","contents":"\\$this->expectNoticeMessageMatches(string $regularExpression);: void","kind":"function","annotation":"expectNoticeMessageMatches(string $regularExpression);: void","details":"expectNoticeMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectOutputRegex","contents":"\\$this->expectOutputRegex(string $expectedRegex);: void","kind":"function","annotation":"expectOutputRegex(string $expectedRegex);: void","details":"expectOutputRegex(string $expectedRegex);: void"},
        {"trigger":"expectOutputString","contents":"\\$this->expectOutputString(string $expectedString);: void","kind":"function","annotation":"expectOutputString(string $expectedString);: void","details":"expectOutputString(string $expectedString);: void"},
        {"trigger":"expectWarning","contents":"\\$this->expectWarning();: void","kind":"function","annotation":"expectWarning();: void","details":"expectWarning();: void"},
        {"trigger":"expectWarningMessage","contents":"\\$this->expectWarningMessage(string $message);: void","kind":"function","annotation":"expectWarningMessage(string $message);: void","details":"expectWarningMessage(string $message);: void"},
        {"trigger":"expectWarningMessageMatches","contents":"\\$this->expectWarningMessageMatches(string $regularExpression);: void","kind":"function","annotation":"expectWarningMessageMatches(string $regularExpression);: void","details":"expectWarningMessageMatches(string $regularExpression);: void"},
        {"trigger":"fail","contents":"\\$this->fail($1);: void","kind":"function","annotation":"fail($1);: void","details":"fail($1);: void"},
        {"trigger":"fileExists","contents":"\\$this->fileExists();: PHPUnit\\Framework\\Constraint\\FileExists","kind":"function","annotation":"fileExists();: PHPUnit\\Framework\\Constraint\\FileExists","details":"fileExists();: PHPUnit\\Framework\\Constraint\\FileExists"},
        {"trigger":"getExpectedException","contents":"\\$this->getExpectedException();: ?string","kind":"function","annotation":"getExpectedException();: ?string","details":"getExpectedException();: ?string"},
        {"trigger":"getExpectedExceptionCode","contents":"\\$this->getExpectedExceptionCode();","kind":"function","annotation":"getExpectedExceptionCode();","details":"getExpectedExceptionCode();"},
        {"trigger":"getExpectedExceptionMessage","contents":"\\$this->getExpectedExceptionMessage();: ?string","kind":"function","annotation":"getExpectedExceptionMessage();: ?string","details":"getExpectedExceptionMessage();: ?string"},
        {"trigger":"getExpectedExceptionMessageRegExp","contents":"\\$this->getExpectedExceptionMessageRegExp();: ?string","kind":"function","annotation":"getExpectedExceptionMessageRegExp();: ?string","details":"getExpectedExceptionMessageRegExp();: ?string"},
        {"trigger":"getMockBuilder","contents":"\\$this->getMockBuilder(string $className);: PHPUnit\\Framework\\MockObject\\MockBuilder","kind":"function","annotation":"getMockBuilder(string $className);: PHPUnit\\Framework\\MockObject\\MockBuilder","details":"getMockBuilder(string $className);: PHPUnit\\Framework\\MockObject\\MockBuilder"},
        {"trigger":"getMockClass","contents":"\\$this->getMockClass(string $originalClassName);: string","kind":"function","annotation":"getMockClass(string $originalClassName);: string","details":"getMockClass(string $originalClassName);: string"},
        {"trigger":"getMockForAbstractClass","contents":"\\$this->getMockForAbstractClass(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"getMockForAbstractClass(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForAbstractClass(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockForTrait","contents":"\\$this->getMockForTrait(string $traitName);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"getMockForTrait(string $traitName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForTrait(string $traitName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockFromWsdl","contents":"\\$this->getMockFromWsdl(string $wsdlFile);: PHPUnit\\Framework\\MockObject\\MockObject","kind":"function","annotation":"getMockFromWsdl(string $wsdlFile);: PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockFromWsdl(string $wsdlFile);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"greaterThan","contents":"\\$this->greaterThan($value);: PHPUnit\\Framework\\Constraint\\GreaterThan","kind":"function","annotation":"greaterThan($value);: PHPUnit\\Framework\\Constraint\\GreaterThan","details":"greaterThan($value);: PHPUnit\\Framework\\Constraint\\GreaterThan"},
        {"trigger":"greaterThanOrEqual","contents":"\\$this->greaterThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr","kind":"function","annotation":"greaterThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr","details":"greaterThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"identicalTo","contents":"\\$this->identicalTo($value);: PHPUnit\\Framework\\Constraint\\IsIdentical","kind":"function","annotation":"identicalTo($value);: PHPUnit\\Framework\\Constraint\\IsIdentical","details":"identicalTo($value);: PHPUnit\\Framework\\Constraint\\IsIdentical"},
        {"trigger":"isEmpty","contents":"\\$this->isEmpty();: PHPUnit\\Framework\\Constraint\\IsEmpty","kind":"function","annotation":"isEmpty();: PHPUnit\\Framework\\Constraint\\IsEmpty","details":"isEmpty();: PHPUnit\\Framework\\Constraint\\IsEmpty"},
        {"trigger":"isFalse","contents":"\\$this->isFalse();: PHPUnit\\Framework\\Constraint\\IsFalse","kind":"function","annotation":"isFalse();: PHPUnit\\Framework\\Constraint\\IsFalse","details":"isFalse();: PHPUnit\\Framework\\Constraint\\IsFalse"},
        {"trigger":"isFinite","contents":"\\$this->isFinite();: PHPUnit\\Framework\\Constraint\\IsFinite","kind":"function","annotation":"isFinite();: PHPUnit\\Framework\\Constraint\\IsFinite","details":"isFinite();: PHPUnit\\Framework\\Constraint\\IsFinite"},
        {"trigger":"isInIsolation","contents":"\\$this->isInIsolation();: bool","kind":"function","annotation":"isInIsolation();: bool","details":"isInIsolation();: bool"},
        {"trigger":"isInfinite","contents":"\\$this->isInfinite();: PHPUnit\\Framework\\Constraint\\IsInfinite","kind":"function","annotation":"isInfinite();: PHPUnit\\Framework\\Constraint\\IsInfinite","details":"isInfinite();: PHPUnit\\Framework\\Constraint\\IsInfinite"},
        {"trigger":"isInstanceOf","contents":"\\$this->isInstanceOf(string $className);: PHPUnit\\Framework\\Constraint\\IsInstanceOf","kind":"function","annotation":"isInstanceOf(string $className);: PHPUnit\\Framework\\Constraint\\IsInstanceOf","details":"isInstanceOf(string $className);: PHPUnit\\Framework\\Constraint\\IsInstanceOf"},
        {"trigger":"isJson","contents":"\\$this->isJson();: PHPUnit\\Framework\\Constraint\\IsJson","kind":"function","annotation":"isJson();: PHPUnit\\Framework\\Constraint\\IsJson","details":"isJson();: PHPUnit\\Framework\\Constraint\\IsJson"},
        {"trigger":"isLarge","contents":"\\$this->isLarge();: bool","kind":"function","annotation":"isLarge();: bool","details":"isLarge();: bool"},
        {"trigger":"isMedium","contents":"\\$this->isMedium();: bool","kind":"function","annotation":"isMedium();: bool","details":"isMedium();: bool"},
        {"trigger":"isNan","contents":"\\$this->isNan();: PHPUnit\\Framework\\Constraint\\IsNan","kind":"function","annotation":"isNan();: PHPUnit\\Framework\\Constraint\\IsNan","details":"isNan();: PHPUnit\\Framework\\Constraint\\IsNan"},
        {"trigger":"isNull","contents":"\\$this->isNull();: PHPUnit\\Framework\\Constraint\\IsNull","kind":"function","annotation":"isNull();: PHPUnit\\Framework\\Constraint\\IsNull","details":"isNull();: PHPUnit\\Framework\\Constraint\\IsNull"},
        {"trigger":"isReadable","contents":"\\$this->isReadable();: PHPUnit\\Framework\\Constraint\\IsReadable","kind":"function","annotation":"isReadable();: PHPUnit\\Framework\\Constraint\\IsReadable","details":"isReadable();: PHPUnit\\Framework\\Constraint\\IsReadable"},
        {"trigger":"isSmall","contents":"\\$this->isSmall();: bool","kind":"function","annotation":"isSmall();: bool","details":"isSmall();: bool"},
        {"trigger":"isTrue","contents":"\\$this->isTrue();: PHPUnit\\Framework\\Constraint\\IsTrue","kind":"function","annotation":"isTrue();: PHPUnit\\Framework\\Constraint\\IsTrue","details":"isTrue();: PHPUnit\\Framework\\Constraint\\IsTrue"},
        {"trigger":"isType","contents":"\\$this->isType(string $type);: PHPUnit\\Framework\\Constraint\\IsType","kind":"function","annotation":"isType(string $type);: PHPUnit\\Framework\\Constraint\\IsType","details":"isType(string $type);: PHPUnit\\Framework\\Constraint\\IsType"},
        {"trigger":"isWritable","contents":"\\$this->isWritable();: PHPUnit\\Framework\\Constraint\\IsWritable","kind":"function","annotation":"isWritable();: PHPUnit\\Framework\\Constraint\\IsWritable","details":"isWritable();: PHPUnit\\Framework\\Constraint\\IsWritable"},
        {"trigger":"lessThan","contents":"\\$this->lessThan($value);: PHPUnit\\Framework\\Constraint\\LessThan","kind":"function","annotation":"lessThan($value);: PHPUnit\\Framework\\Constraint\\LessThan","details":"lessThan($value);: PHPUnit\\Framework\\Constraint\\LessThan"},
        {"trigger":"lessThanOrEqual","contents":"\\$this->lessThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr","kind":"function","annotation":"lessThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr","details":"lessThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalAnd","contents":"\\$this->logicalAnd();: PHPUnit\\Framework\\Constraint\\LogicalAnd","kind":"function","annotation":"logicalAnd();: PHPUnit\\Framework\\Constraint\\LogicalAnd","details":"logicalAnd();: PHPUnit\\Framework\\Constraint\\LogicalAnd"},
        {"trigger":"logicalNot","contents":"\\$this->logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint);: PHPUnit\\Framework\\Constraint\\LogicalNot","kind":"function","annotation":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint);: PHPUnit\\Framework\\Constraint\\LogicalNot","details":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint);: PHPUnit\\Framework\\Constraint\\LogicalNot"},
        {"trigger":"logicalOr","contents":"\\$this->logicalOr();: PHPUnit\\Framework\\Constraint\\LogicalOr","kind":"function","annotation":"logicalOr();: PHPUnit\\Framework\\Constraint\\LogicalOr","details":"logicalOr();: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalXor","contents":"\\$this->logicalXor();: PHPUnit\\Framework\\Constraint\\LogicalXor","kind":"function","annotation":"logicalXor();: PHPUnit\\Framework\\Constraint\\LogicalXor","details":"logicalXor();: PHPUnit\\Framework\\Constraint\\LogicalXor"},
        {"trigger":"markAsRisky","contents":"\\$this->markAsRisky();: void","kind":"function","annotation":"markAsRisky();: void","details":"markAsRisky();: void"},
        {"trigger":"markTestIncomplete","contents":"\\$this->markTestIncomplete($1);: void","kind":"function","annotation":"markTestIncomplete($1);: void","details":"markTestIncomplete($1);: void"},
        {"trigger":"markTestSkipped","contents":"\\$this->markTestSkipped($1);: void","kind":"function","annotation":"markTestSkipped($1);: void","details":"markTestSkipped($1);: void"},
        {"trigger":"matches","contents":"\\$this->matches(string $string);: PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription","kind":"function","annotation":"matches(string $string);: PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription","details":"matches(string $string);: PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription"},
        {"trigger":"matchesRegularExpression","contents":"\\$this->matchesRegularExpression(string $pattern);: PHPUnit\\Framework\\Constraint\\RegularExpression","kind":"function","annotation":"matchesRegularExpression(string $pattern);: PHPUnit\\Framework\\Constraint\\RegularExpression","details":"matchesRegularExpression(string $pattern);: PHPUnit\\Framework\\Constraint\\RegularExpression"},
        {"trigger":"never","contents":"\\$this->never();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","kind":"function","annotation":"never();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"never();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"objectHasAttribute","contents":"\\$this->objectHasAttribute($attributeName);: PHPUnit\\Framework\\Constraint\\ObjectHasAttribute","kind":"function","annotation":"objectHasAttribute($attributeName);: PHPUnit\\Framework\\Constraint\\ObjectHasAttribute","details":"objectHasAttribute($attributeName);: PHPUnit\\Framework\\Constraint\\ObjectHasAttribute"},
        {"trigger":"onConsecutiveCalls","contents":"\\$this->onConsecutiveCalls($1);: PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls","kind":"function","annotation":"onConsecutiveCalls($1);: PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls","details":"onConsecutiveCalls($1);: PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls"},
        {"trigger":"once","contents":"\\$this->once();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","kind":"function","annotation":"once();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"once();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"recordDoubledType","contents":"\\$this->recordDoubledType(string $originalClassName);: void","kind":"function","annotation":"recordDoubledType(string $originalClassName);: void","details":"recordDoubledType(string $originalClassName);: void"},
        {"trigger":"returnArgument","contents":"\\$this->returnArgument(int $argumentIndex);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument","kind":"function","annotation":"returnArgument(int $argumentIndex);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument","details":"returnArgument(int $argumentIndex);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument"},
        {"trigger":"returnCallback","contents":"\\$this->returnCallback($callback);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback","kind":"function","annotation":"returnCallback($callback);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback","details":"returnCallback($callback);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback"},
        {"trigger":"returnSelf","contents":"\\$this->returnSelf();: PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf","kind":"function","annotation":"returnSelf();: PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf","details":"returnSelf();: PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf"},
        {"trigger":"returnValue","contents":"\\$this->returnValue($value);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub","kind":"function","annotation":"returnValue($value);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub","details":"returnValue($value);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub"},
        {"trigger":"returnValueMap","contents":"\\$this->returnValueMap(array $valueMap);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap","kind":"function","annotation":"returnValueMap(array $valueMap);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap","details":"returnValueMap(array $valueMap);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap"},
        {"trigger":"setOutputCallback","contents":"\\$this->setOutputCallback(callable $callback);: void","kind":"function","annotation":"setOutputCallback(callable $callback);: void","details":"setOutputCallback(callable $callback);: void"},
        {"trigger":"stringContains","contents":"\\$this->stringContains(string $string);: PHPUnit\\Framework\\Constraint\\StringContains","kind":"function","annotation":"stringContains(string $string);: PHPUnit\\Framework\\Constraint\\StringContains","details":"stringContains(string $string);: PHPUnit\\Framework\\Constraint\\StringContains"},
        {"trigger":"stringEndsWith","contents":"\\$this->stringEndsWith(string $suffix);: PHPUnit\\Framework\\Constraint\\StringEndsWith","kind":"function","annotation":"stringEndsWith(string $suffix);: PHPUnit\\Framework\\Constraint\\StringEndsWith","details":"stringEndsWith(string $suffix);: PHPUnit\\Framework\\Constraint\\StringEndsWith"},
        {"trigger":"stringStartsWith","contents":"\\$this->stringStartsWith($prefix);: PHPUnit\\Framework\\Constraint\\StringStartsWith","kind":"function","annotation":"stringStartsWith($prefix);: PHPUnit\\Framework\\Constraint\\StringStartsWith","details":"stringStartsWith($prefix);: PHPUnit\\Framework\\Constraint\\StringStartsWith"},
        {"trigger":"throwException","contents":"\\$this->throwException(Throwable $exception);: PHPUnit\\Framework\\MockObject\\Stub\\Exception","kind":"function","annotation":"throwException(Throwable $exception);: PHPUnit\\Framework\\MockObject\\Stub\\Exception","details":"throwException(Throwable $exception);: PHPUnit\\Framework\\MockObject\\Stub\\Exception"}
    ]
}
