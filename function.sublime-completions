{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type
    // source.php meta.class.php meta.block.php meta.function.php meta.block.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type, source.php meta.class.php meta.block.php meta.function.php meta.block.php - comment - constant.other.class - entity - meta.catch - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type",
    "completions": [
        {"trigger":"any","contents":"\\$this->any();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount"},
        {"trigger":"anything","contents":"\\$this->anything();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsAnything"},
        {"trigger":"arrayHasKey","contents":"\\$this->arrayHasKey(${1:key});","kind":"function","annotation":"PHPUnit","details":"$key: PHPUnit\\Framework\\Constraint\\ArrayHasKey"},
        {"trigger":"assertArrayHasKey","contents":"\\$this->assertArrayHasKey(${1:key}, ${2:array});","kind":"function","annotation":"PHPUnit","details":"$key,  $array: void"},
        {"trigger":"assertArrayNotHasKey","contents":"\\$this->assertArrayNotHasKey(${1:key}, ${2:array});","kind":"function","annotation":"PHPUnit","details":"$key,  $array: void"},
        {"trigger":"assertClassHasAttribute","contents":"\\$this->assertClassHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"PHPUnit","details":"string $attributeName, string $className: void"},
        {"trigger":"assertClassHasStaticAttribute","contents":"\\$this->assertClassHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"PHPUnit","details":"string $attributeName, string $className: void"},
        {"trigger":"assertClassNotHasAttribute","contents":"\\$this->assertClassNotHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"PHPUnit","details":"string $attributeName, string $className: void"},
        {"trigger":"assertClassNotHasStaticAttribute","contents":"\\$this->assertClassNotHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":"function","annotation":"PHPUnit","details":"string $attributeName, string $className: void"},
        {"trigger":"assertContains","contents":"\\$this->assertContains(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"$needle, iterable $haystack: void"},
        {"trigger":"assertContainsEquals","contents":"\\$this->assertContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"$needle, iterable $haystack: void"},
        {"trigger":"assertContainsOnly","contents":"\\$this->assertContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"string $type, iterable $haystack: void"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"\\$this->assertContainsOnlyInstancesOf(${1:string:className}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"string $className, iterable $haystack: void"},
        {"trigger":"assertCount","contents":"\\$this->assertCount(${1:int:expectedCount}, ${2:haystack});","kind":"function","annotation":"PHPUnit","details":"int $expectedCount,  $haystack: void"},
        {"trigger":"assertDirectoryDoesNotExist","contents":"\\$this->assertDirectoryDoesNotExist(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryExists","contents":"\\$this->assertDirectoryExists(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryIsNotReadable","contents":"\\$this->assertDirectoryIsNotReadable(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryIsNotWritable","contents":"\\$this->assertDirectoryIsNotWritable(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryIsReadable","contents":"\\$this->assertDirectoryIsReadable(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryIsWritable","contents":"\\$this->assertDirectoryIsWritable(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryNotExists","contents":"\\$this->assertDirectoryNotExists(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryNotIsReadable","contents":"\\$this->assertDirectoryNotIsReadable(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDirectoryNotIsWritable","contents":"\\$this->assertDirectoryNotIsWritable(${1:string:directory});","kind":"function","annotation":"PHPUnit","details":"string $directory: void"},
        {"trigger":"assertDoesNotMatchRegularExpression","contents":"\\$this->assertDoesNotMatchRegularExpression(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $pattern, string $string: void"},
        {"trigger":"assertEmpty","contents":"\\$this->assertEmpty(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertEqualXMLStructure","contents":"\\$this->assertEqualXMLStructure(${1:DOMElement:expectedElement}, ${2:DOMElement:actualElement});","kind":"function","annotation":"PHPUnit","details":"DOMElement $expectedElement, DOMElement $actualElement: void"},
        {"trigger":"assertEquals","contents":"\\$this->assertEquals(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertEqualsCanonicalizing","contents":"\\$this->assertEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertEqualsIgnoringCase","contents":"\\$this->assertEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertEqualsWithDelta","contents":"\\$this->assertEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual, float $delta: void"},
        {"trigger":"assertFalse","contents":"\\$this->assertFalse(${1:condition});","kind":"function","annotation":"PHPUnit","details":"$condition: void"},
        {"trigger":"assertFileDoesNotExist","contents":"\\$this->assertFileDoesNotExist(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertFileEquals","contents":"\\$this->assertFileEquals(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected, string $actual: void"},
        {"trigger":"assertFileEqualsCanonicalizing","contents":"\\$this->assertFileEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected, string $actual: void"},
        {"trigger":"assertFileEqualsIgnoringCase","contents":"\\$this->assertFileEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected, string $actual: void"},
        {"trigger":"assertFileExists","contents":"\\$this->assertFileExists(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertFileIsNotReadable","contents":"\\$this->assertFileIsNotReadable(${1:string:file});","kind":"function","annotation":"PHPUnit","details":"string $file: void"},
        {"trigger":"assertFileIsNotWritable","contents":"\\$this->assertFileIsNotWritable(${1:string:file});","kind":"function","annotation":"PHPUnit","details":"string $file: void"},
        {"trigger":"assertFileIsReadable","contents":"\\$this->assertFileIsReadable(${1:string:file});","kind":"function","annotation":"PHPUnit","details":"string $file: void"},
        {"trigger":"assertFileIsWritable","contents":"\\$this->assertFileIsWritable(${1:string:file});","kind":"function","annotation":"PHPUnit","details":"string $file: void"},
        {"trigger":"assertFileNotEquals","contents":"\\$this->assertFileNotEquals(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected, string $actual: void"},
        {"trigger":"assertFileNotEqualsCanonicalizing","contents":"\\$this->assertFileNotEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected, string $actual: void"},
        {"trigger":"assertFileNotEqualsIgnoringCase","contents":"\\$this->assertFileNotEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected, string $actual: void"},
        {"trigger":"assertFileNotExists","contents":"\\$this->assertFileNotExists(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertFileNotIsReadable","contents":"\\$this->assertFileNotIsReadable(${1:string:file});","kind":"function","annotation":"PHPUnit","details":"string $file: void"},
        {"trigger":"assertFileNotIsWritable","contents":"\\$this->assertFileNotIsWritable(${1:string:file});","kind":"function","annotation":"PHPUnit","details":"string $file: void"},
        {"trigger":"assertFinite","contents":"\\$this->assertFinite(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertGreaterThan","contents":"\\$this->assertGreaterThan(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertGreaterThanOrEqual","contents":"\\$this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertInfinite","contents":"\\$this->assertInfinite(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertInstanceOf","contents":"\\$this->assertInstanceOf(${1:string:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected,  $actual: void"},
        {"trigger":"assertIsArray","contents":"\\$this->assertIsArray(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsBool","contents":"\\$this->assertIsBool(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsCallable","contents":"\\$this->assertIsCallable(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsClosedResource","contents":"\\$this->assertIsClosedResource(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsFloat","contents":"\\$this->assertIsFloat(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsInt","contents":"\\$this->assertIsInt(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsIterable","contents":"\\$this->assertIsIterable(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotArray","contents":"\\$this->assertIsNotArray(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotBool","contents":"\\$this->assertIsNotBool(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotCallable","contents":"\\$this->assertIsNotCallable(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotClosedResource","contents":"\\$this->assertIsNotClosedResource(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotFloat","contents":"\\$this->assertIsNotFloat(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotInt","contents":"\\$this->assertIsNotInt(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotIterable","contents":"\\$this->assertIsNotIterable(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotNumeric","contents":"\\$this->assertIsNotNumeric(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotObject","contents":"\\$this->assertIsNotObject(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotReadable","contents":"\\$this->assertIsNotReadable(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertIsNotResource","contents":"\\$this->assertIsNotResource(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotScalar","contents":"\\$this->assertIsNotScalar(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotString","contents":"\\$this->assertIsNotString(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsNotWritable","contents":"\\$this->assertIsNotWritable(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertIsNumeric","contents":"\\$this->assertIsNumeric(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsObject","contents":"\\$this->assertIsObject(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsReadable","contents":"\\$this->assertIsReadable(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertIsResource","contents":"\\$this->assertIsResource(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsScalar","contents":"\\$this->assertIsScalar(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsString","contents":"\\$this->assertIsString(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertIsWritable","contents":"\\$this->assertIsWritable(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertJson","contents":"\\$this->assertJson(${1:string:actualJson});","kind":"function","annotation":"PHPUnit","details":"string $actualJson: void"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"\\$this->assertJsonFileEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualFile: void"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"\\$this->assertJsonFileNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualFile: void"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"\\$this->assertJsonStringEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualJson: void"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"\\$this->assertJsonStringEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});","kind":"function","annotation":"PHPUnit","details":"string $expectedJson, string $actualJson: void"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"\\$this->assertJsonStringNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualJson: void"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"\\$this->assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});","kind":"function","annotation":"PHPUnit","details":"$expectedJson,  $actualJson: void"},
        {"trigger":"assertLessThan","contents":"\\$this->assertLessThan(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertLessThanOrEqual","contents":"\\$this->assertLessThanOrEqual(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertMatchesRegularExpression","contents":"\\$this->assertMatchesRegularExpression(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $pattern, string $string: void"},
        {"trigger":"assertNan","contents":"\\$this->assertNan(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertNotContains","contents":"\\$this->assertNotContains(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"$needle, iterable $haystack: void"},
        {"trigger":"assertNotContainsEquals","contents":"\\$this->assertNotContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"$needle, iterable $haystack: void"},
        {"trigger":"assertNotContainsOnly","contents":"\\$this->assertNotContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":"function","annotation":"PHPUnit","details":"string $type, iterable $haystack: void"},
        {"trigger":"assertNotCount","contents":"\\$this->assertNotCount(${1:int:expectedCount}, ${2:haystack});","kind":"function","annotation":"PHPUnit","details":"int $expectedCount,  $haystack: void"},
        {"trigger":"assertNotEmpty","contents":"\\$this->assertNotEmpty(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertNotEquals","contents":"\\$this->assertNotEquals(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertNotEqualsCanonicalizing","contents":"\\$this->assertNotEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertNotEqualsIgnoringCase","contents":"\\$this->assertNotEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertNotEqualsWithDelta","contents":"\\$this->assertNotEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual, float $delta: void"},
        {"trigger":"assertNotFalse","contents":"\\$this->assertNotFalse(${1:condition});","kind":"function","annotation":"PHPUnit","details":"$condition: void"},
        {"trigger":"assertNotInstanceOf","contents":"\\$this->assertNotInstanceOf(${1:string:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"string $expected,  $actual: void"},
        {"trigger":"assertNotIsReadable","contents":"\\$this->assertNotIsReadable(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertNotIsWritable","contents":"\\$this->assertNotIsWritable(${1:string:filename});","kind":"function","annotation":"PHPUnit","details":"string $filename: void"},
        {"trigger":"assertNotNull","contents":"\\$this->assertNotNull(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertNotRegExp","contents":"\\$this->assertNotRegExp(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $pattern, string $string: void"},
        {"trigger":"assertNotSame","contents":"\\$this->assertNotSame(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertNotSameSize","contents":"\\$this->assertNotSameSize(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertNotTrue","contents":"\\$this->assertNotTrue(${1:condition});","kind":"function","annotation":"PHPUnit","details":"$condition: void"},
        {"trigger":"assertNull","contents":"\\$this->assertNull(${1:actual});","kind":"function","annotation":"PHPUnit","details":"$actual: void"},
        {"trigger":"assertObjectEquals","contents":"\\$this->assertObjectEquals(${1:object:expected}, ${2:object:actual});","kind":"function","annotation":"PHPUnit","details":"object $expected, object $actual: void"},
        {"trigger":"assertObjectHasAttribute","contents":"\\$this->assertObjectHasAttribute(${1:string:attributeName}, ${2:object});","kind":"function","annotation":"PHPUnit","details":"string $attributeName,  $object: void"},
        {"trigger":"assertObjectNotHasAttribute","contents":"\\$this->assertObjectNotHasAttribute(${1:string:attributeName}, ${2:object});","kind":"function","annotation":"PHPUnit","details":"string $attributeName,  $object: void"},
        {"trigger":"assertRegExp","contents":"\\$this->assertRegExp(${1:string:pattern}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $pattern, string $string: void"},
        {"trigger":"assertSame","contents":"\\$this->assertSame(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertSameSize","contents":"\\$this->assertSameSize(${1:expected}, ${2:actual});","kind":"function","annotation":"PHPUnit","details":"$expected,  $actual: void"},
        {"trigger":"assertStringContainsString","contents":"\\$this->assertStringContainsString(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"PHPUnit","details":"string $needle, string $haystack: void"},
        {"trigger":"assertStringContainsStringIgnoringCase","contents":"\\$this->assertStringContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"PHPUnit","details":"string $needle, string $haystack: void"},
        {"trigger":"assertStringEndsNotWith","contents":"\\$this->assertStringEndsNotWith(${1:string:suffix}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $suffix, string $string: void"},
        {"trigger":"assertStringEndsWith","contents":"\\$this->assertStringEndsWith(${1:string:suffix}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $suffix, string $string: void"},
        {"trigger":"assertStringEqualsFile","contents":"\\$this->assertStringEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualString: void"},
        {"trigger":"assertStringEqualsFileCanonicalizing","contents":"\\$this->assertStringEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualString: void"},
        {"trigger":"assertStringEqualsFileIgnoringCase","contents":"\\$this->assertStringEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualString: void"},
        {"trigger":"assertStringMatchesFormat","contents":"\\$this->assertStringMatchesFormat(${1:string:format}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $format, string $string: void"},
        {"trigger":"assertStringMatchesFormatFile","contents":"\\$this->assertStringMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $formatFile, string $string: void"},
        {"trigger":"assertStringNotContainsString","contents":"\\$this->assertStringNotContainsString(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"PHPUnit","details":"string $needle, string $haystack: void"},
        {"trigger":"assertStringNotContainsStringIgnoringCase","contents":"\\$this->assertStringNotContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":"function","annotation":"PHPUnit","details":"string $needle, string $haystack: void"},
        {"trigger":"assertStringNotEqualsFile","contents":"\\$this->assertStringNotEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualString: void"},
        {"trigger":"assertStringNotEqualsFileCanonicalizing","contents":"\\$this->assertStringNotEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualString: void"},
        {"trigger":"assertStringNotEqualsFileIgnoringCase","contents":"\\$this->assertStringNotEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualString: void"},
        {"trigger":"assertStringNotMatchesFormat","contents":"\\$this->assertStringNotMatchesFormat(${1:string:format}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $format, string $string: void"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"\\$this->assertStringNotMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $formatFile, string $string: void"},
        {"trigger":"assertStringStartsNotWith","contents":"\\$this->assertStringStartsNotWith(${1:prefix}, ${2:string});","kind":"function","annotation":"PHPUnit","details":"$prefix,  $string: void"},
        {"trigger":"assertStringStartsWith","contents":"\\$this->assertStringStartsWith(${1:string:prefix}, ${2:string:string});","kind":"function","annotation":"PHPUnit","details":"string $prefix, string $string: void"},
        {"trigger":"assertThat","contents":"\\$this->assertThat(${1:value}, ${2:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":"function","annotation":"PHPUnit","details":"$value, PHPUnit\\Framework\\Constraint\\Constraint $constraint: void"},
        {"trigger":"assertTrue","contents":"\\$this->assertTrue(${1:condition});","kind":"function","annotation":"PHPUnit","details":"$condition: void"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"\\$this->assertXmlFileEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualFile: void"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"\\$this->assertXmlFileNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile, string $actualFile: void"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"\\$this->assertXmlStringEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile,  $actualXml: void"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"\\$this->assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":"function","annotation":"PHPUnit","details":"$expectedXml,  $actualXml: void"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"\\$this->assertXmlStringNotEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":"function","annotation":"PHPUnit","details":"string $expectedFile,  $actualXml: void"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"\\$this->assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":"function","annotation":"PHPUnit","details":"$expectedXml,  $actualXml: void"},
        {"trigger":"at","contents":"\\$this->at(${1:int:index});","kind":"function","annotation":"PHPUnit","details":"int $index: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex"},
        {"trigger":"atLeast","contents":"\\$this->atLeast(${1:int:requiredInvocations});","kind":"function","annotation":"PHPUnit","details":"int $requiredInvocations: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount"},
        {"trigger":"atLeastOnce","contents":"\\$this->atLeastOnce();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce"},
        {"trigger":"atMost","contents":"\\$this->atMost(${1:int:allowedInvocations});","kind":"function","annotation":"PHPUnit","details":"int $allowedInvocations: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount"},
        {"trigger":"callback","contents":"\\$this->callback(${1:callable:callback});","kind":"function","annotation":"PHPUnit","details":"callable $callback: PHPUnit\\Framework\\Constraint\\Callback"},
        {"trigger":"classHasAttribute","contents":"\\$this->classHasAttribute(${1:string:attributeName});","kind":"function","annotation":"PHPUnit","details":"string $attributeName: PHPUnit\\Framework\\Constraint\\ClassHasAttribute"},
        {"trigger":"classHasStaticAttribute","contents":"\\$this->classHasStaticAttribute(${1:string:attributeName});","kind":"function","annotation":"PHPUnit","details":"string $attributeName: PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute"},
        {"trigger":"containsEqual","contents":"\\$this->containsEqual(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\TraversableContainsEqual"},
        {"trigger":"containsIdentical","contents":"\\$this->containsIdentical(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical"},
        {"trigger":"containsOnly","contents":"\\$this->containsOnly(${1:string:type});","kind":"function","annotation":"PHPUnit","details":"string $type: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"containsOnlyInstancesOf","contents":"\\$this->containsOnlyInstancesOf(${1:string:className});","kind":"function","annotation":"PHPUnit","details":"string $className: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"countOf","contents":"\\$this->countOf(${1:int:count});","kind":"function","annotation":"PHPUnit","details":"int $count: PHPUnit\\Framework\\Constraint\\Count"},
        {"trigger":"createConfiguredMock","contents":"\\$this->createConfiguredMock(${1:string:originalClassName}, ${2:array:configuration});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName, array $configuration: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createMock","contents":"\\$this->createMock(${1:string:originalClassName});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createPartialMock","contents":"\\$this->createPartialMock(${1:string:originalClassName}, ${2:array:methods});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName, array $methods: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createStub","contents":"\\$this->createStub(${1:string:originalClassName});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName: PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createTestProxy","contents":"\\$this->createTestProxy(${1:string:originalClassName});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"directoryExists","contents":"\\$this->directoryExists();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\DirectoryExists"},
        {"trigger":"equalTo","contents":"\\$this->equalTo(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\IsEqual"},
        {"trigger":"equalToCanonicalizing","contents":"\\$this->equalToCanonicalizing(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing"},
        {"trigger":"equalToIgnoringCase","contents":"\\$this->equalToIgnoringCase(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase"},
        {"trigger":"equalToWithDelta","contents":"\\$this->equalToWithDelta(${1:value}, ${2:float:delta});","kind":"function","annotation":"PHPUnit","details":"$value, float $delta: PHPUnit\\Framework\\Constraint\\IsEqualWithDelta"},
        {"trigger":"exactly","contents":"\\$this->exactly(${1:int:count});","kind":"function","annotation":"PHPUnit","details":"int $count: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"expectDeprecation","contents":"\\$this->expectDeprecation();","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"expectDeprecationMessage","contents":"\\$this->expectDeprecationMessage(${1:string:message});","kind":"function","annotation":"PHPUnit","details":"string $message: void"},
        {"trigger":"expectDeprecationMessageMatches","contents":"\\$this->expectDeprecationMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"PHPUnit","details":"string $regularExpression: void"},
        {"trigger":"expectError","contents":"\\$this->expectError();","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"expectErrorMessage","contents":"\\$this->expectErrorMessage(${1:string:message});","kind":"function","annotation":"PHPUnit","details":"string $message: void"},
        {"trigger":"expectErrorMessageMatches","contents":"\\$this->expectErrorMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"PHPUnit","details":"string $regularExpression: void"},
        {"trigger":"expectException","contents":"\\$this->expectException(${1:string:exception});","kind":"function","annotation":"PHPUnit","details":"string $exception: void"},
        {"trigger":"expectExceptionCode","contents":"\\$this->expectExceptionCode(${1:code});","kind":"function","annotation":"PHPUnit","details":"$code: void"},
        {"trigger":"expectExceptionMessage","contents":"\\$this->expectExceptionMessage(${1:string:message});","kind":"function","annotation":"PHPUnit","details":"string $message: void"},
        {"trigger":"expectExceptionMessageMatches","contents":"\\$this->expectExceptionMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"PHPUnit","details":"string $regularExpression: void"},
        {"trigger":"expectExceptionObject","contents":"\\$this->expectExceptionObject(${1:Exception:exception});","kind":"function","annotation":"PHPUnit","details":"Exception $exception: void"},
        {"trigger":"expectNotToPerformAssertions","contents":"\\$this->expectNotToPerformAssertions();","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"expectNotice","contents":"\\$this->expectNotice();","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"expectNoticeMessage","contents":"\\$this->expectNoticeMessage(${1:string:message});","kind":"function","annotation":"PHPUnit","details":"string $message: void"},
        {"trigger":"expectNoticeMessageMatches","contents":"\\$this->expectNoticeMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"PHPUnit","details":"string $regularExpression: void"},
        {"trigger":"expectOutputRegex","contents":"\\$this->expectOutputRegex(${1:string:expectedRegex});","kind":"function","annotation":"PHPUnit","details":"string $expectedRegex: void"},
        {"trigger":"expectOutputString","contents":"\\$this->expectOutputString(${1:string:expectedString});","kind":"function","annotation":"PHPUnit","details":"string $expectedString: void"},
        {"trigger":"expectWarning","contents":"\\$this->expectWarning();","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"expectWarningMessage","contents":"\\$this->expectWarningMessage(${1:string:message});","kind":"function","annotation":"PHPUnit","details":"string $message: void"},
        {"trigger":"expectWarningMessageMatches","contents":"\\$this->expectWarningMessageMatches(${1:string:regularExpression});","kind":"function","annotation":"PHPUnit","details":"string $regularExpression: void"},
        {"trigger":"fail","contents":"\\$this->fail($1);","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"fileExists","contents":"\\$this->fileExists();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\FileExists"},
        {"trigger":"getExpectedException","contents":"\\$this->getExpectedException();","kind":"function","annotation":"PHPUnit","details":": ?string"},
        {"trigger":"getExpectedExceptionCode","contents":"\\$this->getExpectedExceptionCode();","kind":"function","annotation":"PHPUnit"},
        {"trigger":"getExpectedExceptionMessage","contents":"\\$this->getExpectedExceptionMessage();","kind":"function","annotation":"PHPUnit","details":": ?string"},
        {"trigger":"getExpectedExceptionMessageRegExp","contents":"\\$this->getExpectedExceptionMessageRegExp();","kind":"function","annotation":"PHPUnit","details":": ?string"},
        {"trigger":"getMockBuilder","contents":"\\$this->getMockBuilder(${1:string:className});","kind":"function","annotation":"PHPUnit","details":"string $className: PHPUnit\\Framework\\MockObject\\MockBuilder"},
        {"trigger":"getMockClass","contents":"\\$this->getMockClass(${1:string:originalClassName});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName: string"},
        {"trigger":"getMockForAbstractClass","contents":"\\$this->getMockForAbstractClass(${1:string:originalClassName});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockForTrait","contents":"\\$this->getMockForTrait(${1:string:traitName});","kind":"function","annotation":"PHPUnit","details":"string $traitName: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockFromWsdl","contents":"\\$this->getMockFromWsdl(${1:string:wsdlFile});","kind":"function","annotation":"PHPUnit","details":"string $wsdlFile: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"greaterThan","contents":"\\$this->greaterThan(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\GreaterThan"},
        {"trigger":"greaterThanOrEqual","contents":"\\$this->greaterThanOrEqual(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"identicalTo","contents":"\\$this->identicalTo(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\IsIdentical"},
        {"trigger":"isEmpty","contents":"\\$this->isEmpty();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsEmpty"},
        {"trigger":"isFalse","contents":"\\$this->isFalse();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsFalse"},
        {"trigger":"isFinite","contents":"\\$this->isFinite();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsFinite"},
        {"trigger":"isInIsolation","contents":"\\$this->isInIsolation();","kind":"function","annotation":"PHPUnit","details":": bool"},
        {"trigger":"isInfinite","contents":"\\$this->isInfinite();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsInfinite"},
        {"trigger":"isInstanceOf","contents":"\\$this->isInstanceOf(${1:string:className});","kind":"function","annotation":"PHPUnit","details":"string $className: PHPUnit\\Framework\\Constraint\\IsInstanceOf"},
        {"trigger":"isJson","contents":"\\$this->isJson();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsJson"},
        {"trigger":"isLarge","contents":"\\$this->isLarge();","kind":"function","annotation":"PHPUnit","details":": bool"},
        {"trigger":"isMedium","contents":"\\$this->isMedium();","kind":"function","annotation":"PHPUnit","details":": bool"},
        {"trigger":"isNan","contents":"\\$this->isNan();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsNan"},
        {"trigger":"isNull","contents":"\\$this->isNull();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsNull"},
        {"trigger":"isReadable","contents":"\\$this->isReadable();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsReadable"},
        {"trigger":"isSmall","contents":"\\$this->isSmall();","kind":"function","annotation":"PHPUnit","details":": bool"},
        {"trigger":"isTrue","contents":"\\$this->isTrue();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsTrue"},
        {"trigger":"isType","contents":"\\$this->isType(${1:string:type});","kind":"function","annotation":"PHPUnit","details":"string $type: PHPUnit\\Framework\\Constraint\\IsType"},
        {"trigger":"isWritable","contents":"\\$this->isWritable();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\IsWritable"},
        {"trigger":"lessThan","contents":"\\$this->lessThan(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\LessThan"},
        {"trigger":"lessThanOrEqual","contents":"\\$this->lessThanOrEqual(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalAnd","contents":"\\$this->logicalAnd();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\LogicalAnd"},
        {"trigger":"logicalNot","contents":"\\$this->logicalNot(${1:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":"function","annotation":"PHPUnit","details":"PHPUnit\\Framework\\Constraint\\Constraint $constraint: PHPUnit\\Framework\\Constraint\\LogicalNot"},
        {"trigger":"logicalOr","contents":"\\$this->logicalOr();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalXor","contents":"\\$this->logicalXor();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\Constraint\\LogicalXor"},
        {"trigger":"markAsRisky","contents":"\\$this->markAsRisky();","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"markTestIncomplete","contents":"\\$this->markTestIncomplete($1);","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"markTestSkipped","contents":"\\$this->markTestSkipped($1);","kind":"function","annotation":"PHPUnit","details":": void"},
        {"trigger":"matches","contents":"\\$this->matches(${1:string:string});","kind":"function","annotation":"PHPUnit","details":"string $string: PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription"},
        {"trigger":"matchesRegularExpression","contents":"\\$this->matchesRegularExpression(${1:string:pattern});","kind":"function","annotation":"PHPUnit","details":"string $pattern: PHPUnit\\Framework\\Constraint\\RegularExpression"},
        {"trigger":"never","contents":"\\$this->never();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"objectHasAttribute","contents":"\\$this->objectHasAttribute(${1:attributeName});","kind":"function","annotation":"PHPUnit","details":"$attributeName: PHPUnit\\Framework\\Constraint\\ObjectHasAttribute"},
        {"trigger":"onConsecutiveCalls","contents":"\\$this->onConsecutiveCalls($1);","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls"},
        {"trigger":"once","contents":"\\$this->once();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"recordDoubledType","contents":"\\$this->recordDoubledType(${1:string:originalClassName});","kind":"function","annotation":"PHPUnit","details":"string $originalClassName: void"},
        {"trigger":"returnArgument","contents":"\\$this->returnArgument(${1:int:argumentIndex});","kind":"function","annotation":"PHPUnit","details":"int $argumentIndex: PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument"},
        {"trigger":"returnCallback","contents":"\\$this->returnCallback(${1:callback});","kind":"function","annotation":"PHPUnit","details":"$callback: PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback"},
        {"trigger":"returnSelf","contents":"\\$this->returnSelf();","kind":"function","annotation":"PHPUnit","details":": PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf"},
        {"trigger":"returnValue","contents":"\\$this->returnValue(${1:value});","kind":"function","annotation":"PHPUnit","details":"$value: PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub"},
        {"trigger":"returnValueMap","contents":"\\$this->returnValueMap(${1:array:valueMap});","kind":"function","annotation":"PHPUnit","details":"array $valueMap: PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap"},
        {"trigger":"setOutputCallback","contents":"\\$this->setOutputCallback(${1:callable:callback});","kind":"function","annotation":"PHPUnit","details":"callable $callback: void"},
        {"trigger":"stringContains","contents":"\\$this->stringContains(${1:string:string});","kind":"function","annotation":"PHPUnit","details":"string $string: PHPUnit\\Framework\\Constraint\\StringContains"},
        {"trigger":"stringEndsWith","contents":"\\$this->stringEndsWith(${1:string:suffix});","kind":"function","annotation":"PHPUnit","details":"string $suffix: PHPUnit\\Framework\\Constraint\\StringEndsWith"},
        {"trigger":"stringStartsWith","contents":"\\$this->stringStartsWith(${1:prefix});","kind":"function","annotation":"PHPUnit","details":"$prefix: PHPUnit\\Framework\\Constraint\\StringStartsWith"},
        {"trigger":"throwException","contents":"\\$this->throwException(${1:Throwable:exception});","kind":"function","annotation":"PHPUnit","details":"Throwable $exception: PHPUnit\\Framework\\MockObject\\Stub\\Exception"}
    ]
}
