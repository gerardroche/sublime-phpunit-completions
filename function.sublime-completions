{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.use
    //     string
    //     support.class
    //     variable.other

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.use - string - support.class - variable.other",
    "completions": [
        {"trigger":"any()\tPHPUnit","contents":"\\$this->any();"},
        {"trigger":"anything()\tPHPUnit","contents":"\\$this->anything();"},
        {"trigger":"arrayHasKey()\tPHPUnit","contents":"\\$this->arrayHasKey(${1:key});"},
        {"trigger":"assertArrayHasKey()\tPHPUnit","contents":"\\$this->assertArrayHasKey(${1:key}, ${2:array});"},
        {"trigger":"assertArrayNotHasKey()\tPHPUnit","contents":"\\$this->assertArrayNotHasKey(${1:key}, ${2:array});"},
        {"trigger":"assertArraySubset()\tPHPUnit","contents":"\\$this->assertArraySubset(${1:subset}, ${2:array});"},
        {"trigger":"assertAttributeContains()\tPHPUnit","contents":"\\$this->assertAttributeContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeContainsOnly()\tPHPUnit","contents":"\\$this->assertAttributeContainsOnly(${1:type}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeCount()\tPHPUnit","contents":"\\$this->assertAttributeCount(${1:expectedCount}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeEmpty()\tPHPUnit","contents":"\\$this->assertAttributeEmpty(${1:haystackAttributeName}, ${2:haystackClassOrObject});"},
        {"trigger":"assertAttributeEquals()\tPHPUnit","contents":"\\$this->assertAttributeEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeGreaterThan()\tPHPUnit","contents":"\\$this->assertAttributeGreaterThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeGreaterThanOrEqual()\tPHPUnit","contents":"\\$this->assertAttributeGreaterThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeInstanceOf()\tPHPUnit","contents":"\\$this->assertAttributeInstanceOf(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeInternalType()\tPHPUnit","contents":"\\$this->assertAttributeInternalType(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeLessThan()\tPHPUnit","contents":"\\$this->assertAttributeLessThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeLessThanOrEqual()\tPHPUnit","contents":"\\$this->assertAttributeLessThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeNotContains()\tPHPUnit","contents":"\\$this->assertAttributeNotContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotContainsOnly()\tPHPUnit","contents":"\\$this->assertAttributeNotContainsOnly(${1:type}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotCount()\tPHPUnit","contents":"\\$this->assertAttributeNotCount(${1:expectedCount}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotEmpty()\tPHPUnit","contents":"\\$this->assertAttributeNotEmpty(${1:haystackAttributeName}, ${2:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotEquals()\tPHPUnit","contents":"\\$this->assertAttributeNotEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeNotInstanceOf()\tPHPUnit","contents":"\\$this->assertAttributeNotInstanceOf(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeNotInternalType()\tPHPUnit","contents":"\\$this->assertAttributeNotInternalType(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeNotSame()\tPHPUnit","contents":"\\$this->assertAttributeNotSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeSame()\tPHPUnit","contents":"\\$this->assertAttributeSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertClassHasAttribute()\tPHPUnit","contents":"\\$this->assertClassHasAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassHasStaticAttribute()\tPHPUnit","contents":"\\$this->assertClassHasStaticAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassNotHasAttribute()\tPHPUnit","contents":"\\$this->assertClassNotHasAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassNotHasStaticAttribute()\tPHPUnit","contents":"\\$this->assertClassNotHasStaticAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertContains()\tPHPUnit","contents":"\\$this->assertContains(${1:needle}, ${2:haystack});"},
        {"trigger":"assertContainsOnly()\tPHPUnit","contents":"\\$this->assertContainsOnly(${1:type}, ${2:haystack});"},
        {"trigger":"assertContainsOnlyInstancesOf()\tPHPUnit","contents":"\\$this->assertContainsOnlyInstancesOf(${1:classname}, ${2:haystack});"},
        {"trigger":"assertCount()\tPHPUnit","contents":"\\$this->assertCount(${1:expectedCount}, ${2:haystack});"},
        {"trigger":"assertDataSetsEqual()\tDbUnit","contents":"\\$this->assertDataSetsEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertEmpty()\tPHPUnit","contents":"\\$this->assertEmpty(${1:actual});"},
        {"trigger":"assertEquals()\tPHPUnit","contents":"\\$this->assertEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertEqualXMLStructure()\tPHPUnit","contents":"\\$this->assertEqualXMLStructure(${1:expectedElement}, ${2:actualElement});"},
        {"trigger":"assertFalse()\tPHPUnit","contents":"\\$this->assertFalse(${1:condition});"},
        {"trigger":"assertFileEquals()\tPHPUnit","contents":"\\$this->assertFileEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertFileExists()\tPHPUnit","contents":"\\$this->assertFileExists(${1:filename});"},
        {"trigger":"assertFileNotEquals()\tPHPUnit","contents":"\\$this->assertFileNotEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertFileNotExists()\tPHPUnit","contents":"\\$this->assertFileNotExists(${1:filename});"},
        {"trigger":"assertGreaterThan()\tPHPUnit","contents":"\\$this->assertGreaterThan(${1:expected}, ${2:actual});"},
        {"trigger":"assertGreaterThanOrEqual()\tPHPUnit","contents":"\\$this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertInstanceOf()\tPHPUnit","contents":"\\$this->assertInstanceOf(${1:expected}, ${2:actual});"},
        {"trigger":"assertInternalType()\tPHPUnit","contents":"\\$this->assertInternalType(${1:expected}, ${2:actual});"},
        {"trigger":"assertJson()\tPHPUnit","contents":"\\$this->assertJson(${1:actualJson});"},
        {"trigger":"assertJsonFileEqualsJsonFile()\tPHPUnit","contents":"\\$this->assertJsonFileEqualsJsonFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertJsonFileNotEqualsJsonFile()\tPHPUnit","contents":"\\$this->assertJsonFileNotEqualsJsonFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertJsonStringEqualsJsonFile()\tPHPUnit","contents":"\\$this->assertJsonStringEqualsJsonFile(${1:expectedFile}, ${2:actualJson});"},
        {"trigger":"assertJsonStringEqualsJsonString()\tPHPUnit","contents":"\\$this->assertJsonStringEqualsJsonString(${1:expectedJson}, ${2:actualJson});"},
        {"trigger":"assertJsonStringNotEqualsJsonFile()\tPHPUnit","contents":"\\$this->assertJsonStringNotEqualsJsonFile(${1:expectedFile}, ${2:actualJson});"},
        {"trigger":"assertJsonStringNotEqualsJsonString()\tPHPUnit","contents":"\\$this->assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});"},
        {"trigger":"assertLessThan()\tPHPUnit","contents":"\\$this->assertLessThan(${1:expected}, ${2:actual});"},
        {"trigger":"assertLessThanOrEqual()\tPHPUnit","contents":"\\$this->assertLessThanOrEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotContains()\tPHPUnit","contents":"\\$this->assertNotContains(${1:needle}, ${2:haystack});"},
        {"trigger":"assertNotContainsOnly()\tPHPUnit","contents":"\\$this->assertNotContainsOnly(${1:type}, ${2:haystack});"},
        {"trigger":"assertNotCount()\tPHPUnit","contents":"\\$this->assertNotCount(${1:expectedCount}, ${2:haystack});"},
        {"trigger":"assertNotEmpty()\tPHPUnit","contents":"\\$this->assertNotEmpty(${1:actual});"},
        {"trigger":"assertNotEquals()\tPHPUnit","contents":"\\$this->assertNotEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotFalse()\tPHPUnit","contents":"\\$this->assertNotFalse(${1:condition});"},
        {"trigger":"assertNotInstanceOf()\tPHPUnit","contents":"\\$this->assertNotInstanceOf(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotInternalType()\tPHPUnit","contents":"\\$this->assertNotInternalType(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotNull()\tPHPUnit","contents":"\\$this->assertNotNull(${1:actual});"},
        {"trigger":"assertNotRegExp()\tPHPUnit","contents":"\\$this->assertNotRegExp(${1:pattern}, ${2:string});"},
        {"trigger":"assertNotSame()\tPHPUnit","contents":"\\$this->assertNotSame(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotSameSize()\tPHPUnit","contents":"\\$this->assertNotSameSize(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotTag()\tPHPUnit","contents":"\\$this->assertNotTag(${1:matcher}, ${2:actual});"},
        {"trigger":"assertNotTrue()\tPHPUnit","contents":"\\$this->assertNotTrue(${1:condition});"},
        {"trigger":"assertNull()\tPHPUnit","contents":"\\$this->assertNull(${1:actual});"},
        {"trigger":"assertObjectHasAttribute()\tPHPUnit","contents":"\\$this->assertObjectHasAttribute(${1:attributeName}, ${2:object});"},
        {"trigger":"assertObjectNotHasAttribute()\tPHPUnit","contents":"\\$this->assertObjectNotHasAttribute(${1:attributeName}, ${2:object});"},
        {"trigger":"assertRegExp()\tPHPUnit","contents":"\\$this->assertRegExp(${1:pattern}, ${2:string});"},
        {"trigger":"assertSame()\tPHPUnit","contents":"\\$this->assertSame(${1:expected}, ${2:actual});"},
        {"trigger":"assertSameSize()\tPHPUnit","contents":"\\$this->assertSameSize(${1:expected}, ${2:actual});"},
        {"trigger":"assertSelectCount()\tPHPUnit","contents":"\\$this->assertSelectCount(${1:selector}, ${2:count}, ${3:actual});"},
        {"trigger":"assertSelectEquals()\tPHPUnit","contents":"\\$this->assertSelectEquals(${1:selector}, ${2:content}, ${3:count}, ${4:actual});"},
        {"trigger":"assertSelectRegExp()\tPHPUnit","contents":"\\$this->assertSelectRegExp(${1:selector}, ${2:pattern}, ${3:count}, ${4:actual});"},
        {"trigger":"assertStringEndsNotWith()\tPHPUnit","contents":"\\$this->assertStringEndsNotWith(${1:suffix}, ${2:string});"},
        {"trigger":"assertStringEndsWith()\tPHPUnit","contents":"\\$this->assertStringEndsWith(${1:suffix}, ${2:string});"},
        {"trigger":"assertStringEqualsFile()\tPHPUnit","contents":"\\$this->assertStringEqualsFile(${1:expectedFile}, ${2:actualString});"},
        {"trigger":"assertStringMatchesFormat()\tPHPUnit","contents":"\\$this->assertStringMatchesFormat(${1:format}, ${2:string});"},
        {"trigger":"assertStringMatchesFormatFile()\tPHPUnit","contents":"\\$this->assertStringMatchesFormatFile(${1:formatFile}, ${2:string});"},
        {"trigger":"assertStringNotEqualsFile()\tPHPUnit","contents":"\\$this->assertStringNotEqualsFile(${1:expectedFile}, ${2:actualString});"},
        {"trigger":"assertStringNotMatchesFormat()\tPHPUnit","contents":"\\$this->assertStringNotMatchesFormat(${1:format}, ${2:string});"},
        {"trigger":"assertStringNotMatchesFormatFile()\tPHPUnit","contents":"\\$this->assertStringNotMatchesFormatFile(${1:formatFile}, ${2:string});"},
        {"trigger":"assertStringStartsNotWith()\tPHPUnit","contents":"\\$this->assertStringStartsNotWith(${1:prefix}, ${2:string});"},
        {"trigger":"assertStringStartsWith()\tPHPUnit","contents":"\\$this->assertStringStartsWith(${1:prefix}, ${2:string});"},
        {"trigger":"assertTableContains()\tDbUnit","contents":"\\$this->assertTableContains(${1:(array) expectedRow}, ${2:table});"},
        {"trigger":"assertTableRowCount()\tDbUnit","contents":"\\$this->assertTableRowCount(${1:tableName}, ${2:expected});"},
        {"trigger":"assertTablesEqual()\tDbUnit","contents":"\\$this->assertTablesEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertTag()\tPHPUnit","contents":"\\$this->assertTag(${1:matcher}, ${2:actual});"},
        {"trigger":"assertThat()\tPHPUnit","contents":"\\$this->assertThat(${1:value}, ${2:constraint});"},
        {"trigger":"assertTrue()\tPHPUnit","contents":"\\$this->assertTrue(${1:condition});"},
        {"trigger":"assertXmlFileEqualsXmlFile()\tPHPUnit","contents":"\\$this->assertXmlFileEqualsXmlFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertXmlFileNotEqualsXmlFile()\tPHPUnit","contents":"\\$this->assertXmlFileNotEqualsXmlFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertXmlStringEqualsXmlFile()\tPHPUnit","contents":"\\$this->assertXmlStringEqualsXmlFile(${1:expectedFile}, ${2:actualXml});"},
        {"trigger":"assertXmlStringEqualsXmlString()\tPHPUnit","contents":"\\$this->assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});"},
        {"trigger":"assertXmlStringNotEqualsXmlFile()\tPHPUnit","contents":"\\$this->assertXmlStringNotEqualsXmlFile(${1:expectedFile}, ${2:actualXml});"},
        {"trigger":"assertXmlStringNotEqualsXmlString()\tPHPUnit","contents":"\\$this->assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});"},
        {"trigger":"at()\tPHPUnit","contents":"\\$this->at(${1:index});"},
        {"trigger":"atLeast()\tPHPUnit","contents":"\\$this->atLeast(${1:requiredInvocations});"},
        {"trigger":"atLeastOnce()\tPHPUnit","contents":"\\$this->atLeastOnce();"},
        {"trigger":"atMost()\tPHPUnit","contents":"\\$this->atMost(${1:allowedInvocations});"},
        {"trigger":"attribute()\tPHPUnit","contents":"\\$this->attribute(${1:constraint}, ${2:attributeName});"},
        {"trigger":"attributeEqualTo()\tPHPUnit","contents":"\\$this->attributeEqualTo(${1:attributeName}, ${2:value});"},
        {"trigger":"callback()\tPHPUnit","contents":"\\$this->callback(${1:callback});"},
        {"trigger":"classHasAttribute()\tPHPUnit","contents":"\\$this->classHasAttribute(${1:attributeName});"},
        {"trigger":"classHasStaticAttribute()\tPHPUnit","contents":"\\$this->classHasStaticAttribute(${1:attributeName});"},
        {"trigger":"closeConnection()\tDbUnit","contents":"\\$this->closeConnection(${1:connection});"},
        {"trigger":"contains()\tPHPUnit","contents":"\\$this->contains(${1:value});"},
        {"trigger":"containsOnly()\tPHPUnit","contents":"\\$this->containsOnly(${1:type});"},
        {"trigger":"containsOnlyInstancesOf()\tPHPUnit","contents":"\\$this->containsOnlyInstancesOf(${1:classname});"},
        {"trigger":"countOf()\tPHPUnit","contents":"\\$this->countOf(${1:count});"},
        {"trigger":"createArrayDataSet()\tDbUnit","contents":"\\$this->createArrayDataSet(${1:(array) data});"},
        {"trigger":"createDefaultDBConnection()\tDbUnit","contents":"\\$this->createDefaultDBConnection(${1:connection});"},
        {"trigger":"createFlatXMLDataSet()\tDbUnit","contents":"\\$this->createFlatXMLDataSet(${1:xmlFile});"},
        {"trigger":"createMySQLXMLDataSet()\tDbUnit","contents":"\\$this->createMySQLXMLDataSet(${1:xmlFile});"},
        {"trigger":"createXMLDataSet()\tDbUnit","contents":"\\$this->createXMLDataSet(${1:xmlFile});"},
        {"trigger":"equalTo()\tPHPUnit","contents":"\\$this->equalTo(${1:value});"},
        {"trigger":"exactly()\tPHPUnit","contents":"\\$this->exactly(${1:count});"},
        {"trigger":"expectOutputRegex()\tPHPUnit","contents":"\\$this->expectOutputRegex(${1:expectedRegex});"},
        {"trigger":"expectOutputString()\tPHPUnit","contents":"\\$this->expectOutputString(${1:expectedString});"},
        {"trigger":"fail()\tPHPUnit","contents":"\\$this->fail();"},
        {"trigger":"fileExists()\tPHPUnit","contents":"\\$this->fileExists();"},
        {"trigger":"getConnection()\tDbUnit","contents":"\\$this->getConnection();"},
        {"trigger":"getDatabaseTester()\tDbUnit","contents":"\\$this->getDatabaseTester();"},
        {"trigger":"getDataSet()\tDbUnit","contents":"\\$this->getDataSet();"},
        {"trigger":"getExpectedException()\tPHPUnit","contents":"\\$this->getExpectedException();"},
        {"trigger":"getMock()\tPHPUnit","contents":"\\$this->getMock(${1:originalClassName});"},
        {"trigger":"getMockBuilder()\tPHPUnit","contents":"\\$this->getMockBuilder(${1:className});"},
        {"trigger":"getMockClass()\tPHPUnit","contents":"\\$this->getMockClass(${1:originalClassName});"},
        {"trigger":"getMockForAbstractClass()\tPHPUnit","contents":"\\$this->getMockForAbstractClass(${1:originalClassName});"},
        {"trigger":"getMockForTrait()\tPHPUnit","contents":"\\$this->getMockForTrait(${1:traitName});"},
        {"trigger":"getMockFromWsdl()\tPHPUnit","contents":"\\$this->getMockFromWsdl(${1:wsdlFile});"},
        {"trigger":"getMockObjectGenerator()\tPHPUnit","contents":"\\$this->getMockObjectGenerator();"},
        {"trigger":"getObjectAttribute()\tPHPUnit","contents":"\\$this->getObjectAttribute(${1:object}, ${2:attributeName});"},
        {"trigger":"getOperations()\tDbUnit","contents":"\\$this->getOperations();"},
        {"trigger":"getSetUpOperation()\tDbUnit","contents":"\\$this->getSetUpOperation();"},
        {"trigger":"getStaticAttribute()\tPHPUnit","contents":"\\$this->getStaticAttribute(${1:className}, ${2:attributeName});"},
        {"trigger":"getTearDownOperation()\tDbUnit","contents":"\\$this->getTearDownOperation();"},
        {"trigger":"greaterThan()\tPHPUnit","contents":"\\$this->greaterThan(${1:value});"},
        {"trigger":"greaterThanOrEqual()\tPHPUnit","contents":"\\$this->greaterThanOrEqual(${1:value});"},
        {"trigger":"identicalTo()\tPHPUnit","contents":"\\$this->identicalTo(${1:value});"},
        {"trigger":"isEmpty()\tPHPUnit","contents":"\\$this->isEmpty();"},
        {"trigger":"isFalse()\tPHPUnit","contents":"\\$this->isFalse();"},
        {"trigger":"isInIsolation()\tPHPUnit","contents":"\\$this->isInIsolation();"},
        {"trigger":"isInstanceOf()\tPHPUnit","contents":"\\$this->isInstanceOf(${1:className});"},
        {"trigger":"isJson()\tPHPUnit","contents":"\\$this->isJson();"},
        {"trigger":"isNull()\tPHPUnit","contents":"\\$this->isNull();"},
        {"trigger":"isTrue()\tPHPUnit","contents":"\\$this->isTrue();"},
        {"trigger":"isType()\tPHPUnit","contents":"\\$this->isType(${1:type});"},
        {"trigger":"lessThan()\tPHPUnit","contents":"\\$this->lessThan(${1:value});"},
        {"trigger":"lessThanOrEqual()\tPHPUnit","contents":"\\$this->lessThanOrEqual(${1:value});"},
        {"trigger":"logicalAnd()\tPHPUnit","contents":"\\$this->logicalAnd();"},
        {"trigger":"logicalNot()\tPHPUnit","contents":"\\$this->logicalNot(${1:constraint});"},
        {"trigger":"logicalOr()\tPHPUnit","contents":"\\$this->logicalOr();"},
        {"trigger":"logicalXor()\tPHPUnit","contents":"\\$this->logicalXor();"},
        {"trigger":"markTestIncomplete()\tPHPUnit","contents":"\\$this->markTestIncomplete();"},
        {"trigger":"markTestSkipped()\tPHPUnit","contents":"\\$this->markTestSkipped();"},
        {"trigger":"matches()\tPHPUnit","contents":"\\$this->matches(${1:string});"},
        {"trigger":"matchesRegularExpression()\tPHPUnit","contents":"\\$this->matchesRegularExpression(${1:pattern});"},
        {"trigger":"never()\tPHPUnit","contents":"\\$this->never();"},
        {"trigger":"newDatabaseTester()\tDbUnit","contents":"\\$this->newDatabaseTester();"},
        {"trigger":"objectHasAttribute()\tPHPUnit","contents":"\\$this->objectHasAttribute(${1:attributeName});"},
        {"trigger":"once()\tPHPUnit","contents":"\\$this->once();"},
        {"trigger":"onConsecutiveCalls()\tPHPUnit","contents":"\\$this->onConsecutiveCalls();"},
        {"trigger":"readAttribute()\tPHPUnit","contents":"\\$this->readAttribute(${1:classOrObject}, ${2:attributeName});"},
        {"trigger":"returnArgument()\tPHPUnit","contents":"\\$this->returnArgument(${1:argumentIndex});"},
        {"trigger":"returnCallback()\tPHPUnit","contents":"\\$this->returnCallback(${1:callback});"},
        {"trigger":"returnSelf()\tPHPUnit","contents":"\\$this->returnSelf();"},
        {"trigger":"returnValue()\tPHPUnit","contents":"\\$this->returnValue(${1:value});"},
        {"trigger":"returnValueMap()\tPHPUnit","contents":"\\$this->returnValueMap(${1:(array) valueMap});"},
        {"trigger":"setExpectedException()\tPHPUnit","contents":"\\$this->setExpectedException(${1:exceptionName});"},
        {"trigger":"setExpectedExceptionFromAnnotation()\tPHPUnit","contents":"\\$this->setExpectedExceptionFromAnnotation();"},
        {"trigger":"setExpectedExceptionRegExp()\tPHPUnit","contents":"\\$this->setExpectedExceptionRegExp(${1:exceptionName});"},
        {"trigger":"setOutputCallback()\tPHPUnit","contents":"\\$this->setOutputCallback(${1:callback});"},
        {"trigger":"setUseErrorHandler()\tPHPUnit","contents":"\\$this->setUseErrorHandler(${1:useErrorHandler});"},
        {"trigger":"setUseErrorHandlerFromAnnotation()\tPHPUnit","contents":"\\$this->setUseErrorHandlerFromAnnotation();"},
        {"trigger":"stringContains()\tPHPUnit","contents":"\\$this->stringContains(${1:string});"},
        {"trigger":"stringEndsWith()\tPHPUnit","contents":"\\$this->stringEndsWith(${1:suffix});"},
        {"trigger":"stringStartsWith()\tPHPUnit","contents":"\\$this->stringStartsWith(${1:prefix});"},
        {"trigger":"throwException()\tPHPUnit","contents":"\\$this->throwException(${1:exception});"}
    ]
}
