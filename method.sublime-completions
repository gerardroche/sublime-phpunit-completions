{
    // scope:
    //
    // source.php meta.function-call-object
    // source.php variable.other.member
    // source.php variable.other.property

    "scope": "source.php meta.function-call-object, source.php variable.other.member, source.php variable.other.property",
    "completions": [
        {"trigger":"any","contents":"any();","kind":["function","m","Method"],"annotation":"any();: PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount","details":"any();: PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount"},
        {"trigger":"anything","contents":"anything();","kind":["function","m","Method"],"annotation":"anything();: PHPUnit\\Framework\\Constraint\\IsAnything","details":"anything();: PHPUnit\\Framework\\Constraint\\IsAnything"},
        {"trigger":"arrayHasKey","contents":"arrayHasKey(${1:key});","kind":["function","m","Method"],"annotation":"arrayHasKey($key);: PHPUnit\\Framework\\Constraint\\ArrayHasKey","details":"arrayHasKey($key);: PHPUnit\\Framework\\Constraint\\ArrayHasKey"},
        {"trigger":"assertArrayHasKey","contents":"assertArrayHasKey(${1:key}, ${2:array});","kind":["function","m","Method"],"annotation":"assertArrayHasKey($key, $array);: void","details":"assertArrayHasKey($key, $array);: void"},
        {"trigger":"assertArrayNotHasKey","contents":"assertArrayNotHasKey(${1:key}, ${2:array});","kind":["function","m","Method"],"annotation":"assertArrayNotHasKey($key, $array);: void","details":"assertArrayNotHasKey($key, $array);: void"},
        {"trigger":"assertClassHasAttribute","contents":"assertClassHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"assertClassHasAttribute(string $attributeName, string $className);: void","details":"assertClassHasAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertClassHasStaticAttribute","contents":"assertClassHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"assertClassHasStaticAttribute(string $attributeName, string $className);: void","details":"assertClassHasStaticAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertClassNotHasAttribute","contents":"assertClassNotHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"assertClassNotHasAttribute(string $attributeName, string $className);: void","details":"assertClassNotHasAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertClassNotHasStaticAttribute","contents":"assertClassNotHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"assertClassNotHasStaticAttribute(string $attributeName, string $className);: void","details":"assertClassNotHasStaticAttribute(string $attributeName, string $className);: void"},
        {"trigger":"assertContains","contents":"assertContains(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContains($needle, iterable $haystack);: void","details":"assertContains($needle, iterable $haystack);: void"},
        {"trigger":"assertContainsEquals","contents":"assertContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContainsEquals($needle, iterable $haystack);: void","details":"assertContainsEquals($needle, iterable $haystack);: void"},
        {"trigger":"assertContainsOnly","contents":"assertContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContainsOnly(string $type, iterable $haystack);: void","details":"assertContainsOnly(string $type, iterable $haystack);: void"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"assertContainsOnlyInstancesOf(${1:string:className}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContainsOnlyInstancesOf(string $className, iterable $haystack);: void","details":"assertContainsOnlyInstancesOf(string $className, iterable $haystack);: void"},
        {"trigger":"assertCount","contents":"assertCount(${1:int:expectedCount}, ${2:haystack});","kind":["function","m","Method"],"annotation":"assertCount(int $expectedCount, $haystack);: void","details":"assertCount(int $expectedCount, $haystack);: void"},
        {"trigger":"assertDirectoryDoesNotExist","contents":"assertDirectoryDoesNotExist(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryDoesNotExist(string $directory);: void","details":"assertDirectoryDoesNotExist(string $directory);: void"},
        {"trigger":"assertDirectoryExists","contents":"assertDirectoryExists(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryExists(string $directory);: void","details":"assertDirectoryExists(string $directory);: void"},
        {"trigger":"assertDirectoryIsNotReadable","contents":"assertDirectoryIsNotReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsNotReadable(string $directory);: void","details":"assertDirectoryIsNotReadable(string $directory);: void"},
        {"trigger":"assertDirectoryIsNotWritable","contents":"assertDirectoryIsNotWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsNotWritable(string $directory);: void","details":"assertDirectoryIsNotWritable(string $directory);: void"},
        {"trigger":"assertDirectoryIsReadable","contents":"assertDirectoryIsReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsReadable(string $directory);: void","details":"assertDirectoryIsReadable(string $directory);: void"},
        {"trigger":"assertDirectoryIsWritable","contents":"assertDirectoryIsWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsWritable(string $directory);: void","details":"assertDirectoryIsWritable(string $directory);: void"},
        {"trigger":"assertDirectoryNotExists","contents":"assertDirectoryNotExists(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryNotExists(string $directory);: void","details":"assertDirectoryNotExists(string $directory);: void"},
        {"trigger":"assertDirectoryNotIsReadable","contents":"assertDirectoryNotIsReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryNotIsReadable(string $directory);: void","details":"assertDirectoryNotIsReadable(string $directory);: void"},
        {"trigger":"assertDirectoryNotIsWritable","contents":"assertDirectoryNotIsWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryNotIsWritable(string $directory);: void","details":"assertDirectoryNotIsWritable(string $directory);: void"},
        {"trigger":"assertDoesNotMatchRegularExpression","contents":"assertDoesNotMatchRegularExpression(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertDoesNotMatchRegularExpression(string $pattern, string $string);: void","details":"assertDoesNotMatchRegularExpression(string $pattern, string $string);: void"},
        {"trigger":"assertEmpty","contents":"assertEmpty(${1:actual});","kind":["function","m","Method"],"annotation":"assertEmpty($actual);: void","details":"assertEmpty($actual);: void"},
        {"trigger":"assertEqualXMLStructure","contents":"assertEqualXMLStructure(${1:DOMElement:expectedElement}, ${2:DOMElement:actualElement});","kind":["function","m","Method"],"annotation":"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement);: void","details":"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement);: void"},
        {"trigger":"assertEquals","contents":"assertEquals(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertEquals($expected, $actual);: void","details":"assertEquals($expected, $actual);: void"},
        {"trigger":"assertEqualsCanonicalizing","contents":"assertEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertEqualsCanonicalizing($expected, $actual);: void","details":"assertEqualsCanonicalizing($expected, $actual);: void"},
        {"trigger":"assertEqualsIgnoringCase","contents":"assertEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertEqualsIgnoringCase($expected, $actual);: void","details":"assertEqualsIgnoringCase($expected, $actual);: void"},
        {"trigger":"assertEqualsWithDelta","contents":"assertEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":["function","m","Method"],"annotation":"assertEqualsWithDelta($expected, $actual, float $delta);: void","details":"assertEqualsWithDelta($expected, $actual, float $delta);: void"},
        {"trigger":"assertFalse","contents":"assertFalse(${1:condition});","kind":["function","m","Method"],"annotation":"assertFalse($condition);: void","details":"assertFalse($condition);: void"},
        {"trigger":"assertFileDoesNotExist","contents":"assertFileDoesNotExist(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertFileDoesNotExist(string $filename);: void","details":"assertFileDoesNotExist(string $filename);: void"},
        {"trigger":"assertFileEquals","contents":"assertFileEquals(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileEquals(string $expected, string $actual);: void","details":"assertFileEquals(string $expected, string $actual);: void"},
        {"trigger":"assertFileEqualsCanonicalizing","contents":"assertFileEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileEqualsCanonicalizing(string $expected, string $actual);: void","details":"assertFileEqualsCanonicalizing(string $expected, string $actual);: void"},
        {"trigger":"assertFileEqualsIgnoringCase","contents":"assertFileEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileEqualsIgnoringCase(string $expected, string $actual);: void","details":"assertFileEqualsIgnoringCase(string $expected, string $actual);: void"},
        {"trigger":"assertFileExists","contents":"assertFileExists(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertFileExists(string $filename);: void","details":"assertFileExists(string $filename);: void"},
        {"trigger":"assertFileIsNotReadable","contents":"assertFileIsNotReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsNotReadable(string $file);: void","details":"assertFileIsNotReadable(string $file);: void"},
        {"trigger":"assertFileIsNotWritable","contents":"assertFileIsNotWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsNotWritable(string $file);: void","details":"assertFileIsNotWritable(string $file);: void"},
        {"trigger":"assertFileIsReadable","contents":"assertFileIsReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsReadable(string $file);: void","details":"assertFileIsReadable(string $file);: void"},
        {"trigger":"assertFileIsWritable","contents":"assertFileIsWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsWritable(string $file);: void","details":"assertFileIsWritable(string $file);: void"},
        {"trigger":"assertFileNotEquals","contents":"assertFileNotEquals(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileNotEquals(string $expected, string $actual);: void","details":"assertFileNotEquals(string $expected, string $actual);: void"},
        {"trigger":"assertFileNotEqualsCanonicalizing","contents":"assertFileNotEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileNotEqualsCanonicalizing(string $expected, string $actual);: void","details":"assertFileNotEqualsCanonicalizing(string $expected, string $actual);: void"},
        {"trigger":"assertFileNotEqualsIgnoringCase","contents":"assertFileNotEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileNotEqualsIgnoringCase(string $expected, string $actual);: void","details":"assertFileNotEqualsIgnoringCase(string $expected, string $actual);: void"},
        {"trigger":"assertFileNotExists","contents":"assertFileNotExists(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertFileNotExists(string $filename);: void","details":"assertFileNotExists(string $filename);: void"},
        {"trigger":"assertFileNotIsReadable","contents":"assertFileNotIsReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileNotIsReadable(string $file);: void","details":"assertFileNotIsReadable(string $file);: void"},
        {"trigger":"assertFileNotIsWritable","contents":"assertFileNotIsWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileNotIsWritable(string $file);: void","details":"assertFileNotIsWritable(string $file);: void"},
        {"trigger":"assertFinite","contents":"assertFinite(${1:actual});","kind":["function","m","Method"],"annotation":"assertFinite($actual);: void","details":"assertFinite($actual);: void"},
        {"trigger":"assertGreaterThan","contents":"assertGreaterThan(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertGreaterThan($expected, $actual);: void","details":"assertGreaterThan($expected, $actual);: void"},
        {"trigger":"assertGreaterThanOrEqual","contents":"assertGreaterThanOrEqual(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertGreaterThanOrEqual($expected, $actual);: void","details":"assertGreaterThanOrEqual($expected, $actual);: void"},
        {"trigger":"assertInfinite","contents":"assertInfinite(${1:actual});","kind":["function","m","Method"],"annotation":"assertInfinite($actual);: void","details":"assertInfinite($actual);: void"},
        {"trigger":"assertInstanceOf","contents":"assertInstanceOf(${1:string:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertInstanceOf(string $expected, $actual);: void","details":"assertInstanceOf(string $expected, $actual);: void"},
        {"trigger":"assertIsArray","contents":"assertIsArray(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsArray($actual);: void","details":"assertIsArray($actual);: void"},
        {"trigger":"assertIsBool","contents":"assertIsBool(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsBool($actual);: void","details":"assertIsBool($actual);: void"},
        {"trigger":"assertIsCallable","contents":"assertIsCallable(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsCallable($actual);: void","details":"assertIsCallable($actual);: void"},
        {"trigger":"assertIsClosedResource","contents":"assertIsClosedResource(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsClosedResource($actual);: void","details":"assertIsClosedResource($actual);: void"},
        {"trigger":"assertIsFloat","contents":"assertIsFloat(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsFloat($actual);: void","details":"assertIsFloat($actual);: void"},
        {"trigger":"assertIsInt","contents":"assertIsInt(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsInt($actual);: void","details":"assertIsInt($actual);: void"},
        {"trigger":"assertIsIterable","contents":"assertIsIterable(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsIterable($actual);: void","details":"assertIsIterable($actual);: void"},
        {"trigger":"assertIsNotArray","contents":"assertIsNotArray(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotArray($actual);: void","details":"assertIsNotArray($actual);: void"},
        {"trigger":"assertIsNotBool","contents":"assertIsNotBool(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotBool($actual);: void","details":"assertIsNotBool($actual);: void"},
        {"trigger":"assertIsNotCallable","contents":"assertIsNotCallable(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotCallable($actual);: void","details":"assertIsNotCallable($actual);: void"},
        {"trigger":"assertIsNotClosedResource","contents":"assertIsNotClosedResource(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotClosedResource($actual);: void","details":"assertIsNotClosedResource($actual);: void"},
        {"trigger":"assertIsNotFloat","contents":"assertIsNotFloat(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotFloat($actual);: void","details":"assertIsNotFloat($actual);: void"},
        {"trigger":"assertIsNotInt","contents":"assertIsNotInt(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotInt($actual);: void","details":"assertIsNotInt($actual);: void"},
        {"trigger":"assertIsNotIterable","contents":"assertIsNotIterable(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotIterable($actual);: void","details":"assertIsNotIterable($actual);: void"},
        {"trigger":"assertIsNotNumeric","contents":"assertIsNotNumeric(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotNumeric($actual);: void","details":"assertIsNotNumeric($actual);: void"},
        {"trigger":"assertIsNotObject","contents":"assertIsNotObject(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotObject($actual);: void","details":"assertIsNotObject($actual);: void"},
        {"trigger":"assertIsNotReadable","contents":"assertIsNotReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsNotReadable(string $filename);: void","details":"assertIsNotReadable(string $filename);: void"},
        {"trigger":"assertIsNotResource","contents":"assertIsNotResource(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotResource($actual);: void","details":"assertIsNotResource($actual);: void"},
        {"trigger":"assertIsNotScalar","contents":"assertIsNotScalar(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotScalar($actual);: void","details":"assertIsNotScalar($actual);: void"},
        {"trigger":"assertIsNotString","contents":"assertIsNotString(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNotString($actual);: void","details":"assertIsNotString($actual);: void"},
        {"trigger":"assertIsNotWritable","contents":"assertIsNotWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsNotWritable(string $filename);: void","details":"assertIsNotWritable(string $filename);: void"},
        {"trigger":"assertIsNumeric","contents":"assertIsNumeric(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsNumeric($actual);: void","details":"assertIsNumeric($actual);: void"},
        {"trigger":"assertIsObject","contents":"assertIsObject(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsObject($actual);: void","details":"assertIsObject($actual);: void"},
        {"trigger":"assertIsReadable","contents":"assertIsReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsReadable(string $filename);: void","details":"assertIsReadable(string $filename);: void"},
        {"trigger":"assertIsResource","contents":"assertIsResource(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsResource($actual);: void","details":"assertIsResource($actual);: void"},
        {"trigger":"assertIsScalar","contents":"assertIsScalar(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsScalar($actual);: void","details":"assertIsScalar($actual);: void"},
        {"trigger":"assertIsString","contents":"assertIsString(${1:actual});","kind":["function","m","Method"],"annotation":"assertIsString($actual);: void","details":"assertIsString($actual);: void"},
        {"trigger":"assertIsWritable","contents":"assertIsWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsWritable(string $filename);: void","details":"assertIsWritable(string $filename);: void"},
        {"trigger":"assertJson","contents":"assertJson(${1:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJson(string $actualJson);: void","details":"assertJson(string $actualJson);: void"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"assertJsonFileEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile);: void","details":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"assertJsonFileNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile);: void","details":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"assertJsonStringEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson);: void","details":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson);: void"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"assertJsonStringEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson);: void","details":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson);: void"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"assertJsonStringNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson);: void","details":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson);: void"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson);: void","details":"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson);: void"},
        {"trigger":"assertLessThan","contents":"assertLessThan(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertLessThan($expected, $actual);: void","details":"assertLessThan($expected, $actual);: void"},
        {"trigger":"assertLessThanOrEqual","contents":"assertLessThanOrEqual(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertLessThanOrEqual($expected, $actual);: void","details":"assertLessThanOrEqual($expected, $actual);: void"},
        {"trigger":"assertMatchesRegularExpression","contents":"assertMatchesRegularExpression(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertMatchesRegularExpression(string $pattern, string $string);: void","details":"assertMatchesRegularExpression(string $pattern, string $string);: void"},
        {"trigger":"assertNan","contents":"assertNan(${1:actual});","kind":["function","m","Method"],"annotation":"assertNan($actual);: void","details":"assertNan($actual);: void"},
        {"trigger":"assertNotContains","contents":"assertNotContains(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertNotContains($needle, iterable $haystack);: void","details":"assertNotContains($needle, iterable $haystack);: void"},
        {"trigger":"assertNotContainsEquals","contents":"assertNotContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertNotContainsEquals($needle, iterable $haystack);: void","details":"assertNotContainsEquals($needle, iterable $haystack);: void"},
        {"trigger":"assertNotContainsOnly","contents":"assertNotContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertNotContainsOnly(string $type, iterable $haystack);: void","details":"assertNotContainsOnly(string $type, iterable $haystack);: void"},
        {"trigger":"assertNotCount","contents":"assertNotCount(${1:int:expectedCount}, ${2:haystack});","kind":["function","m","Method"],"annotation":"assertNotCount(int $expectedCount, $haystack);: void","details":"assertNotCount(int $expectedCount, $haystack);: void"},
        {"trigger":"assertNotEmpty","contents":"assertNotEmpty(${1:actual});","kind":["function","m","Method"],"annotation":"assertNotEmpty($actual);: void","details":"assertNotEmpty($actual);: void"},
        {"trigger":"assertNotEquals","contents":"assertNotEquals(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertNotEquals($expected, $actual);: void","details":"assertNotEquals($expected, $actual);: void"},
        {"trigger":"assertNotEqualsCanonicalizing","contents":"assertNotEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertNotEqualsCanonicalizing($expected, $actual);: void","details":"assertNotEqualsCanonicalizing($expected, $actual);: void"},
        {"trigger":"assertNotEqualsIgnoringCase","contents":"assertNotEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertNotEqualsIgnoringCase($expected, $actual);: void","details":"assertNotEqualsIgnoringCase($expected, $actual);: void"},
        {"trigger":"assertNotEqualsWithDelta","contents":"assertNotEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":["function","m","Method"],"annotation":"assertNotEqualsWithDelta($expected, $actual, float $delta);: void","details":"assertNotEqualsWithDelta($expected, $actual, float $delta);: void"},
        {"trigger":"assertNotFalse","contents":"assertNotFalse(${1:condition});","kind":["function","m","Method"],"annotation":"assertNotFalse($condition);: void","details":"assertNotFalse($condition);: void"},
        {"trigger":"assertNotInstanceOf","contents":"assertNotInstanceOf(${1:string:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertNotInstanceOf(string $expected, $actual);: void","details":"assertNotInstanceOf(string $expected, $actual);: void"},
        {"trigger":"assertNotIsReadable","contents":"assertNotIsReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertNotIsReadable(string $filename);: void","details":"assertNotIsReadable(string $filename);: void"},
        {"trigger":"assertNotIsWritable","contents":"assertNotIsWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertNotIsWritable(string $filename);: void","details":"assertNotIsWritable(string $filename);: void"},
        {"trigger":"assertNotNull","contents":"assertNotNull(${1:actual});","kind":["function","m","Method"],"annotation":"assertNotNull($actual);: void","details":"assertNotNull($actual);: void"},
        {"trigger":"assertNotRegExp","contents":"assertNotRegExp(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertNotRegExp(string $pattern, string $string);: void","details":"assertNotRegExp(string $pattern, string $string);: void"},
        {"trigger":"assertNotSame","contents":"assertNotSame(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertNotSame($expected, $actual);: void","details":"assertNotSame($expected, $actual);: void"},
        {"trigger":"assertNotSameSize","contents":"assertNotSameSize(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertNotSameSize($expected, $actual);: void","details":"assertNotSameSize($expected, $actual);: void"},
        {"trigger":"assertNotTrue","contents":"assertNotTrue(${1:condition});","kind":["function","m","Method"],"annotation":"assertNotTrue($condition);: void","details":"assertNotTrue($condition);: void"},
        {"trigger":"assertNull","contents":"assertNull(${1:actual});","kind":["function","m","Method"],"annotation":"assertNull($actual);: void","details":"assertNull($actual);: void"},
        {"trigger":"assertObjectEquals","contents":"assertObjectEquals(${1:object:expected}, ${2:object:actual});","kind":["function","m","Method"],"annotation":"assertObjectEquals(object $expected, object $actual);: void","details":"assertObjectEquals(object $expected, object $actual);: void"},
        {"trigger":"assertObjectHasAttribute","contents":"assertObjectHasAttribute(${1:string:attributeName}, ${2:object});","kind":["function","m","Method"],"annotation":"assertObjectHasAttribute(string $attributeName, $object);: void","details":"assertObjectHasAttribute(string $attributeName, $object);: void"},
        {"trigger":"assertObjectNotHasAttribute","contents":"assertObjectNotHasAttribute(${1:string:attributeName}, ${2:object});","kind":["function","m","Method"],"annotation":"assertObjectNotHasAttribute(string $attributeName, $object);: void","details":"assertObjectNotHasAttribute(string $attributeName, $object);: void"},
        {"trigger":"assertRegExp","contents":"assertRegExp(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertRegExp(string $pattern, string $string);: void","details":"assertRegExp(string $pattern, string $string);: void"},
        {"trigger":"assertSame","contents":"assertSame(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertSame($expected, $actual);: void","details":"assertSame($expected, $actual);: void"},
        {"trigger":"assertSameSize","contents":"assertSameSize(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"assertSameSize($expected, $actual);: void","details":"assertSameSize($expected, $actual);: void"},
        {"trigger":"assertStringContainsString","contents":"assertStringContainsString(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringContainsString(string $needle, string $haystack);: void","details":"assertStringContainsString(string $needle, string $haystack);: void"},
        {"trigger":"assertStringContainsStringIgnoringCase","contents":"assertStringContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringContainsStringIgnoringCase(string $needle, string $haystack);: void","details":"assertStringContainsStringIgnoringCase(string $needle, string $haystack);: void"},
        {"trigger":"assertStringEndsNotWith","contents":"assertStringEndsNotWith(${1:string:suffix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringEndsNotWith(string $suffix, string $string);: void","details":"assertStringEndsNotWith(string $suffix, string $string);: void"},
        {"trigger":"assertStringEndsWith","contents":"assertStringEndsWith(${1:string:suffix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringEndsWith(string $suffix, string $string);: void","details":"assertStringEndsWith(string $suffix, string $string);: void"},
        {"trigger":"assertStringEqualsFile","contents":"assertStringEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringEqualsFile(string $expectedFile, string $actualString);: void","details":"assertStringEqualsFile(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringEqualsFileCanonicalizing","contents":"assertStringEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void","details":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringEqualsFileIgnoringCase","contents":"assertStringEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void","details":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringMatchesFormat","contents":"assertStringMatchesFormat(${1:string:format}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringMatchesFormat(string $format, string $string);: void","details":"assertStringMatchesFormat(string $format, string $string);: void"},
        {"trigger":"assertStringMatchesFormatFile","contents":"assertStringMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringMatchesFormatFile(string $formatFile, string $string);: void","details":"assertStringMatchesFormatFile(string $formatFile, string $string);: void"},
        {"trigger":"assertStringNotContainsString","contents":"assertStringNotContainsString(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringNotContainsString(string $needle, string $haystack);: void","details":"assertStringNotContainsString(string $needle, string $haystack);: void"},
        {"trigger":"assertStringNotContainsStringIgnoringCase","contents":"assertStringNotContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack);: void","details":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack);: void"},
        {"trigger":"assertStringNotEqualsFile","contents":"assertStringNotEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringNotEqualsFile(string $expectedFile, string $actualString);: void","details":"assertStringNotEqualsFile(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringNotEqualsFileCanonicalizing","contents":"assertStringNotEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void","details":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringNotEqualsFileIgnoringCase","contents":"assertStringNotEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void","details":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString);: void"},
        {"trigger":"assertStringNotMatchesFormat","contents":"assertStringNotMatchesFormat(${1:string:format}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringNotMatchesFormat(string $format, string $string);: void","details":"assertStringNotMatchesFormat(string $format, string $string);: void"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"assertStringNotMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringNotMatchesFormatFile(string $formatFile, string $string);: void","details":"assertStringNotMatchesFormatFile(string $formatFile, string $string);: void"},
        {"trigger":"assertStringStartsNotWith","contents":"assertStringStartsNotWith(${1:prefix}, ${2:string});","kind":["function","m","Method"],"annotation":"assertStringStartsNotWith($prefix, $string);: void","details":"assertStringStartsNotWith($prefix, $string);: void"},
        {"trigger":"assertStringStartsWith","contents":"assertStringStartsWith(${1:string:prefix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringStartsWith(string $prefix, string $string);: void","details":"assertStringStartsWith(string $prefix, string $string);: void"},
        {"trigger":"assertThat","contents":"assertThat(${1:value}, ${2:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":["function","m","Method"],"annotation":"assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint);: void","details":"assertThat($value, PHPUnit\\Framework\\Constraint\\Constraint $constraint);: void"},
        {"trigger":"assertTrue","contents":"assertTrue(${1:condition});","kind":["function","m","Method"],"annotation":"assertTrue($condition);: void","details":"assertTrue($condition);: void"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"assertXmlFileEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile);: void","details":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"assertXmlFileNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile);: void","details":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile);: void"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"assertXmlStringEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml);: void","details":"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml);: void"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringEqualsXmlString($expectedXml, $actualXml);: void","details":"assertXmlStringEqualsXmlString($expectedXml, $actualXml);: void"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"assertXmlStringNotEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml);: void","details":"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml);: void"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml);: void","details":"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml);: void"},
        {"trigger":"at","contents":"at(${1:int:index});","kind":["function","m","Method"],"annotation":"at(int $index);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex","details":"at(int $index);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtIndex"},
        {"trigger":"atLeast","contents":"atLeast(${1:int:requiredInvocations});","kind":["function","m","Method"],"annotation":"atLeast(int $requiredInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount","details":"atLeast(int $requiredInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount"},
        {"trigger":"atLeastOnce","contents":"atLeastOnce();","kind":["function","m","Method"],"annotation":"atLeastOnce();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce","details":"atLeastOnce();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce"},
        {"trigger":"atMost","contents":"atMost(${1:int:allowedInvocations});","kind":["function","m","Method"],"annotation":"atMost(int $allowedInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount","details":"atMost(int $allowedInvocations);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount"},
        {"trigger":"callback","contents":"callback(${1:callable:callback});","kind":["function","m","Method"],"annotation":"callback(callable $callback);: PHPUnit\\Framework\\Constraint\\Callback","details":"callback(callable $callback);: PHPUnit\\Framework\\Constraint\\Callback"},
        {"trigger":"classHasAttribute","contents":"classHasAttribute(${1:string:attributeName});","kind":["function","m","Method"],"annotation":"classHasAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasAttribute","details":"classHasAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasAttribute"},
        {"trigger":"classHasStaticAttribute","contents":"classHasStaticAttribute(${1:string:attributeName});","kind":["function","m","Method"],"annotation":"classHasStaticAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute","details":"classHasStaticAttribute(string $attributeName);: PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute"},
        {"trigger":"containsEqual","contents":"containsEqual(${1:value});","kind":["function","m","Method"],"annotation":"containsEqual($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsEqual","details":"containsEqual($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsEqual"},
        {"trigger":"containsIdentical","contents":"containsIdentical(${1:value});","kind":["function","m","Method"],"annotation":"containsIdentical($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical","details":"containsIdentical($value);: PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical"},
        {"trigger":"containsOnly","contents":"containsOnly(${1:string:type});","kind":["function","m","Method"],"annotation":"containsOnly(string $type);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnly(string $type);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"containsOnlyInstancesOf","contents":"containsOnlyInstancesOf(${1:string:className});","kind":["function","m","Method"],"annotation":"containsOnlyInstancesOf(string $className);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnlyInstancesOf(string $className);: PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"countOf","contents":"countOf(${1:int:count});","kind":["function","m","Method"],"annotation":"countOf(int $count);: PHPUnit\\Framework\\Constraint\\Count","details":"countOf(int $count);: PHPUnit\\Framework\\Constraint\\Count"},
        {"trigger":"createConfiguredMock","contents":"createConfiguredMock(${1:string:originalClassName}, ${2:array:configuration});","kind":["function","m","Method"],"annotation":"createConfiguredMock(string $originalClassName, array $configuration);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createConfiguredMock(string $originalClassName, array $configuration);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createMock","contents":"createMock(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"createMock(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createMock(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createPartialMock","contents":"createPartialMock(${1:string:originalClassName}, ${2:array:methods});","kind":["function","m","Method"],"annotation":"createPartialMock(string $originalClassName, array $methods);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createPartialMock(string $originalClassName, array $methods);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createStub","contents":"createStub(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"createStub(string $originalClassName);: PHPUnit\\Framework\\MockObject\\Stub","details":"createStub(string $originalClassName);: PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createTestProxy","contents":"createTestProxy(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"createTestProxy(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"createTestProxy(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"directoryExists","contents":"directoryExists();","kind":["function","m","Method"],"annotation":"directoryExists();: PHPUnit\\Framework\\Constraint\\DirectoryExists","details":"directoryExists();: PHPUnit\\Framework\\Constraint\\DirectoryExists"},
        {"trigger":"equalTo","contents":"equalTo(${1:value});","kind":["function","m","Method"],"annotation":"equalTo($value);: PHPUnit\\Framework\\Constraint\\IsEqual","details":"equalTo($value);: PHPUnit\\Framework\\Constraint\\IsEqual"},
        {"trigger":"equalToCanonicalizing","contents":"equalToCanonicalizing(${1:value});","kind":["function","m","Method"],"annotation":"equalToCanonicalizing($value);: PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing","details":"equalToCanonicalizing($value);: PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing"},
        {"trigger":"equalToIgnoringCase","contents":"equalToIgnoringCase(${1:value});","kind":["function","m","Method"],"annotation":"equalToIgnoringCase($value);: PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase","details":"equalToIgnoringCase($value);: PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase"},
        {"trigger":"equalToWithDelta","contents":"equalToWithDelta(${1:value}, ${2:float:delta});","kind":["function","m","Method"],"annotation":"equalToWithDelta($value, float $delta);: PHPUnit\\Framework\\Constraint\\IsEqualWithDelta","details":"equalToWithDelta($value, float $delta);: PHPUnit\\Framework\\Constraint\\IsEqualWithDelta"},
        {"trigger":"exactly","contents":"exactly(${1:int:count});","kind":["function","m","Method"],"annotation":"exactly(int $count);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"exactly(int $count);: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"expectDeprecation","contents":"expectDeprecation();","kind":["function","m","Method"],"annotation":"expectDeprecation();: void","details":"expectDeprecation();: void"},
        {"trigger":"expectDeprecationMessage","contents":"expectDeprecationMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"expectDeprecationMessage(string $message);: void","details":"expectDeprecationMessage(string $message);: void"},
        {"trigger":"expectDeprecationMessageMatches","contents":"expectDeprecationMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"expectDeprecationMessageMatches(string $regularExpression);: void","details":"expectDeprecationMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectError","contents":"expectError();","kind":["function","m","Method"],"annotation":"expectError();: void","details":"expectError();: void"},
        {"trigger":"expectErrorMessage","contents":"expectErrorMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"expectErrorMessage(string $message);: void","details":"expectErrorMessage(string $message);: void"},
        {"trigger":"expectErrorMessageMatches","contents":"expectErrorMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"expectErrorMessageMatches(string $regularExpression);: void","details":"expectErrorMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectException","contents":"expectException(${1:string:exception});","kind":["function","m","Method"],"annotation":"expectException(string $exception);: void","details":"expectException(string $exception);: void"},
        {"trigger":"expectExceptionCode","contents":"expectExceptionCode(${1:code});","kind":["function","m","Method"],"annotation":"expectExceptionCode($code);: void","details":"expectExceptionCode($code);: void"},
        {"trigger":"expectExceptionMessage","contents":"expectExceptionMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"expectExceptionMessage(string $message);: void","details":"expectExceptionMessage(string $message);: void"},
        {"trigger":"expectExceptionMessageMatches","contents":"expectExceptionMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"expectExceptionMessageMatches(string $regularExpression);: void","details":"expectExceptionMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectExceptionObject","contents":"expectExceptionObject(${1:Exception:exception});","kind":["function","m","Method"],"annotation":"expectExceptionObject(Exception $exception);: void","details":"expectExceptionObject(Exception $exception);: void"},
        {"trigger":"expectNotToPerformAssertions","contents":"expectNotToPerformAssertions();","kind":["function","m","Method"],"annotation":"expectNotToPerformAssertions();: void","details":"expectNotToPerformAssertions();: void"},
        {"trigger":"expectNotice","contents":"expectNotice();","kind":["function","m","Method"],"annotation":"expectNotice();: void","details":"expectNotice();: void"},
        {"trigger":"expectNoticeMessage","contents":"expectNoticeMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"expectNoticeMessage(string $message);: void","details":"expectNoticeMessage(string $message);: void"},
        {"trigger":"expectNoticeMessageMatches","contents":"expectNoticeMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"expectNoticeMessageMatches(string $regularExpression);: void","details":"expectNoticeMessageMatches(string $regularExpression);: void"},
        {"trigger":"expectOutputRegex","contents":"expectOutputRegex(${1:string:expectedRegex});","kind":["function","m","Method"],"annotation":"expectOutputRegex(string $expectedRegex);: void","details":"expectOutputRegex(string $expectedRegex);: void"},
        {"trigger":"expectOutputString","contents":"expectOutputString(${1:string:expectedString});","kind":["function","m","Method"],"annotation":"expectOutputString(string $expectedString);: void","details":"expectOutputString(string $expectedString);: void"},
        {"trigger":"expectWarning","contents":"expectWarning();","kind":["function","m","Method"],"annotation":"expectWarning();: void","details":"expectWarning();: void"},
        {"trigger":"expectWarningMessage","contents":"expectWarningMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"expectWarningMessage(string $message);: void","details":"expectWarningMessage(string $message);: void"},
        {"trigger":"expectWarningMessageMatches","contents":"expectWarningMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"expectWarningMessageMatches(string $regularExpression);: void","details":"expectWarningMessageMatches(string $regularExpression);: void"},
        {"trigger":"fail","contents":"fail($1);","kind":["function","m","Method"],"annotation":"fail($1);: void","details":"fail($1);: void"},
        {"trigger":"fileExists","contents":"fileExists();","kind":["function","m","Method"],"annotation":"fileExists();: PHPUnit\\Framework\\Constraint\\FileExists","details":"fileExists();: PHPUnit\\Framework\\Constraint\\FileExists"},
        {"trigger":"getExpectedException","contents":"getExpectedException();","kind":["function","m","Method"],"annotation":"getExpectedException();: ?string","details":"getExpectedException();: ?string"},
        {"trigger":"getExpectedExceptionCode","contents":"getExpectedExceptionCode();","kind":["function","m","Method"],"annotation":"getExpectedExceptionCode();","details":"getExpectedExceptionCode();"},
        {"trigger":"getExpectedExceptionMessage","contents":"getExpectedExceptionMessage();","kind":["function","m","Method"],"annotation":"getExpectedExceptionMessage();: ?string","details":"getExpectedExceptionMessage();: ?string"},
        {"trigger":"getExpectedExceptionMessageRegExp","contents":"getExpectedExceptionMessageRegExp();","kind":["function","m","Method"],"annotation":"getExpectedExceptionMessageRegExp();: ?string","details":"getExpectedExceptionMessageRegExp();: ?string"},
        {"trigger":"getMockBuilder","contents":"getMockBuilder(${1:string:className});","kind":["function","m","Method"],"annotation":"getMockBuilder(string $className);: PHPUnit\\Framework\\MockObject\\MockBuilder","details":"getMockBuilder(string $className);: PHPUnit\\Framework\\MockObject\\MockBuilder"},
        {"trigger":"getMockClass","contents":"getMockClass(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"getMockClass(string $originalClassName);: string","details":"getMockClass(string $originalClassName);: string"},
        {"trigger":"getMockForAbstractClass","contents":"getMockForAbstractClass(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"getMockForAbstractClass(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForAbstractClass(string $originalClassName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockForTrait","contents":"getMockForTrait(${1:string:traitName});","kind":["function","m","Method"],"annotation":"getMockForTrait(string $traitName);: PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForTrait(string $traitName);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockFromWsdl","contents":"getMockFromWsdl(${1:string:wsdlFile});","kind":["function","m","Method"],"annotation":"getMockFromWsdl(string $wsdlFile);: PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockFromWsdl(string $wsdlFile);: PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"greaterThan","contents":"greaterThan(${1:value});","kind":["function","m","Method"],"annotation":"greaterThan($value);: PHPUnit\\Framework\\Constraint\\GreaterThan","details":"greaterThan($value);: PHPUnit\\Framework\\Constraint\\GreaterThan"},
        {"trigger":"greaterThanOrEqual","contents":"greaterThanOrEqual(${1:value});","kind":["function","m","Method"],"annotation":"greaterThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr","details":"greaterThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"identicalTo","contents":"identicalTo(${1:value});","kind":["function","m","Method"],"annotation":"identicalTo($value);: PHPUnit\\Framework\\Constraint\\IsIdentical","details":"identicalTo($value);: PHPUnit\\Framework\\Constraint\\IsIdentical"},
        {"trigger":"isEmpty","contents":"isEmpty();","kind":["function","m","Method"],"annotation":"isEmpty();: PHPUnit\\Framework\\Constraint\\IsEmpty","details":"isEmpty();: PHPUnit\\Framework\\Constraint\\IsEmpty"},
        {"trigger":"isFalse","contents":"isFalse();","kind":["function","m","Method"],"annotation":"isFalse();: PHPUnit\\Framework\\Constraint\\IsFalse","details":"isFalse();: PHPUnit\\Framework\\Constraint\\IsFalse"},
        {"trigger":"isFinite","contents":"isFinite();","kind":["function","m","Method"],"annotation":"isFinite();: PHPUnit\\Framework\\Constraint\\IsFinite","details":"isFinite();: PHPUnit\\Framework\\Constraint\\IsFinite"},
        {"trigger":"isInIsolation","contents":"isInIsolation();","kind":["function","m","Method"],"annotation":"isInIsolation();: bool","details":"isInIsolation();: bool"},
        {"trigger":"isInfinite","contents":"isInfinite();","kind":["function","m","Method"],"annotation":"isInfinite();: PHPUnit\\Framework\\Constraint\\IsInfinite","details":"isInfinite();: PHPUnit\\Framework\\Constraint\\IsInfinite"},
        {"trigger":"isInstanceOf","contents":"isInstanceOf(${1:string:className});","kind":["function","m","Method"],"annotation":"isInstanceOf(string $className);: PHPUnit\\Framework\\Constraint\\IsInstanceOf","details":"isInstanceOf(string $className);: PHPUnit\\Framework\\Constraint\\IsInstanceOf"},
        {"trigger":"isJson","contents":"isJson();","kind":["function","m","Method"],"annotation":"isJson();: PHPUnit\\Framework\\Constraint\\IsJson","details":"isJson();: PHPUnit\\Framework\\Constraint\\IsJson"},
        {"trigger":"isLarge","contents":"isLarge();","kind":["function","m","Method"],"annotation":"isLarge();: bool","details":"isLarge();: bool"},
        {"trigger":"isMedium","contents":"isMedium();","kind":["function","m","Method"],"annotation":"isMedium();: bool","details":"isMedium();: bool"},
        {"trigger":"isNan","contents":"isNan();","kind":["function","m","Method"],"annotation":"isNan();: PHPUnit\\Framework\\Constraint\\IsNan","details":"isNan();: PHPUnit\\Framework\\Constraint\\IsNan"},
        {"trigger":"isNull","contents":"isNull();","kind":["function","m","Method"],"annotation":"isNull();: PHPUnit\\Framework\\Constraint\\IsNull","details":"isNull();: PHPUnit\\Framework\\Constraint\\IsNull"},
        {"trigger":"isReadable","contents":"isReadable();","kind":["function","m","Method"],"annotation":"isReadable();: PHPUnit\\Framework\\Constraint\\IsReadable","details":"isReadable();: PHPUnit\\Framework\\Constraint\\IsReadable"},
        {"trigger":"isSmall","contents":"isSmall();","kind":["function","m","Method"],"annotation":"isSmall();: bool","details":"isSmall();: bool"},
        {"trigger":"isTrue","contents":"isTrue();","kind":["function","m","Method"],"annotation":"isTrue();: PHPUnit\\Framework\\Constraint\\IsTrue","details":"isTrue();: PHPUnit\\Framework\\Constraint\\IsTrue"},
        {"trigger":"isType","contents":"isType(${1:string:type});","kind":["function","m","Method"],"annotation":"isType(string $type);: PHPUnit\\Framework\\Constraint\\IsType","details":"isType(string $type);: PHPUnit\\Framework\\Constraint\\IsType"},
        {"trigger":"isWritable","contents":"isWritable();","kind":["function","m","Method"],"annotation":"isWritable();: PHPUnit\\Framework\\Constraint\\IsWritable","details":"isWritable();: PHPUnit\\Framework\\Constraint\\IsWritable"},
        {"trigger":"lessThan","contents":"lessThan(${1:value});","kind":["function","m","Method"],"annotation":"lessThan($value);: PHPUnit\\Framework\\Constraint\\LessThan","details":"lessThan($value);: PHPUnit\\Framework\\Constraint\\LessThan"},
        {"trigger":"lessThanOrEqual","contents":"lessThanOrEqual(${1:value});","kind":["function","m","Method"],"annotation":"lessThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr","details":"lessThanOrEqual($value);: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalAnd","contents":"logicalAnd();","kind":["function","m","Method"],"annotation":"logicalAnd();: PHPUnit\\Framework\\Constraint\\LogicalAnd","details":"logicalAnd();: PHPUnit\\Framework\\Constraint\\LogicalAnd"},
        {"trigger":"logicalNot","contents":"logicalNot(${1:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":["function","m","Method"],"annotation":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint);: PHPUnit\\Framework\\Constraint\\LogicalNot","details":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint);: PHPUnit\\Framework\\Constraint\\LogicalNot"},
        {"trigger":"logicalOr","contents":"logicalOr();","kind":["function","m","Method"],"annotation":"logicalOr();: PHPUnit\\Framework\\Constraint\\LogicalOr","details":"logicalOr();: PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalXor","contents":"logicalXor();","kind":["function","m","Method"],"annotation":"logicalXor();: PHPUnit\\Framework\\Constraint\\LogicalXor","details":"logicalXor();: PHPUnit\\Framework\\Constraint\\LogicalXor"},
        {"trigger":"markAsRisky","contents":"markAsRisky();","kind":["function","m","Method"],"annotation":"markAsRisky();: void","details":"markAsRisky();: void"},
        {"trigger":"markTestIncomplete","contents":"markTestIncomplete($1);","kind":["function","m","Method"],"annotation":"markTestIncomplete($1);: void","details":"markTestIncomplete($1);: void"},
        {"trigger":"markTestSkipped","contents":"markTestSkipped($1);","kind":["function","m","Method"],"annotation":"markTestSkipped($1);: void","details":"markTestSkipped($1);: void"},
        {"trigger":"matches","contents":"matches(${1:string:string});","kind":["function","m","Method"],"annotation":"matches(string $string);: PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription","details":"matches(string $string);: PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription"},
        {"trigger":"matchesRegularExpression","contents":"matchesRegularExpression(${1:string:pattern});","kind":["function","m","Method"],"annotation":"matchesRegularExpression(string $pattern);: PHPUnit\\Framework\\Constraint\\RegularExpression","details":"matchesRegularExpression(string $pattern);: PHPUnit\\Framework\\Constraint\\RegularExpression"},
        {"trigger":"never","contents":"never();","kind":["function","m","Method"],"annotation":"never();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"never();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"objectHasAttribute","contents":"objectHasAttribute(${1:attributeName});","kind":["function","m","Method"],"annotation":"objectHasAttribute($attributeName);: PHPUnit\\Framework\\Constraint\\ObjectHasAttribute","details":"objectHasAttribute($attributeName);: PHPUnit\\Framework\\Constraint\\ObjectHasAttribute"},
        {"trigger":"onConsecutiveCalls","contents":"onConsecutiveCalls($1);","kind":["function","m","Method"],"annotation":"onConsecutiveCalls($1);: PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls","details":"onConsecutiveCalls($1);: PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls"},
        {"trigger":"once","contents":"once();","kind":["function","m","Method"],"annotation":"once();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"once();: PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"recordDoubledType","contents":"recordDoubledType(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"recordDoubledType(string $originalClassName);: void","details":"recordDoubledType(string $originalClassName);: void"},
        {"trigger":"returnArgument","contents":"returnArgument(${1:int:argumentIndex});","kind":["function","m","Method"],"annotation":"returnArgument(int $argumentIndex);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument","details":"returnArgument(int $argumentIndex);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument"},
        {"trigger":"returnCallback","contents":"returnCallback(${1:callback});","kind":["function","m","Method"],"annotation":"returnCallback($callback);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback","details":"returnCallback($callback);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback"},
        {"trigger":"returnSelf","contents":"returnSelf();","kind":["function","m","Method"],"annotation":"returnSelf();: PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf","details":"returnSelf();: PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf"},
        {"trigger":"returnValue","contents":"returnValue(${1:value});","kind":["function","m","Method"],"annotation":"returnValue($value);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub","details":"returnValue($value);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub"},
        {"trigger":"returnValueMap","contents":"returnValueMap(${1:array:valueMap});","kind":["function","m","Method"],"annotation":"returnValueMap(array $valueMap);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap","details":"returnValueMap(array $valueMap);: PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap"},
        {"trigger":"setOutputCallback","contents":"setOutputCallback(${1:callable:callback});","kind":["function","m","Method"],"annotation":"setOutputCallback(callable $callback);: void","details":"setOutputCallback(callable $callback);: void"},
        {"trigger":"stringContains","contents":"stringContains(${1:string:string});","kind":["function","m","Method"],"annotation":"stringContains(string $string);: PHPUnit\\Framework\\Constraint\\StringContains","details":"stringContains(string $string);: PHPUnit\\Framework\\Constraint\\StringContains"},
        {"trigger":"stringEndsWith","contents":"stringEndsWith(${1:string:suffix});","kind":["function","m","Method"],"annotation":"stringEndsWith(string $suffix);: PHPUnit\\Framework\\Constraint\\StringEndsWith","details":"stringEndsWith(string $suffix);: PHPUnit\\Framework\\Constraint\\StringEndsWith"},
        {"trigger":"stringStartsWith","contents":"stringStartsWith(${1:prefix});","kind":["function","m","Method"],"annotation":"stringStartsWith($prefix);: PHPUnit\\Framework\\Constraint\\StringStartsWith","details":"stringStartsWith($prefix);: PHPUnit\\Framework\\Constraint\\StringStartsWith"},
        {"trigger":"throwException","contents":"throwException(${1:Throwable:exception});","kind":["function","m","Method"],"annotation":"throwException(Throwable $exception);: PHPUnit\\Framework\\MockObject\\Stub\\Exception","details":"throwException(Throwable $exception);: PHPUnit\\Framework\\MockObject\\Stub\\Exception"}
    ]
}
