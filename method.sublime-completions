{
    // scope:
    //
    // source.php meta.function-call-object
    // source.php variable.other.member
    // source.php variable.other.property

    "scope": "source.php meta.function-call-object, source.php variable.other.member, source.php variable.other.property",
    "completions": [
        {"trigger":"any","contents":"any();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"anything","contents":"anything();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"arrayHasKey","contents":"arrayHasKey(${1:key});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertArrayHasKey","contents":"assertArrayHasKey(${1:key}, ${2:array});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertArrayNotHasKey","contents":"assertArrayNotHasKey(${1:key}, ${2:array});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertClassHasAttribute","contents":"assertClassHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertClassHasStaticAttribute","contents":"assertClassHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertClassNotHasAttribute","contents":"assertClassNotHasAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertClassNotHasStaticAttribute","contents":"assertClassNotHasStaticAttribute(${1:string:attributeName}, ${2:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertContains","contents":"assertContains(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertContainsEquals","contents":"assertContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertContainsOnly","contents":"assertContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"assertContainsOnlyInstancesOf(${1:string:className}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertCount","contents":"assertCount(${1:int:expectedCount}, ${2:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryDoesNotExist","contents":"assertDirectoryDoesNotExist(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryExists","contents":"assertDirectoryExists(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryIsNotReadable","contents":"assertDirectoryIsNotReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryIsNotWritable","contents":"assertDirectoryIsNotWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryIsReadable","contents":"assertDirectoryIsReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryIsWritable","contents":"assertDirectoryIsWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryNotExists","contents":"assertDirectoryNotExists(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryNotIsReadable","contents":"assertDirectoryNotIsReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDirectoryNotIsWritable","contents":"assertDirectoryNotIsWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertDoesNotMatchRegularExpression","contents":"assertDoesNotMatchRegularExpression(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertEmpty","contents":"assertEmpty(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertEquals","contents":"assertEquals(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertEqualsCanonicalizing","contents":"assertEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertEqualsIgnoringCase","contents":"assertEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertEqualsWithDelta","contents":"assertEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertEqualXMLStructure","contents":"assertEqualXMLStructure(${1:DOMElement:expectedElement}, ${2:DOMElement:actualElement});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFalse","contents":"assertFalse(${1:condition});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileDoesNotExist","contents":"assertFileDoesNotExist(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileEquals","contents":"assertFileEquals(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileEqualsCanonicalizing","contents":"assertFileEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileEqualsIgnoringCase","contents":"assertFileEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileExists","contents":"assertFileExists(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileIsNotReadable","contents":"assertFileIsNotReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileIsNotWritable","contents":"assertFileIsNotWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileIsReadable","contents":"assertFileIsReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileIsWritable","contents":"assertFileIsWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileNotEquals","contents":"assertFileNotEquals(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileNotEqualsCanonicalizing","contents":"assertFileNotEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileNotEqualsIgnoringCase","contents":"assertFileNotEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileNotExists","contents":"assertFileNotExists(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileNotIsReadable","contents":"assertFileNotIsReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFileNotIsWritable","contents":"assertFileNotIsWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertFinite","contents":"assertFinite(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertGreaterThan","contents":"assertGreaterThan(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertGreaterThanOrEqual","contents":"assertGreaterThanOrEqual(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertInfinite","contents":"assertInfinite(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertInstanceOf","contents":"assertInstanceOf(${1:string:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsArray","contents":"assertIsArray(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsBool","contents":"assertIsBool(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsCallable","contents":"assertIsCallable(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsClosedResource","contents":"assertIsClosedResource(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsFloat","contents":"assertIsFloat(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsInt","contents":"assertIsInt(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsIterable","contents":"assertIsIterable(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotArray","contents":"assertIsNotArray(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotBool","contents":"assertIsNotBool(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotCallable","contents":"assertIsNotCallable(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotClosedResource","contents":"assertIsNotClosedResource(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotFloat","contents":"assertIsNotFloat(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotInt","contents":"assertIsNotInt(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotIterable","contents":"assertIsNotIterable(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotNumeric","contents":"assertIsNotNumeric(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotObject","contents":"assertIsNotObject(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotReadable","contents":"assertIsNotReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotResource","contents":"assertIsNotResource(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotScalar","contents":"assertIsNotScalar(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotString","contents":"assertIsNotString(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNotWritable","contents":"assertIsNotWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsNumeric","contents":"assertIsNumeric(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsObject","contents":"assertIsObject(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsReadable","contents":"assertIsReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsResource","contents":"assertIsResource(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsScalar","contents":"assertIsScalar(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsString","contents":"assertIsString(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertIsWritable","contents":"assertIsWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJson","contents":"assertJson(${1:string:actualJson});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"assertJsonFileEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"assertJsonFileNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"assertJsonStringEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"assertJsonStringEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"assertJsonStringNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertLessThan","contents":"assertLessThan(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertLessThanOrEqual","contents":"assertLessThanOrEqual(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertMatchesRegularExpression","contents":"assertMatchesRegularExpression(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNan","contents":"assertNan(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotContains","contents":"assertNotContains(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotContainsEquals","contents":"assertNotContainsEquals(${1:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotContainsOnly","contents":"assertNotContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotCount","contents":"assertNotCount(${1:int:expectedCount}, ${2:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotEmpty","contents":"assertNotEmpty(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotEquals","contents":"assertNotEquals(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotEqualsCanonicalizing","contents":"assertNotEqualsCanonicalizing(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotEqualsIgnoringCase","contents":"assertNotEqualsIgnoringCase(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotEqualsWithDelta","contents":"assertNotEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotFalse","contents":"assertNotFalse(${1:condition});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotInstanceOf","contents":"assertNotInstanceOf(${1:string:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotIsReadable","contents":"assertNotIsReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotIsWritable","contents":"assertNotIsWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotNull","contents":"assertNotNull(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotRegExp","contents":"assertNotRegExp(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotSame","contents":"assertNotSame(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotSameSize","contents":"assertNotSameSize(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNotTrue","contents":"assertNotTrue(${1:condition});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertNull","contents":"assertNull(${1:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertObjectEquals","contents":"assertObjectEquals(${1:object:expected}, ${2:object:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertObjectHasAttribute","contents":"assertObjectHasAttribute(${1:string:attributeName}, ${2:object});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertObjectNotHasAttribute","contents":"assertObjectNotHasAttribute(${1:string:attributeName}, ${2:object});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertRegExp","contents":"assertRegExp(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertSame","contents":"assertSame(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertSameSize","contents":"assertSameSize(${1:expected}, ${2:actual});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringContainsString","contents":"assertStringContainsString(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringContainsStringIgnoringCase","contents":"assertStringContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringEndsNotWith","contents":"assertStringEndsNotWith(${1:string:suffix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringEndsWith","contents":"assertStringEndsWith(${1:string:suffix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringEqualsFile","contents":"assertStringEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringEqualsFileCanonicalizing","contents":"assertStringEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringEqualsFileIgnoringCase","contents":"assertStringEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringMatchesFormat","contents":"assertStringMatchesFormat(${1:string:format}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringMatchesFormatFile","contents":"assertStringMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotContainsString","contents":"assertStringNotContainsString(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotContainsStringIgnoringCase","contents":"assertStringNotContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotEqualsFile","contents":"assertStringNotEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotEqualsFileCanonicalizing","contents":"assertStringNotEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotEqualsFileIgnoringCase","contents":"assertStringNotEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotMatchesFormat","contents":"assertStringNotMatchesFormat(${1:string:format}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"assertStringNotMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringStartsNotWith","contents":"assertStringStartsNotWith(${1:prefix}, ${2:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertStringStartsWith","contents":"assertStringStartsWith(${1:string:prefix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertThat","contents":"assertThat(${1:value}, ${2:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertTrue","contents":"assertTrue(${1:condition});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"assertXmlFileEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"assertXmlFileNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"assertXmlStringEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"assertXmlStringNotEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"at","contents":"at(${1:int:index});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"atLeast","contents":"atLeast(${1:int:requiredInvocations});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"atLeastOnce","contents":"atLeastOnce();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"atMost","contents":"atMost(${1:int:allowedInvocations});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"callback","contents":"callback(${1:callable:callback});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"classHasAttribute","contents":"classHasAttribute(${1:string:attributeName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"classHasStaticAttribute","contents":"classHasStaticAttribute(${1:string:attributeName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"containsEqual","contents":"containsEqual(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"containsIdentical","contents":"containsIdentical(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"containsOnly","contents":"containsOnly(${1:string:type});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"containsOnlyInstancesOf","contents":"containsOnlyInstancesOf(${1:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"countOf","contents":"countOf(${1:int:count});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"createConfiguredMock","contents":"createConfiguredMock(${1:string:originalClassName}, ${2:array:configuration});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"createMock","contents":"createMock(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"createPartialMock","contents":"createPartialMock(${1:string:originalClassName}, ${2:array:methods});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"createStub","contents":"createStub(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"createTestProxy","contents":"createTestProxy(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"directoryExists","contents":"directoryExists();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"equalTo","contents":"equalTo(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"equalToCanonicalizing","contents":"equalToCanonicalizing(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"equalToIgnoringCase","contents":"equalToIgnoringCase(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"equalToWithDelta","contents":"equalToWithDelta(${1:value}, ${2:float:delta});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"exactly","contents":"exactly(${1:int:count});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectDeprecation","contents":"expectDeprecation();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectDeprecationMessage","contents":"expectDeprecationMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectDeprecationMessageMatches","contents":"expectDeprecationMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectError","contents":"expectError();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectErrorMessage","contents":"expectErrorMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectErrorMessageMatches","contents":"expectErrorMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectException","contents":"expectException(${1:string:exception});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectExceptionCode","contents":"expectExceptionCode(${1:code});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectExceptionMessage","contents":"expectExceptionMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectExceptionMessageMatches","contents":"expectExceptionMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectExceptionObject","contents":"expectExceptionObject(${1:Exception:exception});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectNotice","contents":"expectNotice();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectNoticeMessage","contents":"expectNoticeMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectNoticeMessageMatches","contents":"expectNoticeMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectNotToPerformAssertions","contents":"expectNotToPerformAssertions();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectOutputRegex","contents":"expectOutputRegex(${1:string:expectedRegex});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectOutputString","contents":"expectOutputString(${1:string:expectedString});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectWarning","contents":"expectWarning();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectWarningMessage","contents":"expectWarningMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"expectWarningMessageMatches","contents":"expectWarningMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"fail","contents":"fail($1);","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"fileExists","contents":"fileExists();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getExpectedException","contents":"getExpectedException();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getExpectedExceptionCode","contents":"getExpectedExceptionCode();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getExpectedExceptionMessage","contents":"getExpectedExceptionMessage();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getExpectedExceptionMessageRegExp","contents":"getExpectedExceptionMessageRegExp();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getMockBuilder","contents":"getMockBuilder(${1:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getMockClass","contents":"getMockClass(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getMockForAbstractClass","contents":"getMockForAbstractClass(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getMockForTrait","contents":"getMockForTrait(${1:string:traitName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"getMockFromWsdl","contents":"getMockFromWsdl(${1:string:wsdlFile});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"greaterThan","contents":"greaterThan(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"greaterThanOrEqual","contents":"greaterThanOrEqual(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"identicalTo","contents":"identicalTo(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isEmpty","contents":"isEmpty();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isFalse","contents":"isFalse();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isFinite","contents":"isFinite();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isInfinite","contents":"isInfinite();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isInIsolation","contents":"isInIsolation();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isInstanceOf","contents":"isInstanceOf(${1:string:className});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isJson","contents":"isJson();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isLarge","contents":"isLarge();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isMedium","contents":"isMedium();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isNan","contents":"isNan();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isNull","contents":"isNull();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isReadable","contents":"isReadable();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isSmall","contents":"isSmall();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isTrue","contents":"isTrue();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isType","contents":"isType(${1:string:type});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"isWritable","contents":"isWritable();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"lessThan","contents":"lessThan(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"lessThanOrEqual","contents":"lessThanOrEqual(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"logicalAnd","contents":"logicalAnd();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"logicalNot","contents":"logicalNot(${1:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"logicalOr","contents":"logicalOr();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"logicalXor","contents":"logicalXor();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"markAsRisky","contents":"markAsRisky();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"markTestIncomplete","contents":"markTestIncomplete($1);","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"markTestSkipped","contents":"markTestSkipped($1);","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"matches","contents":"matches(${1:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"matchesRegularExpression","contents":"matchesRegularExpression(${1:string:pattern});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"never","contents":"never();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"objectEquals","contents":"objectEquals(${1:object:object});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"objectHasAttribute","contents":"objectHasAttribute(${1:attributeName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"once","contents":"once();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"onConsecutiveCalls","contents":"onConsecutiveCalls($1);","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"provides","contents":"provides();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"recordDoubledType","contents":"recordDoubledType(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"requires","contents":"requires();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"returnArgument","contents":"returnArgument(${1:int:argumentIndex});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"returnCallback","contents":"returnCallback(${1:callback});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"returnSelf","contents":"returnSelf();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"returnValue","contents":"returnValue(${1:value});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"returnValueMap","contents":"returnValueMap(${1:array:valueMap});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"setOutputCallback","contents":"setOutputCallback(${1:callable:callback});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"sortId","contents":"sortId();","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"stringContains","contents":"stringContains(${1:string:string});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"stringEndsWith","contents":"stringEndsWith(${1:string:suffix});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"stringStartsWith","contents":"stringStartsWith(${1:prefix});","kind":["function","m","Method"],"annotation":"PHPUnit"},
        {"trigger":"throwException","contents":"throwException(${1:Throwable:exception});","kind":["function","m","Method"],"annotation":"PHPUnit"}
    ]
}
