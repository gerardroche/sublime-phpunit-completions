{
    // scope:
    //
    // source.php meta.function-call-object
    // source.php variable.other.member
    // source.php variable.other.property

    "scope": "source.php meta.function-call-object, source.php variable.other.member, source.php variable.other.property",
    "completions": [
        {"trigger":"any","contents":"any();","kind":["function","m","Method"],"annotation":"any(): PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount","details":"any(): PHPUnit\\Framework\\MockObject\\Rule\\AnyInvokedCount"},
        {"trigger":"anything","contents":"anything();","kind":["function","m","Method"],"annotation":"anything(): PHPUnit\\Framework\\Constraint\\IsAnything","details":"anything(): PHPUnit\\Framework\\Constraint\\IsAnything"},
        {"trigger":"arrayHasKey","contents":"arrayHasKey(${1:string|int:key});","kind":["function","m","Method"],"annotation":"arrayHasKey(string|int $key): PHPUnit\\Framework\\Constraint\\ArrayHasKey","details":"arrayHasKey(string|int $key): PHPUnit\\Framework\\Constraint\\ArrayHasKey"},
        {"trigger":"assertArrayHasKey","contents":"assertArrayHasKey(${1:string|int:key}, ${2:ArrayAccess|array:array});","kind":["function","m","Method"],"annotation":"assertArrayHasKey(string|int $key, ArrayAccess|array $array): void","details":"assertArrayHasKey(string|int $key, ArrayAccess|array $array): void"},
        {"trigger":"assertArrayNotHasKey","contents":"assertArrayNotHasKey(${1:string|int:key}, ${2:ArrayAccess|array:array});","kind":["function","m","Method"],"annotation":"assertArrayNotHasKey(string|int $key, ArrayAccess|array $array): void","details":"assertArrayNotHasKey(string|int $key, ArrayAccess|array $array): void"},
        {"trigger":"assertContains","contents":"assertContains(${1:mixed:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContains(mixed $needle, iterable $haystack): void","details":"assertContains(mixed $needle, iterable $haystack): void"},
        {"trigger":"assertContainsEquals","contents":"assertContainsEquals(${1:mixed:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContainsEquals(mixed $needle, iterable $haystack): void","details":"assertContainsEquals(mixed $needle, iterable $haystack): void"},
        {"trigger":"assertContainsOnly","contents":"assertContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContainsOnly(string $type, iterable $haystack): void","details":"assertContainsOnly(string $type, iterable $haystack): void"},
        {"trigger":"assertContainsOnlyInstancesOf","contents":"assertContainsOnlyInstancesOf(${1:string:className}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertContainsOnlyInstancesOf(string $className, iterable $haystack): void","details":"assertContainsOnlyInstancesOf(string $className, iterable $haystack): void"},
        {"trigger":"assertCount","contents":"assertCount(${1:int:expectedCount}, ${2:Countable|Traversable|array:haystack});","kind":["function","m","Method"],"annotation":"assertCount(int $expectedCount, Countable|Traversable|array $haystack): void","details":"assertCount(int $expectedCount, Countable|Traversable|array $haystack): void"},
        {"trigger":"assertDirectoryDoesNotExist","contents":"assertDirectoryDoesNotExist(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryDoesNotExist(string $directory): void","details":"assertDirectoryDoesNotExist(string $directory): void"},
        {"trigger":"assertDirectoryExists","contents":"assertDirectoryExists(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryExists(string $directory): void","details":"assertDirectoryExists(string $directory): void"},
        {"trigger":"assertDirectoryIsNotReadable","contents":"assertDirectoryIsNotReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsNotReadable(string $directory): void","details":"assertDirectoryIsNotReadable(string $directory): void"},
        {"trigger":"assertDirectoryIsNotWritable","contents":"assertDirectoryIsNotWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsNotWritable(string $directory): void","details":"assertDirectoryIsNotWritable(string $directory): void"},
        {"trigger":"assertDirectoryIsReadable","contents":"assertDirectoryIsReadable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsReadable(string $directory): void","details":"assertDirectoryIsReadable(string $directory): void"},
        {"trigger":"assertDirectoryIsWritable","contents":"assertDirectoryIsWritable(${1:string:directory});","kind":["function","m","Method"],"annotation":"assertDirectoryIsWritable(string $directory): void","details":"assertDirectoryIsWritable(string $directory): void"},
        {"trigger":"assertDoesNotMatchRegularExpression","contents":"assertDoesNotMatchRegularExpression(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertDoesNotMatchRegularExpression(string $pattern, string $string): void","details":"assertDoesNotMatchRegularExpression(string $pattern, string $string): void"},
        {"trigger":"assertEmpty","contents":"assertEmpty(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertEmpty(mixed $actual): void","details":"assertEmpty(mixed $actual): void"},
        {"trigger":"assertEquals","contents":"assertEquals(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertEquals(mixed $expected, mixed $actual): void","details":"assertEquals(mixed $expected, mixed $actual): void"},
        {"trigger":"assertEqualsCanonicalizing","contents":"assertEqualsCanonicalizing(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertEqualsCanonicalizing(mixed $expected, mixed $actual): void","details":"assertEqualsCanonicalizing(mixed $expected, mixed $actual): void"},
        {"trigger":"assertEqualsIgnoringCase","contents":"assertEqualsIgnoringCase(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertEqualsIgnoringCase(mixed $expected, mixed $actual): void","details":"assertEqualsIgnoringCase(mixed $expected, mixed $actual): void"},
        {"trigger":"assertEqualsWithDelta","contents":"assertEqualsWithDelta(${1:mixed:expected}, ${2:mixed:actual}, ${3:float:delta});","kind":["function","m","Method"],"annotation":"assertEqualsWithDelta(mixed $expected, mixed $actual, float $delta): void","details":"assertEqualsWithDelta(mixed $expected, mixed $actual, float $delta): void"},
        {"trigger":"assertFalse","contents":"assertFalse(${1:mixed:condition});","kind":["function","m","Method"],"annotation":"assertFalse(mixed $condition): void","details":"assertFalse(mixed $condition): void"},
        {"trigger":"assertFileDoesNotExist","contents":"assertFileDoesNotExist(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertFileDoesNotExist(string $filename): void","details":"assertFileDoesNotExist(string $filename): void"},
        {"trigger":"assertFileEquals","contents":"assertFileEquals(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileEquals(string $expected, string $actual): void","details":"assertFileEquals(string $expected, string $actual): void"},
        {"trigger":"assertFileEqualsCanonicalizing","contents":"assertFileEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileEqualsCanonicalizing(string $expected, string $actual): void","details":"assertFileEqualsCanonicalizing(string $expected, string $actual): void"},
        {"trigger":"assertFileEqualsIgnoringCase","contents":"assertFileEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileEqualsIgnoringCase(string $expected, string $actual): void","details":"assertFileEqualsIgnoringCase(string $expected, string $actual): void"},
        {"trigger":"assertFileExists","contents":"assertFileExists(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertFileExists(string $filename): void","details":"assertFileExists(string $filename): void"},
        {"trigger":"assertFileIsNotReadable","contents":"assertFileIsNotReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsNotReadable(string $file): void","details":"assertFileIsNotReadable(string $file): void"},
        {"trigger":"assertFileIsNotWritable","contents":"assertFileIsNotWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsNotWritable(string $file): void","details":"assertFileIsNotWritable(string $file): void"},
        {"trigger":"assertFileIsReadable","contents":"assertFileIsReadable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsReadable(string $file): void","details":"assertFileIsReadable(string $file): void"},
        {"trigger":"assertFileIsWritable","contents":"assertFileIsWritable(${1:string:file});","kind":["function","m","Method"],"annotation":"assertFileIsWritable(string $file): void","details":"assertFileIsWritable(string $file): void"},
        {"trigger":"assertFileNotEquals","contents":"assertFileNotEquals(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileNotEquals(string $expected, string $actual): void","details":"assertFileNotEquals(string $expected, string $actual): void"},
        {"trigger":"assertFileNotEqualsCanonicalizing","contents":"assertFileNotEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileNotEqualsCanonicalizing(string $expected, string $actual): void","details":"assertFileNotEqualsCanonicalizing(string $expected, string $actual): void"},
        {"trigger":"assertFileNotEqualsIgnoringCase","contents":"assertFileNotEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertFileNotEqualsIgnoringCase(string $expected, string $actual): void","details":"assertFileNotEqualsIgnoringCase(string $expected, string $actual): void"},
        {"trigger":"assertFinite","contents":"assertFinite(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertFinite(mixed $actual): void","details":"assertFinite(mixed $actual): void"},
        {"trigger":"assertGreaterThan","contents":"assertGreaterThan(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertGreaterThan(mixed $expected, mixed $actual): void","details":"assertGreaterThan(mixed $expected, mixed $actual): void"},
        {"trigger":"assertGreaterThanOrEqual","contents":"assertGreaterThanOrEqual(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertGreaterThanOrEqual(mixed $expected, mixed $actual): void","details":"assertGreaterThanOrEqual(mixed $expected, mixed $actual): void"},
        {"trigger":"assertInfinite","contents":"assertInfinite(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertInfinite(mixed $actual): void","details":"assertInfinite(mixed $actual): void"},
        {"trigger":"assertInstanceOf","contents":"assertInstanceOf(${1:string:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertInstanceOf(string $expected, mixed $actual): void","details":"assertInstanceOf(string $expected, mixed $actual): void"},
        {"trigger":"assertIsArray","contents":"assertIsArray(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsArray(mixed $actual): void","details":"assertIsArray(mixed $actual): void"},
        {"trigger":"assertIsBool","contents":"assertIsBool(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsBool(mixed $actual): void","details":"assertIsBool(mixed $actual): void"},
        {"trigger":"assertIsCallable","contents":"assertIsCallable(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsCallable(mixed $actual): void","details":"assertIsCallable(mixed $actual): void"},
        {"trigger":"assertIsClosedResource","contents":"assertIsClosedResource(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsClosedResource(mixed $actual): void","details":"assertIsClosedResource(mixed $actual): void"},
        {"trigger":"assertIsFloat","contents":"assertIsFloat(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsFloat(mixed $actual): void","details":"assertIsFloat(mixed $actual): void"},
        {"trigger":"assertIsInt","contents":"assertIsInt(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsInt(mixed $actual): void","details":"assertIsInt(mixed $actual): void"},
        {"trigger":"assertIsIterable","contents":"assertIsIterable(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsIterable(mixed $actual): void","details":"assertIsIterable(mixed $actual): void"},
        {"trigger":"assertIsList","contents":"assertIsList(${1:mixed:array});","kind":["function","m","Method"],"annotation":"assertIsList(mixed $array): void","details":"assertIsList(mixed $array): void"},
        {"trigger":"assertIsNotArray","contents":"assertIsNotArray(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotArray(mixed $actual): void","details":"assertIsNotArray(mixed $actual): void"},
        {"trigger":"assertIsNotBool","contents":"assertIsNotBool(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotBool(mixed $actual): void","details":"assertIsNotBool(mixed $actual): void"},
        {"trigger":"assertIsNotCallable","contents":"assertIsNotCallable(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotCallable(mixed $actual): void","details":"assertIsNotCallable(mixed $actual): void"},
        {"trigger":"assertIsNotClosedResource","contents":"assertIsNotClosedResource(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotClosedResource(mixed $actual): void","details":"assertIsNotClosedResource(mixed $actual): void"},
        {"trigger":"assertIsNotFloat","contents":"assertIsNotFloat(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotFloat(mixed $actual): void","details":"assertIsNotFloat(mixed $actual): void"},
        {"trigger":"assertIsNotInt","contents":"assertIsNotInt(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotInt(mixed $actual): void","details":"assertIsNotInt(mixed $actual): void"},
        {"trigger":"assertIsNotIterable","contents":"assertIsNotIterable(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotIterable(mixed $actual): void","details":"assertIsNotIterable(mixed $actual): void"},
        {"trigger":"assertIsNotNumeric","contents":"assertIsNotNumeric(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotNumeric(mixed $actual): void","details":"assertIsNotNumeric(mixed $actual): void"},
        {"trigger":"assertIsNotObject","contents":"assertIsNotObject(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotObject(mixed $actual): void","details":"assertIsNotObject(mixed $actual): void"},
        {"trigger":"assertIsNotReadable","contents":"assertIsNotReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsNotReadable(string $filename): void","details":"assertIsNotReadable(string $filename): void"},
        {"trigger":"assertIsNotResource","contents":"assertIsNotResource(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotResource(mixed $actual): void","details":"assertIsNotResource(mixed $actual): void"},
        {"trigger":"assertIsNotScalar","contents":"assertIsNotScalar(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotScalar(mixed $actual): void","details":"assertIsNotScalar(mixed $actual): void"},
        {"trigger":"assertIsNotString","contents":"assertIsNotString(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNotString(mixed $actual): void","details":"assertIsNotString(mixed $actual): void"},
        {"trigger":"assertIsNotWritable","contents":"assertIsNotWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsNotWritable(string $filename): void","details":"assertIsNotWritable(string $filename): void"},
        {"trigger":"assertIsNumeric","contents":"assertIsNumeric(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsNumeric(mixed $actual): void","details":"assertIsNumeric(mixed $actual): void"},
        {"trigger":"assertIsObject","contents":"assertIsObject(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsObject(mixed $actual): void","details":"assertIsObject(mixed $actual): void"},
        {"trigger":"assertIsReadable","contents":"assertIsReadable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsReadable(string $filename): void","details":"assertIsReadable(string $filename): void"},
        {"trigger":"assertIsResource","contents":"assertIsResource(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsResource(mixed $actual): void","details":"assertIsResource(mixed $actual): void"},
        {"trigger":"assertIsScalar","contents":"assertIsScalar(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsScalar(mixed $actual): void","details":"assertIsScalar(mixed $actual): void"},
        {"trigger":"assertIsString","contents":"assertIsString(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertIsString(mixed $actual): void","details":"assertIsString(mixed $actual): void"},
        {"trigger":"assertIsWritable","contents":"assertIsWritable(${1:string:filename});","kind":["function","m","Method"],"annotation":"assertIsWritable(string $filename): void","details":"assertIsWritable(string $filename): void"},
        {"trigger":"assertJson","contents":"assertJson(${1:string:actual});","kind":["function","m","Method"],"annotation":"assertJson(string $actual): void","details":"assertJson(string $actual): void"},
        {"trigger":"assertJsonFileEqualsJsonFile","contents":"assertJsonFileEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile): void","details":"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertJsonFileNotEqualsJsonFile","contents":"assertJsonFileNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile): void","details":"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertJsonStringEqualsJsonFile","contents":"assertJsonStringEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson): void","details":"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson): void"},
        {"trigger":"assertJsonStringEqualsJsonString","contents":"assertJsonStringEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson): void","details":"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson): void"},
        {"trigger":"assertJsonStringNotEqualsJsonFile","contents":"assertJsonStringNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson): void","details":"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson): void"},
        {"trigger":"assertJsonStringNotEqualsJsonString","contents":"assertJsonStringNotEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});","kind":["function","m","Method"],"annotation":"assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson): void","details":"assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson): void"},
        {"trigger":"assertLessThan","contents":"assertLessThan(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertLessThan(mixed $expected, mixed $actual): void","details":"assertLessThan(mixed $expected, mixed $actual): void"},
        {"trigger":"assertLessThanOrEqual","contents":"assertLessThanOrEqual(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertLessThanOrEqual(mixed $expected, mixed $actual): void","details":"assertLessThanOrEqual(mixed $expected, mixed $actual): void"},
        {"trigger":"assertMatchesRegularExpression","contents":"assertMatchesRegularExpression(${1:string:pattern}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertMatchesRegularExpression(string $pattern, string $string): void","details":"assertMatchesRegularExpression(string $pattern, string $string): void"},
        {"trigger":"assertNan","contents":"assertNan(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNan(mixed $actual): void","details":"assertNan(mixed $actual): void"},
        {"trigger":"assertNotContains","contents":"assertNotContains(${1:mixed:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertNotContains(mixed $needle, iterable $haystack): void","details":"assertNotContains(mixed $needle, iterable $haystack): void"},
        {"trigger":"assertNotContainsEquals","contents":"assertNotContainsEquals(${1:mixed:needle}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertNotContainsEquals(mixed $needle, iterable $haystack): void","details":"assertNotContainsEquals(mixed $needle, iterable $haystack): void"},
        {"trigger":"assertNotContainsOnly","contents":"assertNotContainsOnly(${1:string:type}, ${2:iterable:haystack});","kind":["function","m","Method"],"annotation":"assertNotContainsOnly(string $type, iterable $haystack): void","details":"assertNotContainsOnly(string $type, iterable $haystack): void"},
        {"trigger":"assertNotCount","contents":"assertNotCount(${1:int:expectedCount}, ${2:Countable|Traversable|array:haystack});","kind":["function","m","Method"],"annotation":"assertNotCount(int $expectedCount, Countable|Traversable|array $haystack): void","details":"assertNotCount(int $expectedCount, Countable|Traversable|array $haystack): void"},
        {"trigger":"assertNotEmpty","contents":"assertNotEmpty(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotEmpty(mixed $actual): void","details":"assertNotEmpty(mixed $actual): void"},
        {"trigger":"assertNotEquals","contents":"assertNotEquals(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotEquals(mixed $expected, mixed $actual): void","details":"assertNotEquals(mixed $expected, mixed $actual): void"},
        {"trigger":"assertNotEqualsCanonicalizing","contents":"assertNotEqualsCanonicalizing(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotEqualsCanonicalizing(mixed $expected, mixed $actual): void","details":"assertNotEqualsCanonicalizing(mixed $expected, mixed $actual): void"},
        {"trigger":"assertNotEqualsIgnoringCase","contents":"assertNotEqualsIgnoringCase(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotEqualsIgnoringCase(mixed $expected, mixed $actual): void","details":"assertNotEqualsIgnoringCase(mixed $expected, mixed $actual): void"},
        {"trigger":"assertNotEqualsWithDelta","contents":"assertNotEqualsWithDelta(${1:mixed:expected}, ${2:mixed:actual}, ${3:float:delta});","kind":["function","m","Method"],"annotation":"assertNotEqualsWithDelta(mixed $expected, mixed $actual, float $delta): void","details":"assertNotEqualsWithDelta(mixed $expected, mixed $actual, float $delta): void"},
        {"trigger":"assertNotFalse","contents":"assertNotFalse(${1:mixed:condition});","kind":["function","m","Method"],"annotation":"assertNotFalse(mixed $condition): void","details":"assertNotFalse(mixed $condition): void"},
        {"trigger":"assertNotInstanceOf","contents":"assertNotInstanceOf(${1:string:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotInstanceOf(string $expected, mixed $actual): void","details":"assertNotInstanceOf(string $expected, mixed $actual): void"},
        {"trigger":"assertNotNull","contents":"assertNotNull(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotNull(mixed $actual): void","details":"assertNotNull(mixed $actual): void"},
        {"trigger":"assertNotSame","contents":"assertNotSame(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNotSame(mixed $expected, mixed $actual): void","details":"assertNotSame(mixed $expected, mixed $actual): void"},
        {"trigger":"assertNotSameSize","contents":"assertNotSameSize(${1:Countable|Traversable|array:expected}, ${2:Countable|Traversable|array:actual});","kind":["function","m","Method"],"annotation":"assertNotSameSize(Countable|Traversable|array $expected, Countable|Traversable|array $actual): void","details":"assertNotSameSize(Countable|Traversable|array $expected, Countable|Traversable|array $actual): void"},
        {"trigger":"assertNotTrue","contents":"assertNotTrue(${1:mixed:condition});","kind":["function","m","Method"],"annotation":"assertNotTrue(mixed $condition): void","details":"assertNotTrue(mixed $condition): void"},
        {"trigger":"assertNull","contents":"assertNull(${1:mixed:actual});","kind":["function","m","Method"],"annotation":"assertNull(mixed $actual): void","details":"assertNull(mixed $actual): void"},
        {"trigger":"assertObjectEquals","contents":"assertObjectEquals(${1:object:expected}, ${2:object:actual});","kind":["function","m","Method"],"annotation":"assertObjectEquals(object $expected, object $actual): void","details":"assertObjectEquals(object $expected, object $actual): void"},
        {"trigger":"assertObjectHasProperty","contents":"assertObjectHasProperty(${1:string:propertyName}, ${2:object:object});","kind":["function","m","Method"],"annotation":"assertObjectHasProperty(string $propertyName, object $object): void","details":"assertObjectHasProperty(string $propertyName, object $object): void"},
        {"trigger":"assertObjectNotHasProperty","contents":"assertObjectNotHasProperty(${1:string:propertyName}, ${2:object:object});","kind":["function","m","Method"],"annotation":"assertObjectNotHasProperty(string $propertyName, object $object): void","details":"assertObjectNotHasProperty(string $propertyName, object $object): void"},
        {"trigger":"assertSame","contents":"assertSame(${1:mixed:expected}, ${2:mixed:actual});","kind":["function","m","Method"],"annotation":"assertSame(mixed $expected, mixed $actual): void","details":"assertSame(mixed $expected, mixed $actual): void"},
        {"trigger":"assertSameSize","contents":"assertSameSize(${1:Countable|Traversable|array:expected}, ${2:Countable|Traversable|array:actual});","kind":["function","m","Method"],"annotation":"assertSameSize(Countable|Traversable|array $expected, Countable|Traversable|array $actual): void","details":"assertSameSize(Countable|Traversable|array $expected, Countable|Traversable|array $actual): void"},
        {"trigger":"assertStringContainsString","contents":"assertStringContainsString(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringContainsString(string $needle, string $haystack): void","details":"assertStringContainsString(string $needle, string $haystack): void"},
        {"trigger":"assertStringContainsStringIgnoringCase","contents":"assertStringContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringContainsStringIgnoringCase(string $needle, string $haystack): void","details":"assertStringContainsStringIgnoringCase(string $needle, string $haystack): void"},
        {"trigger":"assertStringContainsStringIgnoringLineEndings","contents":"assertStringContainsStringIgnoringLineEndings(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringContainsStringIgnoringLineEndings(string $needle, string $haystack): void","details":"assertStringContainsStringIgnoringLineEndings(string $needle, string $haystack): void"},
        {"trigger":"assertStringEndsNotWith","contents":"assertStringEndsNotWith(${1:string:suffix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringEndsNotWith(string $suffix, string $string): void","details":"assertStringEndsNotWith(string $suffix, string $string): void"},
        {"trigger":"assertStringEndsWith","contents":"assertStringEndsWith(${1:string:suffix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringEndsWith(string $suffix, string $string): void","details":"assertStringEndsWith(string $suffix, string $string): void"},
        {"trigger":"assertStringEqualsFile","contents":"assertStringEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringEqualsFile(string $expectedFile, string $actualString): void","details":"assertStringEqualsFile(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringEqualsFileCanonicalizing","contents":"assertStringEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString): void","details":"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringEqualsFileIgnoringCase","contents":"assertStringEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString): void","details":"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringEqualsStringIgnoringLineEndings","contents":"assertStringEqualsStringIgnoringLineEndings(${1:string:expected}, ${2:string:actual});","kind":["function","m","Method"],"annotation":"assertStringEqualsStringIgnoringLineEndings(string $expected, string $actual): void","details":"assertStringEqualsStringIgnoringLineEndings(string $expected, string $actual): void"},
        {"trigger":"assertStringMatchesFormat","contents":"assertStringMatchesFormat(${1:string:format}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringMatchesFormat(string $format, string $string): void","details":"assertStringMatchesFormat(string $format, string $string): void"},
        {"trigger":"assertStringMatchesFormatFile","contents":"assertStringMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringMatchesFormatFile(string $formatFile, string $string): void","details":"assertStringMatchesFormatFile(string $formatFile, string $string): void"},
        {"trigger":"assertStringNotContainsString","contents":"assertStringNotContainsString(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringNotContainsString(string $needle, string $haystack): void","details":"assertStringNotContainsString(string $needle, string $haystack): void"},
        {"trigger":"assertStringNotContainsStringIgnoringCase","contents":"assertStringNotContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});","kind":["function","m","Method"],"annotation":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack): void","details":"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack): void"},
        {"trigger":"assertStringNotEqualsFile","contents":"assertStringNotEqualsFile(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringNotEqualsFile(string $expectedFile, string $actualString): void","details":"assertStringNotEqualsFile(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringNotEqualsFileCanonicalizing","contents":"assertStringNotEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString): void","details":"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringNotEqualsFileIgnoringCase","contents":"assertStringNotEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});","kind":["function","m","Method"],"annotation":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString): void","details":"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString): void"},
        {"trigger":"assertStringNotMatchesFormat","contents":"assertStringNotMatchesFormat(${1:string:format}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringNotMatchesFormat(string $format, string $string): void","details":"assertStringNotMatchesFormat(string $format, string $string): void"},
        {"trigger":"assertStringNotMatchesFormatFile","contents":"assertStringNotMatchesFormatFile(${1:string:formatFile}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringNotMatchesFormatFile(string $formatFile, string $string): void","details":"assertStringNotMatchesFormatFile(string $formatFile, string $string): void"},
        {"trigger":"assertStringStartsNotWith","contents":"assertStringStartsNotWith(${1:string:prefix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringStartsNotWith(string $prefix, string $string): void","details":"assertStringStartsNotWith(string $prefix, string $string): void"},
        {"trigger":"assertStringStartsWith","contents":"assertStringStartsWith(${1:string:prefix}, ${2:string:string});","kind":["function","m","Method"],"annotation":"assertStringStartsWith(string $prefix, string $string): void","details":"assertStringStartsWith(string $prefix, string $string): void"},
        {"trigger":"assertThat","contents":"assertThat(${1:mixed:value}, ${2:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":["function","m","Method"],"annotation":"assertThat(mixed $value, PHPUnit\\Framework\\Constraint\\Constraint $constraint): void","details":"assertThat(mixed $value, PHPUnit\\Framework\\Constraint\\Constraint $constraint): void"},
        {"trigger":"assertTrue","contents":"assertTrue(${1:mixed:condition});","kind":["function","m","Method"],"annotation":"assertTrue(mixed $condition): void","details":"assertTrue(mixed $condition): void"},
        {"trigger":"assertXmlFileEqualsXmlFile","contents":"assertXmlFileEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile): void","details":"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertXmlFileNotEqualsXmlFile","contents":"assertXmlFileNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});","kind":["function","m","Method"],"annotation":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile): void","details":"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile): void"},
        {"trigger":"assertXmlStringEqualsXmlFile","contents":"assertXmlStringEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml): void","details":"assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml): void"},
        {"trigger":"assertXmlStringEqualsXmlString","contents":"assertXmlStringEqualsXmlString(${1:string:expectedXml}, ${2:string:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml): void","details":"assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml): void"},
        {"trigger":"assertXmlStringNotEqualsXmlFile","contents":"assertXmlStringNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml): void","details":"assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml): void"},
        {"trigger":"assertXmlStringNotEqualsXmlString","contents":"assertXmlStringNotEqualsXmlString(${1:string:expectedXml}, ${2:string:actualXml});","kind":["function","m","Method"],"annotation":"assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml): void","details":"assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml): void"},
        {"trigger":"atLeast","contents":"atLeast(${1:int:requiredInvocations});","kind":["function","m","Method"],"annotation":"atLeast(int $requiredInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount","details":"atLeast(int $requiredInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastCount"},
        {"trigger":"atLeastOnce","contents":"atLeastOnce();","kind":["function","m","Method"],"annotation":"atLeastOnce(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce","details":"atLeastOnce(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtLeastOnce"},
        {"trigger":"atMost","contents":"atMost(${1:int:allowedInvocations});","kind":["function","m","Method"],"annotation":"atMost(int $allowedInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount","details":"atMost(int $allowedInvocations): PHPUnit\\Framework\\MockObject\\Rule\\InvokedAtMostCount"},
        {"trigger":"callback","contents":"callback(${1:callable:callback});","kind":["function","m","Method"],"annotation":"callback(callable $callback): PHPUnit\\Framework\\Constraint\\Callback","details":"callback(callable $callback): PHPUnit\\Framework\\Constraint\\Callback"},
        {"trigger":"containsEqual","contents":"containsEqual(${1:mixed:value});","kind":["function","m","Method"],"annotation":"containsEqual(mixed $value): PHPUnit\\Framework\\Constraint\\TraversableContainsEqual","details":"containsEqual(mixed $value): PHPUnit\\Framework\\Constraint\\TraversableContainsEqual"},
        {"trigger":"containsIdentical","contents":"containsIdentical(${1:mixed:value});","kind":["function","m","Method"],"annotation":"containsIdentical(mixed $value): PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical","details":"containsIdentical(mixed $value): PHPUnit\\Framework\\Constraint\\TraversableContainsIdentical"},
        {"trigger":"containsOnly","contents":"containsOnly(${1:string:type});","kind":["function","m","Method"],"annotation":"containsOnly(string $type): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnly(string $type): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"containsOnlyInstancesOf","contents":"containsOnlyInstancesOf(${1:string:className});","kind":["function","m","Method"],"annotation":"containsOnlyInstancesOf(string $className): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly","details":"containsOnlyInstancesOf(string $className): PHPUnit\\Framework\\Constraint\\TraversableContainsOnly"},
        {"trigger":"countOf","contents":"countOf(${1:int:count});","kind":["function","m","Method"],"annotation":"countOf(int $count): PHPUnit\\Framework\\Constraint\\Count","details":"countOf(int $count): PHPUnit\\Framework\\Constraint\\Count"},
        {"trigger":"createConfiguredMock","contents":"createConfiguredMock(${1:string:originalClassName}, ${2:array:configuration});","kind":["function","m","Method"],"annotation":"createConfiguredMock(string $originalClassName, array $configuration): PHPUnit\\Framework\\MockObject\\MockObject","details":"createConfiguredMock(string $originalClassName, array $configuration): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createConfiguredStub","contents":"createConfiguredStub(${1:string:originalClassName}, ${2:array:configuration});","kind":["function","m","Method"],"annotation":"createConfiguredStub(string $originalClassName, array $configuration): PHPUnit\\Framework\\MockObject\\Stub","details":"createConfiguredStub(string $originalClassName, array $configuration): PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createMock","contents":"createMock(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"createMock(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject","details":"createMock(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createMockForIntersectionOfInterfaces","contents":"createMockForIntersectionOfInterfaces(${1:array:interfaces});","kind":["function","m","Method"],"annotation":"createMockForIntersectionOfInterfaces(array $interfaces): PHPUnit\\Framework\\MockObject\\MockObject","details":"createMockForIntersectionOfInterfaces(array $interfaces): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createPartialMock","contents":"createPartialMock(${1:string:originalClassName}, ${2:array:methods});","kind":["function","m","Method"],"annotation":"createPartialMock(string $originalClassName, array $methods): PHPUnit\\Framework\\MockObject\\MockObject","details":"createPartialMock(string $originalClassName, array $methods): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"createStub","contents":"createStub(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"createStub(string $originalClassName): PHPUnit\\Framework\\MockObject\\Stub","details":"createStub(string $originalClassName): PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createStubForIntersectionOfInterfaces","contents":"createStubForIntersectionOfInterfaces(${1:array:interfaces});","kind":["function","m","Method"],"annotation":"createStubForIntersectionOfInterfaces(array $interfaces): PHPUnit\\Framework\\MockObject\\Stub","details":"createStubForIntersectionOfInterfaces(array $interfaces): PHPUnit\\Framework\\MockObject\\Stub"},
        {"trigger":"createTestProxy","contents":"createTestProxy(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"createTestProxy(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject","details":"createTestProxy(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"dataSetAsString","contents":"dataSetAsString();","kind":["function","m","Method"],"annotation":"dataSetAsString(): string","details":"dataSetAsString(): string"},
        {"trigger":"dataSetAsStringWithData","contents":"dataSetAsStringWithData();","kind":["function","m","Method"],"annotation":"dataSetAsStringWithData(): string","details":"dataSetAsStringWithData(): string"},
        {"trigger":"dependencyInput","contents":"dependencyInput();","kind":["function","m","Method"],"annotation":"dependencyInput(): array","details":"dependencyInput(): array"},
        {"trigger":"directoryExists","contents":"directoryExists();","kind":["function","m","Method"],"annotation":"directoryExists(): PHPUnit\\Framework\\Constraint\\DirectoryExists","details":"directoryExists(): PHPUnit\\Framework\\Constraint\\DirectoryExists"},
        {"trigger":"equalTo","contents":"equalTo(${1:mixed:value});","kind":["function","m","Method"],"annotation":"equalTo(mixed $value): PHPUnit\\Framework\\Constraint\\IsEqual","details":"equalTo(mixed $value): PHPUnit\\Framework\\Constraint\\IsEqual"},
        {"trigger":"equalToCanonicalizing","contents":"equalToCanonicalizing(${1:mixed:value});","kind":["function","m","Method"],"annotation":"equalToCanonicalizing(mixed $value): PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing","details":"equalToCanonicalizing(mixed $value): PHPUnit\\Framework\\Constraint\\IsEqualCanonicalizing"},
        {"trigger":"equalToIgnoringCase","contents":"equalToIgnoringCase(${1:mixed:value});","kind":["function","m","Method"],"annotation":"equalToIgnoringCase(mixed $value): PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase","details":"equalToIgnoringCase(mixed $value): PHPUnit\\Framework\\Constraint\\IsEqualIgnoringCase"},
        {"trigger":"equalToWithDelta","contents":"equalToWithDelta(${1:mixed:value}, ${2:float:delta});","kind":["function","m","Method"],"annotation":"equalToWithDelta(mixed $value, float $delta): PHPUnit\\Framework\\Constraint\\IsEqualWithDelta","details":"equalToWithDelta(mixed $value, float $delta): PHPUnit\\Framework\\Constraint\\IsEqualWithDelta"},
        {"trigger":"exactly","contents":"exactly(${1:int:count});","kind":["function","m","Method"],"annotation":"exactly(int $count): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"exactly(int $count): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"expectException","contents":"expectException(${1:string:exception});","kind":["function","m","Method"],"annotation":"expectException(string $exception): void","details":"expectException(string $exception): void"},
        {"trigger":"expectExceptionCode","contents":"expectExceptionCode(${1:string|int:code});","kind":["function","m","Method"],"annotation":"expectExceptionCode(string|int $code): void","details":"expectExceptionCode(string|int $code): void"},
        {"trigger":"expectExceptionMessage","contents":"expectExceptionMessage(${1:string:message});","kind":["function","m","Method"],"annotation":"expectExceptionMessage(string $message): void","details":"expectExceptionMessage(string $message): void"},
        {"trigger":"expectExceptionMessageMatches","contents":"expectExceptionMessageMatches(${1:string:regularExpression});","kind":["function","m","Method"],"annotation":"expectExceptionMessageMatches(string $regularExpression): void","details":"expectExceptionMessageMatches(string $regularExpression): void"},
        {"trigger":"expectExceptionObject","contents":"expectExceptionObject(${1:Exception:exception});","kind":["function","m","Method"],"annotation":"expectExceptionObject(Exception $exception): void","details":"expectExceptionObject(Exception $exception): void"},
        {"trigger":"expectNotToPerformAssertions","contents":"expectNotToPerformAssertions();","kind":["function","m","Method"],"annotation":"expectNotToPerformAssertions(): void","details":"expectNotToPerformAssertions(): void"},
        {"trigger":"expectOutputRegex","contents":"expectOutputRegex(${1:string:expectedRegex});","kind":["function","m","Method"],"annotation":"expectOutputRegex(string $expectedRegex): void","details":"expectOutputRegex(string $expectedRegex): void"},
        {"trigger":"expectOutputString","contents":"expectOutputString(${1:string:expectedString});","kind":["function","m","Method"],"annotation":"expectOutputString(string $expectedString): void","details":"expectOutputString(string $expectedString): void"},
        {"trigger":"fail","contents":"fail($1);","kind":["function","m","Method"],"annotation":"fail($1): never","details":"fail($1): never"},
        {"trigger":"fileExists","contents":"fileExists();","kind":["function","m","Method"],"annotation":"fileExists(): PHPUnit\\Framework\\Constraint\\FileExists","details":"fileExists(): PHPUnit\\Framework\\Constraint\\FileExists"},
        {"trigger":"getMockBuilder","contents":"getMockBuilder(${1:string:className});","kind":["function","m","Method"],"annotation":"getMockBuilder(string $className): PHPUnit\\Framework\\MockObject\\MockBuilder","details":"getMockBuilder(string $className): PHPUnit\\Framework\\MockObject\\MockBuilder"},
        {"trigger":"getMockForAbstractClass","contents":"getMockForAbstractClass(${1:string:originalClassName});","kind":["function","m","Method"],"annotation":"getMockForAbstractClass(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForAbstractClass(string $originalClassName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockForTrait","contents":"getMockForTrait(${1:string:traitName});","kind":["function","m","Method"],"annotation":"getMockForTrait(string $traitName): PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockForTrait(string $traitName): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"getMockFromWsdl","contents":"getMockFromWsdl(${1:string:wsdlFile});","kind":["function","m","Method"],"annotation":"getMockFromWsdl(string $wsdlFile): PHPUnit\\Framework\\MockObject\\MockObject","details":"getMockFromWsdl(string $wsdlFile): PHPUnit\\Framework\\MockObject\\MockObject"},
        {"trigger":"greaterThan","contents":"greaterThan(${1:mixed:value});","kind":["function","m","Method"],"annotation":"greaterThan(mixed $value): PHPUnit\\Framework\\Constraint\\GreaterThan","details":"greaterThan(mixed $value): PHPUnit\\Framework\\Constraint\\GreaterThan"},
        {"trigger":"greaterThanOrEqual","contents":"greaterThanOrEqual(${1:mixed:value});","kind":["function","m","Method"],"annotation":"greaterThanOrEqual(mixed $value): PHPUnit\\Framework\\Constraint\\LogicalOr","details":"greaterThanOrEqual(mixed $value): PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"groups","contents":"groups();","kind":["function","m","Method"],"annotation":"groups(): array","details":"groups(): array"},
        {"trigger":"hasDependencyInput","contents":"hasDependencyInput();","kind":["function","m","Method"],"annotation":"hasDependencyInput(): bool","details":"hasDependencyInput(): bool"},
        {"trigger":"hasUnexpectedOutput","contents":"hasUnexpectedOutput();","kind":["function","m","Method"],"annotation":"hasUnexpectedOutput(): bool","details":"hasUnexpectedOutput(): bool"},
        {"trigger":"identicalTo","contents":"identicalTo(${1:mixed:value});","kind":["function","m","Method"],"annotation":"identicalTo(mixed $value): PHPUnit\\Framework\\Constraint\\IsIdentical","details":"identicalTo(mixed $value): PHPUnit\\Framework\\Constraint\\IsIdentical"},
        {"trigger":"isEmpty","contents":"isEmpty();","kind":["function","m","Method"],"annotation":"isEmpty(): PHPUnit\\Framework\\Constraint\\IsEmpty","details":"isEmpty(): PHPUnit\\Framework\\Constraint\\IsEmpty"},
        {"trigger":"isFalse","contents":"isFalse();","kind":["function","m","Method"],"annotation":"isFalse(): PHPUnit\\Framework\\Constraint\\IsFalse","details":"isFalse(): PHPUnit\\Framework\\Constraint\\IsFalse"},
        {"trigger":"isFinite","contents":"isFinite();","kind":["function","m","Method"],"annotation":"isFinite(): PHPUnit\\Framework\\Constraint\\IsFinite","details":"isFinite(): PHPUnit\\Framework\\Constraint\\IsFinite"},
        {"trigger":"isInIsolation","contents":"isInIsolation();","kind":["function","m","Method"],"annotation":"isInIsolation(): bool","details":"isInIsolation(): bool"},
        {"trigger":"isInfinite","contents":"isInfinite();","kind":["function","m","Method"],"annotation":"isInfinite(): PHPUnit\\Framework\\Constraint\\IsInfinite","details":"isInfinite(): PHPUnit\\Framework\\Constraint\\IsInfinite"},
        {"trigger":"isInstanceOf","contents":"isInstanceOf(${1:string:className});","kind":["function","m","Method"],"annotation":"isInstanceOf(string $className): PHPUnit\\Framework\\Constraint\\IsInstanceOf","details":"isInstanceOf(string $className): PHPUnit\\Framework\\Constraint\\IsInstanceOf"},
        {"trigger":"isJson","contents":"isJson();","kind":["function","m","Method"],"annotation":"isJson(): PHPUnit\\Framework\\Constraint\\IsJson","details":"isJson(): PHPUnit\\Framework\\Constraint\\IsJson"},
        {"trigger":"isList","contents":"isList();","kind":["function","m","Method"],"annotation":"isList(): PHPUnit\\Framework\\Constraint\\IsList","details":"isList(): PHPUnit\\Framework\\Constraint\\IsList"},
        {"trigger":"isNan","contents":"isNan();","kind":["function","m","Method"],"annotation":"isNan(): PHPUnit\\Framework\\Constraint\\IsNan","details":"isNan(): PHPUnit\\Framework\\Constraint\\IsNan"},
        {"trigger":"isNull","contents":"isNull();","kind":["function","m","Method"],"annotation":"isNull(): PHPUnit\\Framework\\Constraint\\IsNull","details":"isNull(): PHPUnit\\Framework\\Constraint\\IsNull"},
        {"trigger":"isReadable","contents":"isReadable();","kind":["function","m","Method"],"annotation":"isReadable(): PHPUnit\\Framework\\Constraint\\IsReadable","details":"isReadable(): PHPUnit\\Framework\\Constraint\\IsReadable"},
        {"trigger":"isTrue","contents":"isTrue();","kind":["function","m","Method"],"annotation":"isTrue(): PHPUnit\\Framework\\Constraint\\IsTrue","details":"isTrue(): PHPUnit\\Framework\\Constraint\\IsTrue"},
        {"trigger":"isType","contents":"isType(${1:string:type});","kind":["function","m","Method"],"annotation":"isType(string $type): PHPUnit\\Framework\\Constraint\\IsType","details":"isType(string $type): PHPUnit\\Framework\\Constraint\\IsType"},
        {"trigger":"isWritable","contents":"isWritable();","kind":["function","m","Method"],"annotation":"isWritable(): PHPUnit\\Framework\\Constraint\\IsWritable","details":"isWritable(): PHPUnit\\Framework\\Constraint\\IsWritable"},
        {"trigger":"lessThan","contents":"lessThan(${1:mixed:value});","kind":["function","m","Method"],"annotation":"lessThan(mixed $value): PHPUnit\\Framework\\Constraint\\LessThan","details":"lessThan(mixed $value): PHPUnit\\Framework\\Constraint\\LessThan"},
        {"trigger":"lessThanOrEqual","contents":"lessThanOrEqual(${1:mixed:value});","kind":["function","m","Method"],"annotation":"lessThanOrEqual(mixed $value): PHPUnit\\Framework\\Constraint\\LogicalOr","details":"lessThanOrEqual(mixed $value): PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalAnd","contents":"logicalAnd($1);","kind":["function","m","Method"],"annotation":"logicalAnd($1): PHPUnit\\Framework\\Constraint\\LogicalAnd","details":"logicalAnd($1): PHPUnit\\Framework\\Constraint\\LogicalAnd"},
        {"trigger":"logicalNot","contents":"logicalNot(${1:PHPUnit\\Framework\\Constraint\\Constraint:constraint});","kind":["function","m","Method"],"annotation":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint): PHPUnit\\Framework\\Constraint\\LogicalNot","details":"logicalNot(PHPUnit\\Framework\\Constraint\\Constraint $constraint): PHPUnit\\Framework\\Constraint\\LogicalNot"},
        {"trigger":"logicalOr","contents":"logicalOr($1);","kind":["function","m","Method"],"annotation":"logicalOr($1): PHPUnit\\Framework\\Constraint\\LogicalOr","details":"logicalOr($1): PHPUnit\\Framework\\Constraint\\LogicalOr"},
        {"trigger":"logicalXor","contents":"logicalXor($1);","kind":["function","m","Method"],"annotation":"logicalXor($1): PHPUnit\\Framework\\Constraint\\LogicalXor","details":"logicalXor($1): PHPUnit\\Framework\\Constraint\\LogicalXor"},
        {"trigger":"markTestIncomplete","contents":"markTestIncomplete($1);","kind":["function","m","Method"],"annotation":"markTestIncomplete($1): never","details":"markTestIncomplete($1): never"},
        {"trigger":"markTestSkipped","contents":"markTestSkipped($1);","kind":["function","m","Method"],"annotation":"markTestSkipped($1): never","details":"markTestSkipped($1): never"},
        {"trigger":"matches","contents":"matches(${1:string:string});","kind":["function","m","Method"],"annotation":"matches(string $string): PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription","details":"matches(string $string): PHPUnit\\Framework\\Constraint\\StringMatchesFormatDescription"},
        {"trigger":"matchesRegularExpression","contents":"matchesRegularExpression(${1:string:pattern});","kind":["function","m","Method"],"annotation":"matchesRegularExpression(string $pattern): PHPUnit\\Framework\\Constraint\\RegularExpression","details":"matchesRegularExpression(string $pattern): PHPUnit\\Framework\\Constraint\\RegularExpression"},
        {"trigger":"name","contents":"name();","kind":["function","m","Method"],"annotation":"name(): string","details":"name(): string"},
        {"trigger":"nameWithDataSet","contents":"nameWithDataSet();","kind":["function","m","Method"],"annotation":"nameWithDataSet(): string","details":"nameWithDataSet(): string"},
        {"trigger":"never","contents":"never();","kind":["function","m","Method"],"annotation":"never(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"never(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"numberOfAssertionsPerformed","contents":"numberOfAssertionsPerformed();","kind":["function","m","Method"],"annotation":"numberOfAssertionsPerformed(): int","details":"numberOfAssertionsPerformed(): int"},
        {"trigger":"onConsecutiveCalls","contents":"onConsecutiveCalls($1);","kind":["function","m","Method"],"annotation":"onConsecutiveCalls($1): PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls","details":"onConsecutiveCalls($1): PHPUnit\\Framework\\MockObject\\Stub\\ConsecutiveCalls"},
        {"trigger":"once","contents":"once();","kind":["function","m","Method"],"annotation":"once(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount","details":"once(): PHPUnit\\Framework\\MockObject\\Rule\\InvokedCount"},
        {"trigger":"output","contents":"output();","kind":["function","m","Method"],"annotation":"output(): string","details":"output(): string"},
        {"trigger":"providedData","contents":"providedData();","kind":["function","m","Method"],"annotation":"providedData(): array","details":"providedData(): array"},
        {"trigger":"registerFailureType","contents":"registerFailureType(${1:string:classOrInterface});","kind":["function","m","Method"],"annotation":"registerFailureType(string $classOrInterface): void","details":"registerFailureType(string $classOrInterface): void"},
        {"trigger":"registerMockObjectsFromTestArgumentsRecursively","contents":"registerMockObjectsFromTestArgumentsRecursively();","kind":["function","m","Method"],"annotation":"registerMockObjectsFromTestArgumentsRecursively(): void","details":"registerMockObjectsFromTestArgumentsRecursively(): void"},
        {"trigger":"result","contents":"result();","kind":["function","m","Method"],"annotation":"result(): mixed","details":"result(): mixed"},
        {"trigger":"returnArgument","contents":"returnArgument(${1:int:argumentIndex});","kind":["function","m","Method"],"annotation":"returnArgument(int $argumentIndex): PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument","details":"returnArgument(int $argumentIndex): PHPUnit\\Framework\\MockObject\\Stub\\ReturnArgument"},
        {"trigger":"returnCallback","contents":"returnCallback(${1:callable:callback});","kind":["function","m","Method"],"annotation":"returnCallback(callable $callback): PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback","details":"returnCallback(callable $callback): PHPUnit\\Framework\\MockObject\\Stub\\ReturnCallback"},
        {"trigger":"returnSelf","contents":"returnSelf();","kind":["function","m","Method"],"annotation":"returnSelf(): PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf","details":"returnSelf(): PHPUnit\\Framework\\MockObject\\Stub\\ReturnSelf"},
        {"trigger":"returnValue","contents":"returnValue(${1:mixed:value});","kind":["function","m","Method"],"annotation":"returnValue(mixed $value): PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub","details":"returnValue(mixed $value): PHPUnit\\Framework\\MockObject\\Stub\\ReturnStub"},
        {"trigger":"returnValueMap","contents":"returnValueMap(${1:array:valueMap});","kind":["function","m","Method"],"annotation":"returnValueMap(array $valueMap): PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap","details":"returnValueMap(array $valueMap): PHPUnit\\Framework\\MockObject\\Stub\\ReturnValueMap"},
        {"trigger":"setBackupGlobalsExcludeList","contents":"setBackupGlobalsExcludeList(${1:array:backupGlobalsExcludeList});","kind":["function","m","Method"],"annotation":"setBackupGlobalsExcludeList(array $backupGlobalsExcludeList): void","details":"setBackupGlobalsExcludeList(array $backupGlobalsExcludeList): void"},
        {"trigger":"setBackupStaticProperties","contents":"setBackupStaticProperties(${1:bool:backupStaticProperties});","kind":["function","m","Method"],"annotation":"setBackupStaticProperties(bool $backupStaticProperties): void","details":"setBackupStaticProperties(bool $backupStaticProperties): void"},
        {"trigger":"setBackupStaticPropertiesExcludeList","contents":"setBackupStaticPropertiesExcludeList(${1:array:backupStaticPropertiesExcludeList});","kind":["function","m","Method"],"annotation":"setBackupStaticPropertiesExcludeList(array $backupStaticPropertiesExcludeList): void","details":"setBackupStaticPropertiesExcludeList(array $backupStaticPropertiesExcludeList): void"},
        {"trigger":"setData","contents":"setData(${1:string|int:dataName}, ${2:array:data});","kind":["function","m","Method"],"annotation":"setData(string|int $dataName, array $data): void","details":"setData(string|int $dataName, array $data): void"},
        {"trigger":"size","contents":"size();","kind":["function","m","Method"],"annotation":"size(): PHPUnit\\Framework\\TestSize\\TestSize","details":"size(): PHPUnit\\Framework\\TestSize\\TestSize"},
        {"trigger":"status","contents":"status();","kind":["function","m","Method"],"annotation":"status(): PHPUnit\\Framework\\TestStatus\\TestStatus","details":"status(): PHPUnit\\Framework\\TestStatus\\TestStatus"},
        {"trigger":"stringContains","contents":"stringContains(${1:string:string});","kind":["function","m","Method"],"annotation":"stringContains(string $string): PHPUnit\\Framework\\Constraint\\StringContains","details":"stringContains(string $string): PHPUnit\\Framework\\Constraint\\StringContains"},
        {"trigger":"stringEndsWith","contents":"stringEndsWith(${1:string:suffix});","kind":["function","m","Method"],"annotation":"stringEndsWith(string $suffix): PHPUnit\\Framework\\Constraint\\StringEndsWith","details":"stringEndsWith(string $suffix): PHPUnit\\Framework\\Constraint\\StringEndsWith"},
        {"trigger":"stringEqualsStringIgnoringLineEndings","contents":"stringEqualsStringIgnoringLineEndings(${1:string:string});","kind":["function","m","Method"],"annotation":"stringEqualsStringIgnoringLineEndings(string $string): PHPUnit\\Framework\\Constraint\\StringEqualsStringIgnoringLineEndings","details":"stringEqualsStringIgnoringLineEndings(string $string): PHPUnit\\Framework\\Constraint\\StringEqualsStringIgnoringLineEndings"},
        {"trigger":"stringStartsWith","contents":"stringStartsWith(${1:string:prefix});","kind":["function","m","Method"],"annotation":"stringStartsWith(string $prefix): PHPUnit\\Framework\\Constraint\\StringStartsWith","details":"stringStartsWith(string $prefix): PHPUnit\\Framework\\Constraint\\StringStartsWith"},
        {"trigger":"throwException","contents":"throwException(${1:Throwable:exception});","kind":["function","m","Method"],"annotation":"throwException(Throwable $exception): PHPUnit\\Framework\\MockObject\\Stub\\Exception","details":"throwException(Throwable $exception): PHPUnit\\Framework\\MockObject\\Stub\\Exception"},
        {"trigger":"transformException","contents":"transformException(${1:Throwable:t});","kind":["function","m","Method"],"annotation":"transformException(Throwable $t): Throwable","details":"transformException(Throwable $t): Throwable"},
        {"trigger":"valueObjectForEvents","contents":"valueObjectForEvents();","kind":["function","m","Method"],"annotation":"valueObjectForEvents(): PHPUnit\\Event\\Code\\TestMethod","details":"valueObjectForEvents(): PHPUnit\\Event\\Code\\TestMethod"},
        {"trigger":"wasPrepared","contents":"wasPrepared();","kind":["function","m","Method"],"annotation":"wasPrepared(): bool","details":"wasPrepared(): bool"}
    ]
}
