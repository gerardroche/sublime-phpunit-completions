{
    // scope:
    //
    // source.php meta.function-call-object
    // source.php variable.other.property

    "scope": "source.php meta.function-call-object, source.php variable.other.property",
    "completions": [
        {"trigger":"any()\tPHPUnit","contents":"any();"},
        {"trigger":"anything()\tPHPUnit","contents":"anything();"},
        {"trigger":"arrayHasKey()\tPHPUnit","contents":"arrayHasKey(${1:key});"},
        {"trigger":"assertArrayHasKey()\tPHPUnit","contents":"assertArrayHasKey(${1:key}, ${2:array});"},
        {"trigger":"assertArrayNotHasKey()\tPHPUnit","contents":"assertArrayNotHasKey(${1:key}, ${2:array});"},
        {"trigger":"assertArraySubset()\tPHPUnit","contents":"assertArraySubset(${1:subset}, ${2:array});"},
        {"trigger":"assertAttributeContains()\tPHPUnit","contents":"assertAttributeContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeContainsOnly()\tPHPUnit","contents":"assertAttributeContainsOnly(${1:type}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeCount()\tPHPUnit","contents":"assertAttributeCount(${1:expectedCount}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeEmpty()\tPHPUnit","contents":"assertAttributeEmpty(${1:haystackAttributeName}, ${2:haystackClassOrObject});"},
        {"trigger":"assertAttributeEquals()\tPHPUnit","contents":"assertAttributeEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeGreaterThan()\tPHPUnit","contents":"assertAttributeGreaterThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeGreaterThanOrEqual()\tPHPUnit","contents":"assertAttributeGreaterThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeInstanceOf()\tPHPUnit","contents":"assertAttributeInstanceOf(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeInternalType()\tPHPUnit","contents":"assertAttributeInternalType(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeLessThan()\tPHPUnit","contents":"assertAttributeLessThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeLessThanOrEqual()\tPHPUnit","contents":"assertAttributeLessThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeNotContains()\tPHPUnit","contents":"assertAttributeNotContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotContainsOnly()\tPHPUnit","contents":"assertAttributeNotContainsOnly(${1:type}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotCount()\tPHPUnit","contents":"assertAttributeNotCount(${1:expectedCount}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotEmpty()\tPHPUnit","contents":"assertAttributeNotEmpty(${1:haystackAttributeName}, ${2:haystackClassOrObject});"},
        {"trigger":"assertAttributeNotEquals()\tPHPUnit","contents":"assertAttributeNotEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeNotInstanceOf()\tPHPUnit","contents":"assertAttributeNotInstanceOf(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeNotInternalType()\tPHPUnit","contents":"assertAttributeNotInternalType(${1:expected}, ${2:attributeName}, ${3:classOrObject});"},
        {"trigger":"assertAttributeNotSame()\tPHPUnit","contents":"assertAttributeNotSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertAttributeSame()\tPHPUnit","contents":"assertAttributeSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});"},
        {"trigger":"assertClassHasAttribute()\tPHPUnit","contents":"assertClassHasAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassHasStaticAttribute()\tPHPUnit","contents":"assertClassHasStaticAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassNotHasAttribute()\tPHPUnit","contents":"assertClassNotHasAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertClassNotHasStaticAttribute()\tPHPUnit","contents":"assertClassNotHasStaticAttribute(${1:attributeName}, ${2:className});"},
        {"trigger":"assertContains()\tPHPUnit","contents":"assertContains(${1:needle}, ${2:haystack});"},
        {"trigger":"assertContainsOnly()\tPHPUnit","contents":"assertContainsOnly(${1:type}, ${2:haystack});"},
        {"trigger":"assertContainsOnlyInstancesOf()\tPHPUnit","contents":"assertContainsOnlyInstancesOf(${1:classname}, ${2:haystack});"},
        {"trigger":"assertCount()\tPHPUnit","contents":"assertCount(${1:expectedCount}, ${2:haystack});"},
        {"trigger":"assertDataSetsEqual()\tDbUnit","contents":"assertDataSetsEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertEmpty()\tPHPUnit","contents":"assertEmpty(${1:actual});"},
        {"trigger":"assertEquals()\tPHPUnit","contents":"assertEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertEqualXMLStructure()\tPHPUnit","contents":"assertEqualXMLStructure(${1:expectedElement}, ${2:actualElement});"},
        {"trigger":"assertFalse()\tPHPUnit","contents":"assertFalse(${1:condition});"},
        {"trigger":"assertFileEquals()\tPHPUnit","contents":"assertFileEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertFileExists()\tPHPUnit","contents":"assertFileExists(${1:filename});"},
        {"trigger":"assertFileNotEquals()\tPHPUnit","contents":"assertFileNotEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertFileNotExists()\tPHPUnit","contents":"assertFileNotExists(${1:filename});"},
        {"trigger":"assertGreaterThan()\tPHPUnit","contents":"assertGreaterThan(${1:expected}, ${2:actual});"},
        {"trigger":"assertGreaterThanOrEqual()\tPHPUnit","contents":"assertGreaterThanOrEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertInstanceOf()\tPHPUnit","contents":"assertInstanceOf(${1:expected}, ${2:actual});"},
        {"trigger":"assertInternalType()\tPHPUnit","contents":"assertInternalType(${1:expected}, ${2:actual});"},
        {"trigger":"assertJson()\tPHPUnit","contents":"assertJson(${1:actualJson});"},
        {"trigger":"assertJsonFileEqualsJsonFile()\tPHPUnit","contents":"assertJsonFileEqualsJsonFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertJsonFileNotEqualsJsonFile()\tPHPUnit","contents":"assertJsonFileNotEqualsJsonFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertJsonStringEqualsJsonFile()\tPHPUnit","contents":"assertJsonStringEqualsJsonFile(${1:expectedFile}, ${2:actualJson});"},
        {"trigger":"assertJsonStringEqualsJsonString()\tPHPUnit","contents":"assertJsonStringEqualsJsonString(${1:expectedJson}, ${2:actualJson});"},
        {"trigger":"assertJsonStringNotEqualsJsonFile()\tPHPUnit","contents":"assertJsonStringNotEqualsJsonFile(${1:expectedFile}, ${2:actualJson});"},
        {"trigger":"assertJsonStringNotEqualsJsonString()\tPHPUnit","contents":"assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});"},
        {"trigger":"assertLessThan()\tPHPUnit","contents":"assertLessThan(${1:expected}, ${2:actual});"},
        {"trigger":"assertLessThanOrEqual()\tPHPUnit","contents":"assertLessThanOrEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotContains()\tPHPUnit","contents":"assertNotContains(${1:needle}, ${2:haystack});"},
        {"trigger":"assertNotContainsOnly()\tPHPUnit","contents":"assertNotContainsOnly(${1:type}, ${2:haystack});"},
        {"trigger":"assertNotCount()\tPHPUnit","contents":"assertNotCount(${1:expectedCount}, ${2:haystack});"},
        {"trigger":"assertNotEmpty()\tPHPUnit","contents":"assertNotEmpty(${1:actual});"},
        {"trigger":"assertNotEquals()\tPHPUnit","contents":"assertNotEquals(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotFalse()\tPHPUnit","contents":"assertNotFalse(${1:condition});"},
        {"trigger":"assertNotInstanceOf()\tPHPUnit","contents":"assertNotInstanceOf(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotInternalType()\tPHPUnit","contents":"assertNotInternalType(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotNull()\tPHPUnit","contents":"assertNotNull(${1:actual});"},
        {"trigger":"assertNotRegExp()\tPHPUnit","contents":"assertNotRegExp(${1:pattern}, ${2:string});"},
        {"trigger":"assertNotSame()\tPHPUnit","contents":"assertNotSame(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotSameSize()\tPHPUnit","contents":"assertNotSameSize(${1:expected}, ${2:actual});"},
        {"trigger":"assertNotTag()\tPHPUnit","contents":"assertNotTag(${1:matcher}, ${2:actual});"},
        {"trigger":"assertNotTrue()\tPHPUnit","contents":"assertNotTrue(${1:condition});"},
        {"trigger":"assertNull()\tPHPUnit","contents":"assertNull(${1:actual});"},
        {"trigger":"assertObjectHasAttribute()\tPHPUnit","contents":"assertObjectHasAttribute(${1:attributeName}, ${2:object});"},
        {"trigger":"assertObjectNotHasAttribute()\tPHPUnit","contents":"assertObjectNotHasAttribute(${1:attributeName}, ${2:object});"},
        {"trigger":"assertRegExp()\tPHPUnit","contents":"assertRegExp(${1:pattern}, ${2:string});"},
        {"trigger":"assertSame()\tPHPUnit","contents":"assertSame(${1:expected}, ${2:actual});"},
        {"trigger":"assertSameSize()\tPHPUnit","contents":"assertSameSize(${1:expected}, ${2:actual});"},
        {"trigger":"assertSelectCount()\tPHPUnit","contents":"assertSelectCount(${1:selector}, ${2:count}, ${3:actual});"},
        {"trigger":"assertSelectEquals()\tPHPUnit","contents":"assertSelectEquals(${1:selector}, ${2:content}, ${3:count}, ${4:actual});"},
        {"trigger":"assertSelectRegExp()\tPHPUnit","contents":"assertSelectRegExp(${1:selector}, ${2:pattern}, ${3:count}, ${4:actual});"},
        {"trigger":"assertStringEndsNotWith()\tPHPUnit","contents":"assertStringEndsNotWith(${1:suffix}, ${2:string});"},
        {"trigger":"assertStringEndsWith()\tPHPUnit","contents":"assertStringEndsWith(${1:suffix}, ${2:string});"},
        {"trigger":"assertStringEqualsFile()\tPHPUnit","contents":"assertStringEqualsFile(${1:expectedFile}, ${2:actualString});"},
        {"trigger":"assertStringMatchesFormat()\tPHPUnit","contents":"assertStringMatchesFormat(${1:format}, ${2:string});"},
        {"trigger":"assertStringMatchesFormatFile()\tPHPUnit","contents":"assertStringMatchesFormatFile(${1:formatFile}, ${2:string});"},
        {"trigger":"assertStringNotEqualsFile()\tPHPUnit","contents":"assertStringNotEqualsFile(${1:expectedFile}, ${2:actualString});"},
        {"trigger":"assertStringNotMatchesFormat()\tPHPUnit","contents":"assertStringNotMatchesFormat(${1:format}, ${2:string});"},
        {"trigger":"assertStringNotMatchesFormatFile()\tPHPUnit","contents":"assertStringNotMatchesFormatFile(${1:formatFile}, ${2:string});"},
        {"trigger":"assertStringStartsNotWith()\tPHPUnit","contents":"assertStringStartsNotWith(${1:prefix}, ${2:string});"},
        {"trigger":"assertStringStartsWith()\tPHPUnit","contents":"assertStringStartsWith(${1:prefix}, ${2:string});"},
        {"trigger":"assertTableContains()\tDbUnit","contents":"assertTableContains(${1:(array) expectedRow}, ${2:table});"},
        {"trigger":"assertTableRowCount()\tDbUnit","contents":"assertTableRowCount(${1:tableName}, ${2:expected});"},
        {"trigger":"assertTablesEqual()\tDbUnit","contents":"assertTablesEqual(${1:expected}, ${2:actual});"},
        {"trigger":"assertTag()\tPHPUnit","contents":"assertTag(${1:matcher}, ${2:actual});"},
        {"trigger":"assertThat()\tPHPUnit","contents":"assertThat(${1:value}, ${2:constraint});"},
        {"trigger":"assertTrue()\tPHPUnit","contents":"assertTrue(${1:condition});"},
        {"trigger":"assertXmlFileEqualsXmlFile()\tPHPUnit","contents":"assertXmlFileEqualsXmlFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertXmlFileNotEqualsXmlFile()\tPHPUnit","contents":"assertXmlFileNotEqualsXmlFile(${1:expectedFile}, ${2:actualFile});"},
        {"trigger":"assertXmlStringEqualsXmlFile()\tPHPUnit","contents":"assertXmlStringEqualsXmlFile(${1:expectedFile}, ${2:actualXml});"},
        {"trigger":"assertXmlStringEqualsXmlString()\tPHPUnit","contents":"assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});"},
        {"trigger":"assertXmlStringNotEqualsXmlFile()\tPHPUnit","contents":"assertXmlStringNotEqualsXmlFile(${1:expectedFile}, ${2:actualXml});"},
        {"trigger":"assertXmlStringNotEqualsXmlString()\tPHPUnit","contents":"assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});"},
        {"trigger":"at()\tPHPUnit","contents":"at(${1:index});"},
        {"trigger":"atLeast()\tPHPUnit","contents":"atLeast(${1:requiredInvocations});"},
        {"trigger":"atLeastOnce()\tPHPUnit","contents":"atLeastOnce();"},
        {"trigger":"atMost()\tPHPUnit","contents":"atMost(${1:allowedInvocations});"},
        {"trigger":"attribute()\tPHPUnit","contents":"attribute(${1:constraint}, ${2:attributeName});"},
        {"trigger":"attributeEqualTo()\tPHPUnit","contents":"attributeEqualTo(${1:attributeName}, ${2:value});"},
        {"trigger":"callback()\tPHPUnit","contents":"callback(${1:callback});"},
        {"trigger":"classHasAttribute()\tPHPUnit","contents":"classHasAttribute(${1:attributeName});"},
        {"trigger":"classHasStaticAttribute()\tPHPUnit","contents":"classHasStaticAttribute(${1:attributeName});"},
        {"trigger":"closeConnection()\tDbUnit","contents":"closeConnection(${1:connection});"},
        {"trigger":"contains()\tPHPUnit","contents":"contains(${1:value});"},
        {"trigger":"containsOnly()\tPHPUnit","contents":"containsOnly(${1:type});"},
        {"trigger":"containsOnlyInstancesOf()\tPHPUnit","contents":"containsOnlyInstancesOf(${1:classname});"},
        {"trigger":"countOf()\tPHPUnit","contents":"countOf(${1:count});"},
        {"trigger":"createArrayDataSet()\tDbUnit","contents":"createArrayDataSet(${1:(array) data});"},
        {"trigger":"createDefaultDBConnection()\tDbUnit","contents":"createDefaultDBConnection(${1:connection});"},
        {"trigger":"createFlatXMLDataSet()\tDbUnit","contents":"createFlatXMLDataSet(${1:xmlFile});"},
        {"trigger":"createMySQLXMLDataSet()\tDbUnit","contents":"createMySQLXMLDataSet(${1:xmlFile});"},
        {"trigger":"createXMLDataSet()\tDbUnit","contents":"createXMLDataSet(${1:xmlFile});"},
        {"trigger":"equalTo()\tPHPUnit","contents":"equalTo(${1:value});"},
        {"trigger":"exactly()\tPHPUnit","contents":"exactly(${1:count});"},
        {"trigger":"expectOutputRegex()\tPHPUnit","contents":"expectOutputRegex(${1:expectedRegex});"},
        {"trigger":"expectOutputString()\tPHPUnit","contents":"expectOutputString(${1:expectedString});"},
        {"trigger":"fail()\tPHPUnit","contents":"fail();"},
        {"trigger":"fileExists()\tPHPUnit","contents":"fileExists();"},
        {"trigger":"getConnection()\tDbUnit","contents":"getConnection();"},
        {"trigger":"getDatabaseTester()\tDbUnit","contents":"getDatabaseTester();"},
        {"trigger":"getDataSet()\tDbUnit","contents":"getDataSet();"},
        {"trigger":"getExpectedException()\tPHPUnit","contents":"getExpectedException();"},
        {"trigger":"getMock()\tPHPUnit","contents":"getMock(${1:originalClassName});"},
        {"trigger":"getMockBuilder()\tPHPUnit","contents":"getMockBuilder(${1:className});"},
        {"trigger":"getMockClass()\tPHPUnit","contents":"getMockClass(${1:originalClassName});"},
        {"trigger":"getMockForAbstractClass()\tPHPUnit","contents":"getMockForAbstractClass(${1:originalClassName});"},
        {"trigger":"getMockForTrait()\tPHPUnit","contents":"getMockForTrait(${1:traitName});"},
        {"trigger":"getMockFromWsdl()\tPHPUnit","contents":"getMockFromWsdl(${1:wsdlFile});"},
        {"trigger":"getMockObjectGenerator()\tPHPUnit","contents":"getMockObjectGenerator();"},
        {"trigger":"getObjectAttribute()\tPHPUnit","contents":"getObjectAttribute(${1:object}, ${2:attributeName});"},
        {"trigger":"getOperations()\tDbUnit","contents":"getOperations();"},
        {"trigger":"getSetUpOperation()\tDbUnit","contents":"getSetUpOperation();"},
        {"trigger":"getStaticAttribute()\tPHPUnit","contents":"getStaticAttribute(${1:className}, ${2:attributeName});"},
        {"trigger":"getTearDownOperation()\tDbUnit","contents":"getTearDownOperation();"},
        {"trigger":"greaterThan()\tPHPUnit","contents":"greaterThan(${1:value});"},
        {"trigger":"greaterThanOrEqual()\tPHPUnit","contents":"greaterThanOrEqual(${1:value});"},
        {"trigger":"identicalTo()\tPHPUnit","contents":"identicalTo(${1:value});"},
        {"trigger":"isEmpty()\tPHPUnit","contents":"isEmpty();"},
        {"trigger":"isFalse()\tPHPUnit","contents":"isFalse();"},
        {"trigger":"isInIsolation()\tPHPUnit","contents":"isInIsolation();"},
        {"trigger":"isInstanceOf()\tPHPUnit","contents":"isInstanceOf(${1:className});"},
        {"trigger":"isJson()\tPHPUnit","contents":"isJson();"},
        {"trigger":"isNull()\tPHPUnit","contents":"isNull();"},
        {"trigger":"isTrue()\tPHPUnit","contents":"isTrue();"},
        {"trigger":"isType()\tPHPUnit","contents":"isType(${1:type});"},
        {"trigger":"lessThan()\tPHPUnit","contents":"lessThan(${1:value});"},
        {"trigger":"lessThanOrEqual()\tPHPUnit","contents":"lessThanOrEqual(${1:value});"},
        {"trigger":"logicalAnd()\tPHPUnit","contents":"logicalAnd();"},
        {"trigger":"logicalNot()\tPHPUnit","contents":"logicalNot(${1:constraint});"},
        {"trigger":"logicalOr()\tPHPUnit","contents":"logicalOr();"},
        {"trigger":"logicalXor()\tPHPUnit","contents":"logicalXor();"},
        {"trigger":"markTestIncomplete()\tPHPUnit","contents":"markTestIncomplete();"},
        {"trigger":"markTestSkipped()\tPHPUnit","contents":"markTestSkipped();"},
        {"trigger":"matches()\tPHPUnit","contents":"matches(${1:string});"},
        {"trigger":"matchesRegularExpression()\tPHPUnit","contents":"matchesRegularExpression(${1:pattern});"},
        {"trigger":"never()\tPHPUnit","contents":"never();"},
        {"trigger":"newDatabaseTester()\tDbUnit","contents":"newDatabaseTester();"},
        {"trigger":"objectHasAttribute()\tPHPUnit","contents":"objectHasAttribute(${1:attributeName});"},
        {"trigger":"once()\tPHPUnit","contents":"once();"},
        {"trigger":"onConsecutiveCalls()\tPHPUnit","contents":"onConsecutiveCalls();"},
        {"trigger":"readAttribute()\tPHPUnit","contents":"readAttribute(${1:classOrObject}, ${2:attributeName});"},
        {"trigger":"returnArgument()\tPHPUnit","contents":"returnArgument(${1:argumentIndex});"},
        {"trigger":"returnCallback()\tPHPUnit","contents":"returnCallback(${1:callback});"},
        {"trigger":"returnSelf()\tPHPUnit","contents":"returnSelf();"},
        {"trigger":"returnValue()\tPHPUnit","contents":"returnValue(${1:value});"},
        {"trigger":"returnValueMap()\tPHPUnit","contents":"returnValueMap(${1:(array) valueMap});"},
        {"trigger":"setExpectedException()\tPHPUnit","contents":"setExpectedException(${1:exceptionName});"},
        {"trigger":"setExpectedExceptionFromAnnotation()\tPHPUnit","contents":"setExpectedExceptionFromAnnotation();"},
        {"trigger":"setExpectedExceptionRegExp()\tPHPUnit","contents":"setExpectedExceptionRegExp(${1:exceptionName});"},
        {"trigger":"setOutputCallback()\tPHPUnit","contents":"setOutputCallback(${1:callback});"},
        {"trigger":"setUseErrorHandler()\tPHPUnit","contents":"setUseErrorHandler(${1:useErrorHandler});"},
        {"trigger":"setUseErrorHandlerFromAnnotation()\tPHPUnit","contents":"setUseErrorHandlerFromAnnotation();"},
        {"trigger":"stringContains()\tPHPUnit","contents":"stringContains(${1:string});"},
        {"trigger":"stringEndsWith()\tPHPUnit","contents":"stringEndsWith(${1:suffix});"},
        {"trigger":"stringStartsWith()\tPHPUnit","contents":"stringStartsWith(${1:prefix});"},
        {"trigger":"throwException()\tPHPUnit","contents":"throwException(${1:exception});"}
    ]
}
